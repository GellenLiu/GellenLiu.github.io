{"version":3,"sources":["webpack:///./src/data/notes/css.md"],"names":["code","module","exports"],"mappings":"mGACA,IAAIA,EAAO,u9jBAEXC,EAAOC,QAAUF","file":"js/chunk-2d0b6e7c.a5582489.js","sourcesContent":["// Module\nvar code = \"<h1 id=\\\"ui开发学习笔记\\\">UI开发学习笔记</h1> <h2 id=\\\"1、css2213\\\">1、CSS2,2.1,3</h2> <p>CSS2.0 div+CSS，html与css分离的思想</p> <p>css2.1 浮动，定位</p> <p>css3.0 圆角，阴影，动画。。。</p> <h2 id=\\\"2、css的优势\\\">2、css的优势</h2> <ul> <li>内容与表现分离</li> <li>网页结构表现统一，可以实现复用</li> <li>样式十分的丰富</li> <li>建议使用独立于html的css文件</li> <li>利于SEO，容易被搜索引擎收录</li> </ul> <h2 id=\\\"css变量\\\">CSS变量</h2> <p>变量命名为 --</p> <p>使用变量用var()</p> <pre><code class=\\\"language-js\\\">// 定义在根元素\\n:root {\\n    --value: 2px;\\n}\\n定义在某一选择器内\\ndiv {\\n    --abc: 2;\\n}\\ndiv {\\n    width: var(--value);\\n    height: calc(2 * var(--value))\\n}\\n</code></pre> <h2 id=\\\"动画可以用精灵图animate控制图片position来实现\\\">动画可以用精灵图+animate控制图片position来实现</h2> <p>精灵图记录每一帧</p> <p>逐帧动画</p> <p>精度丢失解决：1、不用雪碧图，每一帧一张图片</p> <p>2、使用scale缩放</p> <p>3、使用svg代替雪碧图</p> <h2 id=\\\"使用div模拟输入框\\\">使用div模拟输入框</h2> <p>enableedit可编辑</p> <pre><code class=\\\"language-scss\\\">.team-zone-input {\\n    // padding: .12rem .16rem;\\n    min-height: .72rem;\\n    max-height: 1rem;\\n    border-radius: .08rem;\\n    border: .12rem solid $color-gray-5;\\n    border-left: .16rem solid $color-gray-5;\\n    border-right: .16rem solid $color-gray-5;\\n    background-color: $color-gray-5;\\n    overflow-y: auto;\\n    outline: none;\\n    user-select:text;\\n    -webkit-user-select:text;\\n    color: $color-black;\\n    font-size: $font-xm;\\n    line-height: .44rem;\\n    //输入光标的颜色\\n    caret-color\\n\\n    &amp;:empty:before{\\n      content: attr(data-placeholder);\\n      color:$color-gray-2;\\n    }\\n    &amp;:not(:empty){\\n      &amp;:focus:before{\\n          content:none;\\n      }\\n    }\\n\\n  }\\n</code></pre> <h2 id=\\\"textareare\\\">textareare</h2> <pre><code class=\\\"language-js\\\">//高度自适应\\ninputContent(e) {\\n      const height = e.target.scrollHeight;\\n      const base = parseInt(document.getElementsByTagName(&#39;html&#39;)[0].style.fontSize, 10);\\n      const borderHeight = base * 0.12;\\n      const initHeight = base * 0.64;\\n      const lineHeight = 0.44 * base;\\n      e.target.style.height = &#39;&#39;;\\n      if (lineHeight * 3 &lt;= height) {\\n        e.target.style.height = `${lineHeight * 3 + borderHeight * 2}px`;\\n      } else if (initHeight &gt; height) {\\n        e.target.style.height = `${initHeight}px`;\\n      } else {\\n        e.target.style.height = `${e.target.scrollHeight + borderHeight * 2}px`;\\n      }\\n    },\\n</code></pre> <h2 id=\\\"rem单位的缺点\\\">rem单位的缺点</h2> <p>精度问题</p> <p>屏幕除以750有精度缺失，可以使用scale</p> <ul> <li>1、这部分内容抛弃rem单位，使用绝对正确的px单位来设置动画区间；</li> <li>2、这部分内容抛弃雪碧图，使用16张相同大小的图片保证精度计算的误差是一致的（都向上或向下取整）；，</li> <li>3、寻求更多的解决方案；</li> </ul> <h2 id=\\\"css动画事件\\\">CSS动画事件</h2> <table> <thead> <tr> <th align=\\\"left\\\">事件名称</th> <th align=\\\"left\\\">何时触发</th> </tr> </thead> <tbody><tr> <td align=\\\"left\\\"><code>animationstart (en-US)</code></td> <td align=\\\"left\\\">某个 CSS 动画开始时触发。</td> </tr> <tr> <td align=\\\"left\\\"><code>animationend (en-US)</code></td> <td align=\\\"left\\\">某个 CSS 动画完成时触发。</td> </tr> <tr> <td align=\\\"left\\\"><code>animationiteration (en-US)</code></td> <td align=\\\"left\\\">某个 CSS 动画完成后重新开始时触发。</td> </tr> </tbody></table> <h2 id=\\\"3、三种导入方式\\\">3、三种导入方式</h2> <ul> <li>行内（标签内属性）</li> <li>内部样式（style标签）</li> <li>外部样式（文件）</li> </ul> <blockquote> <p><strong>行内&gt;内部&gt;外部样式</strong>(就近原则)</p> </blockquote> <p>外部样式的两种写法：</p> <p>1、链接</p> <pre><code class=\\\"language-javascript\\\">&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;&lt;/link&gt;\\n</code></pre> <p>2、导入(在style中)</p> <pre><code class=\\\"language-javascript\\\">&lt;style&gt;\\n@import url（&quot;&quot;）\\n&lt;/style&gt;\\n</code></pre> <h2 id=\\\"4、选择器\\\">4、选择器</h2> <p>选择页面上的某个元素</p> <h3 id=\\\"41、标签选择器\\\">4.1、标签选择器</h3> <p>会选择所有指定标签，只能放基本的通用样式</p> <h3 id=\\\"42、类选择器\\\">4.2、类选择器</h3> <p>选中同类名的，一组标签。</p> <pre><code class=\\\"language-javascript\\\">&lt;style&gt;\\n    .classname{\\n        \\n    }\\n&lt;/style&gt;\\n</code></pre> <h3 id=\\\"43、id选择器\\\">4.3、ID选择器</h3> <p>id要唯一</p> <pre><code class=\\\"language-javascript\\\">#idname{\\n\\n}\\n</code></pre> <blockquote> <p><strong>d选择器&gt;类选择器&gt;标签选择器</strong></p> </blockquote> <h3 id=\\\"44、层次选择器\\\">4.4、层次选择器</h3> <ul> <li>后代选择器</li> </ul> <p>在某个元素的后面。eg.body后面有p</p> <pre><code class=\\\"language-javascript\\\">body p{\\n    \\n}\\n</code></pre> <ul> <li>子选择器(第一代儿子)</li> </ul> <pre><code class=\\\"language-javascript\\\">body&gt;p{\\n    \\n}\\n</code></pre> <ul> <li>相邻兄弟选择器</li> </ul> <p>只有一个，下面的那一个元素。</p> <pre><code class=\\\"language-javascript\\\">div1 + div2{\\n\\n}\\n</code></pre> <ul> <li>通用选择器</li> </ul> <p>当前选中元素的所有向下兄弟元素</p> <pre><code class=\\\"language-javascript\\\">div1 ~ div2{\\n\\n}\\n</code></pre> <pre><code class=\\\"language-javascript\\\">border-radius: 24px;//圆角\\n</code></pre> <h3 id=\\\"45、结构伪类选择器\\\">4.5、结构伪类选择器</h3> <pre><code class=\\\"language-javascript\\\">//第一个和最后一个\\nul li:first-child{\\n    \\n}\\nul li:last-child{\\n    \\n}\\n\\n:hover\\n\\n\\n\\n// 选中当前p元素的父级元素，进而选中父级元素的第一个，并且选中的元素是当前元素（p）\\np:nth-child(1){\\n    \\n}\\n//选中父元素下的p元素的第二个，类型\\np:nth-of-type(1){\\n    \\n}\\n</code></pre> <h3 id=\\\"46、属性选择器（常用）\\\">4.6、属性选择器（常用）</h3> <p>id和class结合</p> <pre><code class=\\\"language-javascript\\\">//a标签中带有id属性的\\na[id]{\\n    \\n}\\n//a标签中id=nm的\\na[id=nm]{\\n    \\n}\\n\\n//语法：属性名 = 属性值（正则）\\n//=绝对等于\\n//*=包含\\n//^=以什么开头\\n//$= 以什么结尾\\n\\na[class *= &quot;links&quot;]{\\n}\\n//同时含有多个属性\\na[href][title] {color:red;}\\n</code></pre> <h2 id=\\\"深度选择器可以穿透scoped\\\">深度选择器(可以穿透scoped)</h2> <pre><code class=\\\"language-css\\\">css:\\n&gt;&gt;&gt;\\n\\nless/scss:\\n/deep/    ::v-deep\\n</code></pre> <p>推荐使用::v-deep</p> <p>1、scoped的作用是，给最后一个选择器添加属性。 2、::v-deep的作用是，取消scoped，并且在::v-deep前面的选择器添加属性。如果前面没有选择器，就直接添加一个属性选择器。也就是说就算使用v-deep，也无法在组件内对组件外进行选择。 3、style标签不加scopd，即可全局使用选择器，穿透力更强。</p> <h2 id=\\\"5、美化网页元素\\\">5、美化网页元素</h2> <h3 id=\\\"51、字体样式\\\">5.1、字体样式</h3> <pre><code class=\\\"language-javascript\\\">font-family: xxx，xxx;//字体族\\nfont-size: 50px;//字体大小\\nfont-weight: bold;//字体的粗细\\ncolor： #12a;//字体颜色\\n\\n//第一是风格，第二是粗细，第三是大小，第四是字体\\nfont: oblique bolder 12px &quot;楷体&quot;;\\n</code></pre> <h3 id=\\\"52、文本样式\\\">5.2、文本样式</h3> <pre><code class=\\\"language-javascript\\\">//颜色 ：单词/RGB/RGBA(A是透明度0-1)\\ncolor: rgba(0,255,255,0.5)\\n\\n//排版\\ntext-align: center;\\n//首行缩进 2em是两个字符\\ntext-indent: 2em\\n\\nbackground: #000012;\\n\\n//行高和块的高度一样的话就上下居中\\nheight: 300px;\\nline-height: 300px;\\n\\n\\n//下划线\\ntext-decoration: underline;\\n\\n//上划线\\ntext-decoration: underline;\\n\\n//中划线\\ntext-decoration: line-through;\\n\\n\\n//多元素水平对齐\\nimg,span{\\n    vertical-align: middle;\\n}\\n&lt;div&gt;\\n    &lt;img&gt;\\n    &lt;span&gt;\\n \\n    \\n    \\n\\n</code></pre> <h3 id=\\\"53、伪类\\\">5.3、伪类</h3> <pre><code class=\\\"language-javascript\\\">//鼠标悬浮(重点)\\na:hover{\\n    \\n}\\n//鼠标点完之后\\na:visited{\\n    \\n}\\n\\n//鼠标按住未释放的状态\\na:active{\\n    \\n}\\n</code></pre> <h3 id=\\\"54、列表\\\">5.4、列表</h3> <pre><code class=\\\"language-javascript\\\">&lt;ul&gt;\\n    &lt;li&gt;\\n    &lt;li&gt;\\n    ....\\n    \\n//选中ul下的所有li\\nul li{\\n    height: 30px;//高度\\n    list-style: none;//去掉列表前的黑点,circle为空心⚪，decimal为数字\\n    \\n    \\n    \\n}    \\n</code></pre> <h3 id=\\\"55、背景\\\">5.5、背景</h3> <p>背景颜色</p> <p>背景图片</p> <pre><code class=\\\"language-javascript\\\">//div中方背景图片\\ndiv{\\n    backgroud-image: url(&quot;&quot;);\\n    backgroud-repeat: no-repeat;//(repeat-x,,repeat-y,,水平平铺和竖直平铺)\\n}\\n//默认是全部平铺，不断重复图片，铺满位置\\n</code></pre> <pre><code class=\\\"language-javascript\\\">//参数：颜色，图片，图片位置，平铺方式\\nbackgroud: red url(&quot;&quot;) 270px 10px no-repeat;\\n</code></pre> <h3 id=\\\"56、渐变\\\">5.6、渐变</h3> <pre><code class=\\\"language-javascript\\\">//渐变色，角度，起始颜色，结束颜色\\nbackground-image: linear-gradient(10deg,#21D4FD 0%,#B721FF 100%);\\n</code></pre> <h2 id=\\\"6、盒子模型\\\">6、盒子模型</h2> <p><img src=\\\"C:%5CUsers%5C%E5%88%98%E5%9B%BD%E6%9E%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210312164732644.png\\\" alt=\\\"image-20210312164732644\\\"></p> <p>宽高，外边距，边框，内边距，内容。</p> <p>先初始化，所有的标签都有默认的内外边距。</p> <p>外边距</p> <pre><code class=\\\"language-javascript\\\">margin: 0 auto;//居中元素，写两个参数就是上下，左右\\n</code></pre> <p>控制好：外边距+边框+内边距+内容=规定的大小</p> <pre><code class=\\\"language-javascript\\\">//圆角边框：四个参数，左上，右上，右下，左下。。\\n//两个参数：左上+右下，右上+左下\\n//一个参数：上下左右\\n//参数是圆角的半径！！\\n\\nborder-radius:\\n\\n</code></pre> <ul> <li>IE盒子模型（width包含内边距，边框）</li> <li>标准盒子模型（width只有content）</li> <li>怪异盒子模型（弹性盒子）</li> </ul> <h2 id=\\\"7、浮动\\\">7、浮动</h2> <p>标准文档流</p> <p><img src=\\\"C:%5CUsers%5C%E5%88%98%E5%9B%BD%E6%9E%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210312202406547.png\\\" alt=\\\"image-20210312202406547\\\"></p> <p>块级元素：独占一行，block</p> <pre><code class=\\\"language-javascript\\\">h1-h6\\\\p\\\\div\\\\列表\\n</code></pre> <p>行内元素：不独占一行，inline</p> <pre><code class=\\\"language-javascript\\\">span \\\\a\\\\img\\\\strong...\\n</code></pre> <p>行内元素可以包含在块级元素中，反之不能。</p> <p>div和span最常用</p> <pre><code class=\\\"language-javascript\\\">display: block;//块级元素；；inline是行内元素\\n</code></pre> <p>inline-block是块元素，但是可以在一行。一行中的一块。</p> <p>块级元素/行内元三年也是一种实现<strong>行内元素排列的方式</strong></p> <blockquote> <p>浮动</p> </blockquote> <p>float： left；//right</p> <p>左右浮动，超脱出标准文档流，引起父级边框塌陷的问题。</p> <h3 id=\\\"父级边框塌陷问题\\\">父级边框塌陷问题</h3> <pre><code class=\\\"language-javascript\\\">//right//右侧不允许浮动\\n/*\\nleft\\n\\nnone\\n*/\\nclear: both;两侧不允许有浮动元素\\n</code></pre> <p>1、增加父级元素的高度</p> <p>2、在后面<strong>添加一个空的div</strong>，清除浮动</p> <p>3、在父级元素添加overflow</p> <p>4、在父类添加一个伪类(类似空div)（推荐使用）</p> <pre><code class=\\\"language-javascript\\\">#father:after{\\n    content: &#39;&#39;;\\n    display: block;\\n    clear: both;\\n\\n}\\n</code></pre> <pre><code class=\\\"language-javascript\\\">overflow: sroll;//超出大小，生成滚动条。\\n</code></pre> <p>防止margin重叠</p> <pre><code>&lt;body&gt;\\n    &lt;p&gt;Haha&lt;/p&gt;\\n    &lt;p&gt;Hehe&lt;/p&gt;\\n&lt;/body&gt;\\np{\\n        color: #f55;\\n        background: #fcc;\\n        width: 200px;\\n        line-height: 100px;\\n        text-align: center;\\n        margin: 100px;\\n    }\\n</code></pre> <p>两个p之间的距离为100px，发送了margin重叠。</p> <p>根据BFC布局规则第二条： Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。 1 2 折叠的结果：</p> <ol> <li><p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</p> </li> <li><p>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</p> </li> <li><p>两个外边距一正一负时，折叠结果是两者的相加的和。 我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。<strong>那么两个P便不属于同一个BFC，就不会发生margin重叠了。</strong></p> <body> <p>Haha</p> <div class=\\\"wrap\\\"> <p>Hehe</p> </div> </body> .wrap{ overflow: hidden; }</li> </ol> <h2 id=\\\"8、定位\\\">8、定位</h2> <h3 id=\\\"81、相对定位\\\">8.1、相对定位</h3> <p>相对于自己原来的位置，进行偏移。</p> <pre><code class=\\\"language-javascript\\\">position: relative;//上下左右\\ntop: 20px;//距离上边20px，即元素向下偏移20px\\nleft: 20px;\\nbottom: 20px;\\nright: 20px;\\n</code></pre> <h3 id=\\\"82、绝对定位\\\">8.2、绝对定位</h3> <pre><code class=\\\"language-javascript\\\">positon: absolte;//上下左右\\n//没有父级元素定位的情况下，相对浏览器定位。\\n//相对父级元素，父级要有position属性，可以是relative；\\n</code></pre> <h3 id=\\\"83、fixed固定定位\\\">8.3、fixed固定定位</h3> <pre><code class=\\\"language-javascript\\\">position: fixed;\\n//固定在一个位置，拉滚动条也不变\\n</code></pre> <h3 id=\\\"84、z-index\\\">8.4、z-index</h3> <p>层级，</p> <p>一层一层的在上面。</p> <pre><code class=\\\"language-javascript\\\">z-index: 99;//\\n\\nopacity: 0.6;//设置透明度\\n</code></pre> <h2 id=\\\"9、css预处理器\\\">9、CSS预处理器</h2> <p>SASS</p> <p>LESS：基于NodeJS。（必学）</p> <h2 id=\\\"10、垂直居中\\\">10、垂直居中</h2> <p>水平居中就是：margin：0 auto</p> <p>垂直居中：</p> <p>设置父元素height，weight为100%</p> <p>要居中的元素设置position： relative; top: 50%; /<em>偏移一般</em>/</p> <p>css3 ：transform属性</p> <h2 id=\\\"11、bcf和icf\\\">11、BCF和ICF</h2> <p>BFC名字很高大上，说白了就是一个规则，这个规则应用于块级元素（div,p）上。</p> <p>IFC这个规则应用于内联元素(span,em,i)上。</p> <h2 id=\\\"12、inline-block不对齐\\\">12、inline-block不对齐</h2> <p>vertical-align: top;</p> <p>添加这行代码</p> <h2 id=\\\"13、下拉框\\\">13、下拉框</h2> <ol> <li>//去掉ie下select下拉箭头按钮</li> <li>select::-ms-expand { </li> <li>​ display: none; </li> <li>}</li> </ol> <h2 id=\\\"ie滚动条隐藏\\\">IE滚动条隐藏</h2> <p>-ms-overflow-style: none;</p> <h2 id=\\\"15、垂直居中\\\">15、垂直居中</h2> <p><img src=\\\"https://pic1.zhimg.com/v2-551c052a8bb3e2da270adf6d55f62484_r.jpg\\\" alt=\\\"preview\\\"></p> <h2 id=\\\"16、负数外边距\\\">16、负数外边距</h2> <p>相反的，比如左负外边距，产生平移。如margin-left：-30px;元素向左平移30px；</p> <h2 id=\\\"17、rgba（）和opacity的透明区别\\\">17、rgba（）和opacity的透明区别</h2> <p>opacity和rgba的区别主要是透明目标的不同吧，</p> <p>opacity把整个元素都透明，元素的所有内容都透明。</p> <p>rgba是把元素的背景透明，而且他的子元素不会透明。</p> <p>opacity是css3的属性，可能会不兼容。</p> <pre><code class=\\\"language-css\\\">opacity: 0.4\\nfilter: alpha(opacity=60);  \\n</code></pre> <h2 id=\\\"18、letter-spacing-的妙用知道有哪些么？（inline-block）\\\">18、letter-spacing 的妙用知道有哪些么？（inline-block）</h2> <p>letter-spacing 属性增加或减少字符间的空白（字符间距）。 答案:可以用于消除 inline-block 元素间的换行符空格间隙问题 </p> <h2 id=\\\"19、-px-和-em-的区别。\\\">19、 px 和 em 的区别。</h2> <p>px 和 em 都是长度单位， 区别是， px 的值是固定的， 指定是多少就是多少， 计算比较容易。 em 得值不是固定的， 并且 em 会继承父级元素的字体大小。</p> <p>1em是当前div内的文体的字体的尺寸 </p> <h2 id=\\\"20、-css-中-link-和import-的区别是：\\\">20、 CSS 中 link 和@import 的区别是：</h2> <p>Link 属于 html 标签， 而@import 是 CSS 中提供的 在页面加载的时候， link 会同时被加载， 而@import 引用的 CSS 会在页面加载完成后才会加 载引用的 CSS @import 只有在 ie5 以上才可以被识别， 而 link 是 html 标签， 不存在浏览器兼容性问题 </p> <h2 id=\\\"21、bfc\\\">21、BFC</h2> <p>BFC（ 块级格式化上下文） ， 一个创建了新的 <strong>BFC 的盒子是独立布局的</strong>， 盒子内元素的布局 不会影响盒子外面的元素。 <strong>在同一个 BFC 中的两个相邻的盒子在垂直方向发生 margin 重叠</strong> 的问题 BFC 是指浏览器中创建了一个独立的渲染区域， 该区域内所有元素的布局不会影响到区域外 元素的布局， 这个渲染区域只对块级元素起作用 </p> <h3 id=\\\"0、触发bfc的方法\\\">0、触发bfc的方法</h3> <ul> <li>1、float的值不是none。<strong>（浮动）</strong></li> <li>2、position的值<strong>不是</strong>static或者relative。</li> <li>3、display的值是i<strong>nline-block、table-cell、flex、table-caption或者inline-flex</strong></li> <li>4、overflow的值<strong>不是visible</strong></li> <li>根元素，即HTML元素</li> </ul> <h3 id=\\\"1、margin重叠\\\">1、margin重叠</h3> <p>我们可以在<strong>div外面包裹一层容器，并触发该容器生成一个BFC</strong>。那么两个div便不属于同一个BFC，就不会发生margin重叠了。</p> <p>2、display: inline-block;让相邻的<strong>元素本身触发bfc</strong></p> <pre><code class=\\\"language-html\\\">&lt;body&gt;\\n    &lt;p&gt;看看我的 margin是多少&lt;/p&gt;\\n    &lt;div&gt;\\n        &lt;p&gt;看看我的 margin是多少&lt;/p&gt;\\n    &lt;/div&gt;\\n&lt;/body&gt;\\n</code></pre> <h3 id=\\\"2）清除浮动四种方法之一\\\">2）清除浮动(四种方法之一)</h3> <p>块级子元素浮动，如果块级父元素没有设置高度，其会有高度塌陷的情况发生。 原因：<strong>子元素浮动后，均开启了BFC，父元素不会被子元素撑开。</strong> 解决方法：由第六条原理得，计算BFC的高度时，浮动元素也参与计算。所<strong>以只要将父容器设置为bfc</strong> <strong>就可以把子元素包含进去</strong>：这个容器将包含浮动的子元素，它的高度将扩展到可以包含它的 子元素，在这个BFC，这些元素将会回到页面的常规文档流。</p> <p>因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理。</p> <h2 id=\\\"margin穿透\\\">margin穿透</h2> <p>子元素的margin-top穿透到父元素外面；</p> <p>解决：<strong>父元素，触发bfc</strong>，或者父元素用padding代替。</p> <h2 id=\\\"字体渲染\\\">字体渲染</h2> <p>1、黑白渲染</p> <p>2、灰度渲染</p> <p>3、亚像素渲染</p> <h2 id=\\\"22、p标签\\\">22、p标签</h2> <p>p标签是块级元素，占一行。</p> <h2 id=\\\"23、css定位\\\">23、CSS定位</h2> <p>static：默认位置，不受top，left等的影响。</p> <p>relactive：相对定位，根据原来的位置，偏移一定是位置。</p> <p>fixed：固定在浏览器某个位置，滚动页面也不动。</p> <p>absolute：绝对定位，对于父窗口/浏览器，绝对定位某个位置。</p> <h2 id=\\\"24、css计数器\\\">24、CSS计数器</h2> <pre><code class=\\\"language-css\\\">body {\\n  counter-reset: section;\\n}\\n\\nh2::before {\\n  counter-increment: section;\\n  content: &quot;Section &quot; counter(section) &quot;: &quot;;\\n}\\n//body定义一个section变量，h2让section自增，然后赋值给内容\\n</code></pre> <h2 id=\\\"25、ifc\\\">25、IFC</h2> <p>1.中文名：内联(行)格式化上下文 2.英文全称：Inline Formatting Contexts 3.形成条件: 3.1<strong>IFC由不包含块级盒的块容器盒建立(块容器盒中只有内联级盒子)。</strong></p> <p>inline-block也触发ifc。</p> <p>内联元素(inline-elemet)很容易理解(display:inline),它能生成inline-level boxes,但只有在IFC内的才称之为inline box</p> <h3 id=\\\"布局规则：\\\">布局规则：</h3> <p>在一个IFC里，盒是<strong>一个接一个从顶部水平放置</strong>。 摆放这些框，它们水平方向的margin,padding,border所占空间会被计算在内。 <strong>行盒的高度由行盒内最高的inline boxes决定</strong>。 垂直方向，可通<strong>过vertical-align设置文本基线，</strong>取值可以是具体像素值，也可以是middle等方向词。 当内部的容器盒子太多了一个line box装不下来，他们折行之后会变成两个或者多个line box， <strong>line box们垂直方向无间隔地堆叠</strong>，但不能重叠 浮动后IFC内部的浮动元素宽高参与IFC的line-box宽高计算并且从换行后的行开始排列</p> <h2 id=\\\"26、浮动元素居中\\\">26、浮动元素居中</h2> <ul> <li>在外层套一层div，对外层div居中</li> <li>relative定位，偏移50%，再调整自身宽度。</li> <li>外层盒子，向右偏移50%，内层盒子向左偏移50%。</li> <li>套一个外层盒子，用正常方法居中。</li> </ul> <h2 id=\\\"27、web标准和w3c标准\\\">27、web标准和w3c标准</h2> <p>web标准就是分为html，css，js，分别是结构层，表现层，行为层。使其具有模块化。</p> <p>W3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范。</p> <p>）。标签字母要小写</p> <p>2）。标签要闭合</p> <p>3）。标签不允许随意嵌套</p> <p>2.对于css和js来说</p> <p>1）。尽量使用外链css样式表和js脚本</p> <h2 id=\\\"28、文字超出显示省略号\\\">28、文字超出显示省略号</h2> <p>text-overflow: ellipsis; overflow: hidden;</p> <h2 id=\\\"两行省略\\\">两行省略</h2> <p><strong>text-overflow: -o-ellipsis-lastline;</strong></p> <p> <strong>overflow: hidden;</strong></p> <p> <strong>text-overflow: ellipsis;</strong></p> <p> <strong>display: -webkit-box;</strong></p> <p> <strong>-webkit-line-clamp: 2;</strong></p> <p> <strong>line-clamp: 2;</strong></p> <p> <strong>-webkit-box-orient: vertical;</strong></p> <h2 id=\\\"响应式图片\\\">响应式图片</h2> <p>img标签srcset</p> <p>max-width最大宽度自适应</p> <h2 id=\\\"瀑布流布局\\\">瀑布流布局</h2> <p>内容固定宽度，随瀑布宽度的大小而自适应。（跟百度图片搜索出来的展示一样）。</p> <p>js获取瀑布/屏幕宽度，除以内容的宽度，得到最大列数。</p> <p>js通过绝对定位来设置left和top。来实现瀑布。</p> <p>记录高度，最新的放在最小高度处</p> <p>监听resize。</p> <ol> <li>　　设定每一列图片的宽度和间距</li> <li>　　获取当前窗口的总宽度，从而根据图片宽度去旁段分成几列</li> <li>　　获取所有图片元素，定义一个空数组来保存高度</li> <li>　　遍历所有容器，开始判断　　当页面加载完成，或页面宽度发生变化时，调用函数。<ul> <li>如果当前处于第一行时： 直接设置图片位置【 即 top为间距的大小，left为（当前图片的宽度+间距） * 当前图片的值+间距大小 】，并保存当前元素高度。</li> <li>如果当前不处于第一行时：进行高度对比，通过遍历循环，拿到最小高度和相对应的索引，设置图片位置【 即 top为最小高度值+间距*2，left为 （当前图片的宽度+间距） * 索引 值+间距大小）】，并修改当前索引的高度为当前元素高度。</li> </ul> </li> <li>　　当页面加载完成，或页面宽度发生变化时，调用函数。</li> </ol> <p><img src=\\\"C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220105101525130.png\\\" alt=\\\"image-20220105101525130\\\"></p> <h2 id=\\\"百度图片瀑布流\\\">百度图片瀑布流</h2> <p>每一列用一个div，inline-block。然后往这一列加列表项就行。</p> <p>inline-block高度会自动撑开，屏幕宽度不够也会自动换行。</p> <p>基本不会用绝对定位瀑布流，都是等宽等高布局</p> <h2 id=\\\"rem适配\\\">rem适配</h2> <p>要设置限制最大和最小的跟字体,防止过大.</p> <h2 id=\\\"rem媒体查询flex\\\">rem+媒体查询+flex</h2> <p>js未加载时,先用媒体查询渲染页面,防止js加载后改动太大.</p> <h2 id=\\\"29、05px\\\">29、0.5px</h2> <p>1px是最小的，要实现0.5px的大小，可以使用transform，缩放0.5</p> <h2 id=\\\"媒体查询\\\">媒体查询</h2> <pre><code class=\\\"language-css\\\">@media only screen and (min-height: 760px) {\\n\\n  page {\\n\\n​    min-height: 100vh;\\n\\n​    background: url(https://image-1251917893.file.myqcloud.com/2021/a20210926KPL/teamarea-bg-2.jpg) no-repeat 0 0;\\n\\n​    background-size: 100% 100%;\\n\\n  }\\n\\n }\\n</code></pre> <h2 id=\\\"图片优化\\\">图片优化</h2> <p><img src=\\\"C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211104194240115.png\\\" alt=\\\"image-20211104194240115\\\"></p> <h2 id=\\\"svg学习\\\">SVG学习</h2> <h3 id=\\\"1、svg修改颜色、大小\\\">1、svg修改颜色、大小</h3> <h3 id=\\\"2、svg精灵图\\\">2、svg精灵图</h3> <p>把所有的SVG图标都在一个SVG源上，然后用id调用就可以了。</p> <p>参考代码</p> <pre><code>&lt;svg viewBox=&quot;0 0 100 100&quot;&gt; &lt;use xlink:href=&quot;#icon-1&quot;&gt;&lt;/use&gt; &lt;/svg&gt;\\n</code></pre> <p>use元素是通过xlink:href属性，寻找要使用的元素的。#icon-1对应的就是id为icon-1的元素。</p> <blockquote> <p>推荐使用icomoon.io 这个网站</p> </blockquote> <h2 id=\\\"line-height的值\\\">line-height的值</h2> <p>line-height: 1.5; 表示font-size的1.5倍，继承给子元素的是line-height1.5，具体高度与子元素的font-size相乘</p> <p>line-height： 150%；表示font-size的1.5倍，继承给子元素的是父元素的font-size的1.5倍的具体值</p> <h2 id=\\\"css3d\\\">css3D</h2> <p>设置transform-style：perspective-3d</p> <p>perspective：摄像机的距离</p> <p>perspective-origin：摄像机的位置</p> <p>UI开发 有一些选择器是用不了class的，只能用标签 .class1 ~ .class 可以用class，表示，在class1后面的class元素 first-child，其父元素的第一个儿子 first-type，其父元素的第一个该类型的标签元素。</p> \";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}