(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b631e"],{"1bb9":function(e,n){var t='<p>[toc]</p> <h1 id="vue框架学习笔记">Vue框架学习笔记</h1> <p>Soc关注点分离原则：</p> <p>MVC：模型，视图，控制器，（同步通信为主）</p> <p>MVVM：Model，View，v-model数据双向绑定。（异步通信为主）</p> <p>虚拟DOM：利用内存；</p> <p>vue框架：MVVM+虚拟DOM，集合两大框架的优点。</p> <p>渐进式：逐渐实现新特性。</p> <p>计算属性：Vue的特色，利用虚拟DOM</p> <h2 id="递归渲染">递归渲染</h2> <p>封装vue组件，传入一个数组，数组里面有数组，组件里面递归调用组件，</p> <h2 id="为什么要用mvvm模式？">为什么要用MVVM模式？</h2> <p>目的：分离视图和模型。</p> <p>低耦合：View和Model可以独立变化。ViewModel可以绑定到不同的的View上面。</p> <p>可复用：</p> <p>独立开发：</p> <p>可测试：</p> <p><img src="C:%5CUsers%5C%E5%88%98%E5%9B%BD%E6%9E%97%5CDesktop%5Cmvvm.png" alt="mvvm"></p> <p>ViewModel能观察数据的变化，并对视图对应内容进行更新。</p> <p>ViewModel能监听视图的变化，并通知数据发生改变。（双向绑定）</p> <p>Vue.js就是MVVM中的ViewModel。</p> <p>View：视图层，表示DOM。</p> <p>Model：模型层，表示js对象。数据。</p> <p>Vue完全解耦了View层和Model层，解耦是前后端分离的核心。</p> <h2 id="2、基本语法">2、基本语法</h2> <p>v-bind:绑定数据到属性。简写：</p> <p>v-model：双向绑定数据</p> <pre><code class="language-javascript">&lt;div v-if=&quot;&quot;&gt;yes&lt;/div&gt;\n\n&lt;div v-else&gt;no&lt;/div&gt;\n//v-if=真，就显示，否则不显示，显示else标签\n\n\n//可以写判断\n&lt;div v-if=&quot;abc===&#39;a&#39;&quot;&gt;A&lt;/div&gt;\ndata: {\n    abc: &#39;a&#39;\n}\n</code></pre> <p>v-for:循环</p> <pre><code class="language-javascript">&lt;li v-for=&quot;item in items&quot;&gt;{{item.message}}&lt;/li&gt;\n</code></pre> <p>事件绑定v-on，简写@</p> <pre><code class="language-javascript">&lt;button v-on:click=&quot;&quot;&gt;b&lt;/button&gt;\n</code></pre> <h2 id="computed计算属性">computed计算属性</h2> <p>计算出一个属性，并缓存起来。避免每次调用都需要计算。</p> <p>将计算结果缓存起来的属性，将行为转化成了静态的属性。</p> <p>计算出来的结果，保存在属性中。（缓存）</p> <p>methods和computed里的方法不能重名，重名只会调用methods里的方法。</p> <p><strong>调用方法时，每次都需要进行计算，计算就会有系统开销。如果这个结果是不经常变化的，那么吧这个计算结果缓存起来，就可以节约系统开销。计算属性就是把方法的结果作为属性缓存起来。</strong></p> <h2 id="watch监听属性">watch监听属性</h2> <p>监听某个属性，执行一些操作。</p> <h2 id="slot插槽">slot插槽</h2> <p>做组件时候，留一个插槽，可以在此插入自定义标签，方便复用。</p> <pre><code class="language-javascript">&lt;div&gt;\n    &lt;slot name=&quot;&quot;&gt;&lt;/slot&gt;\n    &lt;ul&gt;\n        &lt;slot name=&quot;&quot;&gt;&lt;/slot&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;  \n\n\n&lt;xxx slot=&quot;&quot;&gt;&lt;/xxx&gt;\n</code></pre> <h2 id="props-">props: [&#39;&#39;]</h2> <p>组件，自定义属性。用来接收，父组件给自己绑定、传递的数据。</p> <p><my :myprop="message">绑定属性</my></p> <h2 id="thisemitfunnamedata">this.$emit.(&#39;funName&#39;,data)</h2> <p>自定义组件自身的方法，用来绑定组件外的方法。</p> <p>组件里面有个button标签，绑定点击事件=remove。remove是组件自身的methods。</p> <p>在remove里面，可以this.$emit(&quot;remove&quot;,data)。这样就自定义了组件的方法。例如该组件是</p> <p>&lt;my @remove=&quot;&quot;&gt;这样就可以绑定外面的方法。@remove中的remove是emit定义的。</p> <p>子组件:</p> <p> <span>{{childValue}}</span></p> <p> &lt;input type=&quot;button&quot; value=&quot;点击触发&quot; @click=&quot;childClick&quot;&gt;</p> <p> export default { data () { return { childValue: &#39;我是子组件的数据&#39;</p> <p> }</p> <p> },</p> <p> methods: { childClick () { </p> <pre><code>this.$emit(&#39;childByValue&#39;, this.childValue)\n</code></pre> <p> }</p> <p> }</p> <p> }</p> <p>父组件</p> <p><child v-on:childByValue="childByValue"></child></p> <p>methods: { childByValue: function (childValue) { // childValue就是子组件传过来的值</p> <pre><code>this.name = childValue\n</code></pre> <p> }</p> <p> }</p> <p>}</p> <h3 id="获取子组件的值">获取子组件的值</h3> <p>3.父组件调用子组件的方法通过ref</p> <p>4、可以通过$parent和$children获取父子组件的参数</p> <p><img src="https://img-blog.csdnimg.cn/20190223232512122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW53ZW54aXU=,size_16,color_FFFFFF,t_70" alt="img"></p> <h3 id="兄弟之间的传值vuex">兄弟之间的传值Vuex</h3> <p>在state里定义数据和属性</p> <p>在 mutations里定义函数fn，在页面通过this.$store.commit(&#39;fn&#39;,params)来触发函数</p> <pre><code class="language-js">const store = new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    }\n  }\n})\n</code></pre> <p>现在，你可以<strong>通过 <code>store.state</code> 来获取状态对象，以及通过 <code>store.commit</code> 方法触发状态变更：</strong></p> <pre><code class="language-js">store.commit(&#39;increment&#39;)\n\nconsole.log(store.state.count) // -&gt; 1\n</code></pre> <h2 id="绑定数据的三种方式">绑定数据的三种方式</h2> <ul> <li>{{message}}//文本的形式</li> </ul> <p>绑定data.message，当message发生变化时，视图也发生变化</p> <ul> <li>v-bind</li> <li>v-model//一般用于表单元素中，输入发生变化同步。v-model基本上只会用在input, textarea, select这些表单元素上</li> </ul> <pre><code class="language-javascript">&lt;input v-model=&quot;something&quot;&gt;`其实是`&lt;input v-bind:value=&quot;something&quot; v-on:input=&quot;something = $event.target.value&quot;&gt;\n</code></pre> <h2 id="前后端请求的方式">前后端请求的方式</h2> <p>@RequestParam使用 1、使用 @RequestParam 注解将请求参数绑定至方法参数</p> <p>前端请求地址：</p> <pre><code class="language-javascript">http://localhost:9191/getUser?userName=小明\n</code></pre> <p>后端：</p> <pre><code class="language-java">@PostMapping(&quot;getUser&quot;) \npublic String testMethod(@RequestParam String userName)\n</code></pre> <p> 2、当前端传入参数和后端接收名字不一致的话，需要在@RequestParam后面指定参数名字，即：</p> <pre><code class="language-javascript">http://localhost:9191/getUser?userName=小明\n\n@PostMapping(&quot;getUser&quot;) \npublic String testMethod(@RequestParam(&quot;userName&quot;) String name)\n</code></pre> <p> 3、当方法参数的类型为基本类型，@RequestParam可省略不写。</p> <p>@RequestBody使用 1、GET方式无请求体，所以使用@RequestBody接收数据时，前端不能使用GET方式提交数据，而是用POST方式进行提交。</p> <p> 2、@requestBody可以将请求体中的JSON字符串绑定到相应的bean上，也可以将其分别绑定到对应的字符串上。</p> <p> 3、@RequestBody与@RequestParam() 可以同时使用，但**@RequestBody只能有一个，而@RequestParam()可以有多个**，@RequestBody 接收的是请求体里面的数据；而@RequestParam接收的是key-value里面的参数。</p> <pre><code class="language-javascript">$.ajax({ url:&quot;/User/Login&quot;, type:&quot;POST&quot;, async: false, contentType:&quot;application/json;charset=UTF-8&quot;, dataType:&#39;json&#39;, data:JSON.stringify({&quot;user_name&quot;:user_name,&quot;user_password&quot;:user_password}), //将JSON对象转为字符串\n\nsuccess:function(data){undefined\n\n                    \n</code></pre> <p>转json字符串</p> <p>获取到后端返回的json字符串后，要转换成对象进行赋值使用。</p> <pre><code class="language-javascript">// get传参数\naxios.get(&#39;/user?id=123&#39;)\n  .then(response=&gt; {\n    console.log(response)\n  })\n  .catch(error=&gt; {\n    console.log(error)\n  });\n \n// get,和上面效果一样\naxios.get(&#39;/getuser&#39;, {\n    params: {\n      ID: 123\n    }\n}) .then(response=&gt; { \n    console.log(response) \n}) .catch(error=&gt; { \n    console.log(error)\n});\n \n// post传参数\naxios.post(&#39;/getuser&#39;, {\n    params: {\n      name: &#39;小明&#39;,\n      age:18\n    }\n}) .then(response=&gt; { \n    console.log(response) \n}) .catch(error=&gt; { \n    console.log(error)\n});\n\n请求体方式\n\n（1）application/x-www-form-urlencoded（表单方式）\n\naxios({\n\n  url: &#39;/users&#39;,\n\n  method: &#39;post&#39;,\n\n  data: qs.stringify({\n\n    id: &#39;11111&#39;,\n\n    name: &#39;22222&#39;\n\n  })\n\n})\n\n \n\n请求地址：/users\n\n请求体：id=11111&amp;name=22222\n\n \n\n（2）application/json（JSON方式）\n\naxios({\n\n  url: &#39;/users&#39;,\n\n  method: &#39;post&#39;,\n\n  data: {\n\n    id: &#39;11111&#39;,\n\n    name: &#39;22222&#39;\n\n  }\n\n})\n</code></pre> <h2 id="代码混淆">代码混淆</h2> <pre><code class="language-js">UglifyJs\n/^glifai/\n丑陋的，混淆，\n</code></pre> <h2 id="路由传参">路由传参</h2> <pre><code class="language-js">const User = {\n  props: [&#39;id&#39;],\n  template: &#39;&lt;div&gt;User {{ id }}&lt;/div&gt;&#39;\n}\nconst router = new VueRouter({\n  routes: [\n    { path: &#39;/user/:id&#39;, component: User, props: true },\n\n    // 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：\n    {\n      path: &#39;/user/:id&#39;,\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n</code></pre> <h2 id="路由钩子">路由钩子</h2> <pre><code class="language-javascript">beforeRouteEnter:(to,from,next)=&gt;{\n    console.log(&quot;进入路由之前&quot;)\n}\nbeforeRouteLeave:(to,from,next)=&gt;{\n    console.log(&quot;进入路由之后&quot;)\n}\n</code></pre> <h2 id="vue双向绑定原理及实现">Vue双向绑定原理及实现</h2> <p>vue是通过Object.defineProperty()来实现<strong>数据劫持</strong>的。</p> <p>观察者模式。</p> <p>1、proxy</p> <p>2、object。get，set</p> <p>3、object.defineProperty</p> <p>4、object.definePropertis</p> <p>通过Object.defineProperty( )设置了对象Book的name属性，对其get和set进行重写操作，</p> <p>顾名思义，get就是在读取name属性这个值触发的函数，set就是在设置name属性这个值触发的函数，所以当执行 Book.name = &#39;vue权威指南&#39; 这个语句时，控制台会打印出 &quot;你取了一个书名叫做vue权威指南&quot;，紧接着，当读取这个属性时，就会输出 &quot;《vue权威指南》&quot;，因为我们在get函数里面对该值做了加工了。如果这个时候我们执行下下面的语句，控制台会输出什么？</p> <pre><code class="language-js">\nvar Book = {}\nvar name = &#39;&#39;;\nObject.defineProperty(Book, &#39;name&#39;, {\n  set: function (value) {\n    name = value;\n    console.log(&#39;你取了一个书名叫做&#39; + value);\n  },\n  get: function () {\n    return &#39;《&#39; + name + &#39;》&#39;\n  }\n})\n \nBook.name = &#39;vue权威指南&#39;;  // 你取了一个书名叫做vue权威指南\nconsole.log(Book.name);  // 《vue权威指南》\n</code></pre> <p><img src="https://img2018.cnblogs.com/blog/1210947/201906/1210947-20190624184238527-1356189876.png" alt="img"></p> <p><img src="https://upload-images.jianshu.io/upload_images/18491406-0f1347e1ca0cbfaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/730/format/webp" alt="img"></p> <p>个人理解：在new Vue的时候，在Observer中<strong>通过Object.defineProperty()达到数据劫持</strong>，<strong>代理所有数据的getter和setter属性</strong>，在每次触发setter的时候，<strong>都会通过Dep来通知Watcher</strong>，Watcher作为Observer数据监听器与Compile模板解析器之间的桥梁，当Observer监听到数据发生改变的时候，通过Updater来通知Compile更新视图</p> <p>而Compile通过Watcher订阅对应数据，绑定更新函数，通过Dep来添加订阅者，达到双向绑定</p> <h1 id="前端基础">前端基础</h1> <h2 id="1、说一下http和https？">1、说一下http和https？</h2> <p>http是基于tcp协议的一个超文本传输协议，用于web服务器和本地浏览器的数据传送。</p> <p>https是http的安全版，在传输层进行ssl加密。</p> <p>http端口为80，https端口为443.</p> <p>https协议的工作原理</p> <p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p> <p>客户使用https url访问服务器，则要求web 服务器建立ssl链接。</p> <p>web服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。</p> <p>客户端和web服务器端开始协商SSL链接的安全等级，也就是加密等级。</p> <p>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</p> <p>web服务器通过自己的私钥解密出会话密钥。</p> <p>web服务器通过会话密钥加密与客户端之间的通信。</p> <p>https要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p> <p>缺点：</p> <p>https握手阶段比较费时，缓存不如http高效。</p> <p>ssl证书要钱的</p> <h2 id="2、tcp三次握手？">2、TCP三次握手？</h2> <p>客户端发送SYN请求，</p> <p>服务端收到请求，发送ACK表示同意，并发送SYN请求</p> <p>客户端发送ACK同意请求。</p> <h2 id="3、tcp和udp的区别">3、TCP和UDP的区别</h2> <p>TCP是面先连接的，udp发送数据之前不需要先建立链接。</p> <p>TCP是可靠的，无差错，不丢失，不重复，保证顺序。</p> <p>TCP是面向字节流的，UDP面向报文。</p> <p>TCP只能是1对1，UDP可以一对多。</p> <p>UDP用于传输少量报文。结构简单，开销小。一对多。</p> <p>TCP报文首部20字节，UDP8字节。</p> <h3 id="为什么不是两次？">为什么不是两次？</h3> <p>主要是为了<strong>防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</strong></p> <p>假如是两次握手，客户端发送了请求，并且没有丢失。只是网络有点慢。然后客户端重新发送了请求，建立了连接。过了一段时间之后，刚开始发送的那个请求终于到达了服务端，然后服务端就回应这个请求，如果是两个的话，那么就直接建立了连接，造成资源的浪费。</p> <p>如果两次，<strong>服务器端不能确认自己的消息客户端能收到</strong>，服务器端发送消息可能客户端都收不到。</p> <p>客户端没有发送ack，服务端不知道客户端有没有收到。</p> <h3 id="为什么不是四次：">为什么不是四次：</h3> <p>三次结束后已经可以确定客户端和服务器可以相互发送消息，如果四次会造成浪费</p> <p>tcp发出去的请求要得到回应，不然会超时重传。</p> <h3 id="为什么是四次挥手？">为什么是四次挥手？</h3> <p>第一次挥手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了； 第二次挥手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求； 第三次挥手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态； 第四次挥手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，<strong>主机1等待2MSL后依然没有收到回复</strong>，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p> <p><em>*<em>*MSL, the maximum segment lifetime （*</em>*<em>最长报文段寿命*</em>*<em>）*</em>*</em> </p> <p><strong>关闭请求和确认回应不能合并，因为服务端可能还有数据要传输。</strong></p> <h3 id="为什么要等2msl？">为什么要等2msl？</h3> <p>在TIME_WAIT （也被叫做２MSL等待状态）状态下，客户端向服务器发出ACK以后需要等待2个MSL的时间。<strong>假如ACK在传输中丢失，超时后服务端会重新发送FIN,</strong> 客户端收到以后会重新发ACK。<strong>假如在2MSL时间中客户端都没有收到服务端重发的FIN,那么客户端认为服务端已经收到了客户端发送的ACK，</strong> 此时客户端才可以放心的断开连接。</p> <p><em><strong>*为什么等待时间是2MSL?*</strong></em> <strong>客户端发送的ACK segment存活期1MSL,服务端重发FIN segment存活期1MSL，加一起2MSL。2MSL是一个临界值，利用尽量大的等待时间来确保TCP连接断开的可靠性。</strong> </p> <h2 id="7、状态码">7、状态码</h2> <ul> <li>200 - 请求成功</li> <li>301 - 资源（网页等）被永久转移到其它URL</li> <li>404 - 请求的资源（网页等）不存在</li> <li>500 - 内部服务器错误</li> </ul> <table> <thead> <tr> <th>301</th> <th>Moved Permanently</th> <th>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</th> </tr> </thead> <tbody><tr> <td>302</td> <td>Found</td> <td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td> </tr> </tbody></table> <table> <thead> <tr> <th>304</th> <th>Not Modified</th> <th>未修改。所请求的资源未修改，</th> </tr> </thead> <tbody><tr> <td></td> <td></td> <td></td> </tr> </tbody></table> <table> <thead> <tr> <th>400</th> <th>Bad Request</th> <th>客户端请求的语法错误，服务器无法理解</th> </tr> </thead> <tbody><tr> <td>401</td> <td>Unauthorized</td> <td>请求要求用户的身份认证</td> </tr> </tbody></table> <table> <thead> <tr> <th>403</th> <th>Forbidden</th> <th>服务器理解请求客户端的请求，但是拒绝执行此请求</th> </tr> </thead> <tbody><tr> <td></td> <td></td> <td></td> </tr> </tbody></table> <table> <thead> <tr> <th>503</th> <th>Service Unavailable</th> <th>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</th> </tr> </thead> <tbody><tr> <td></td> <td></td> <td></td> </tr> </tbody></table> <table> <thead> <tr> <th>500</th> <th>Internal Server Error</th> <th>服务器内部错误，无法完成请求</th> </tr> </thead> <tbody><tr> <td></td> <td></td> <td></td> </tr> </tbody></table> <h2 id="请求的类型">请求的类型</h2> <p>GET：请求从服务器获取特定资源。 2️⃣POST：在服务器上创建一个新的资源。 3️⃣PUT：更新服务器上的资源(客户端提供更新后的整个资源)。 4️⃣DELETE：从服务器删除特定的资源。 5️⃣PATCH：更新服务器上的资源(客户端提供更改的属性，可以看做作是部分更新)，使用的比较少。</p> <h2 id="8、cookie、sessionstorage、localstorage的区别">8、Cookie、sessionStorage、localStorage的区别</h2> <p>都是用于在浏览器端保存数据的。</p> <p>cookie存储sessionID用来唯一标识用户</p> <p>cookie常用于身份验证，在浏览器和服务器来回传递。</p> <p>cookie只有4K左右的大小。</p> <p>sessionStrorage存储临时数据，浏览器窗口关闭时失效。</p> <p>localStorage存储永久数据。5M左右大小。</p> <p>如果不设置时间，浏览器关闭，cookie就会消失</p> <h2 id="10、doctype的作用？">10、Doctype的作用？</h2> <p>声明在文档最前面，告诉浏览器以何种方式渲染页面。</p> <h2 id="13、get和post的区别">13、get和post的区别</h2> <p>get参数通过url传参，post放在request body中。</p> <p>url传参有长度限制。</p> <p>get不安全，参数直接暴露在url中，不能用来传递敏感信息。</p> <p>get产生一个TCP数据包，post产生两个。</p> <p>请求头长度不一样</p> <h2 id="14、说一下浏览器缓存">14、说一下浏览器缓存</h2> <h3 id="参考回答：">参考回答：</h3> <p>缓存分为两种：强缓存和协商缓存，根据响应的header内容来决定。</p> <p>强缓存相关字段有expires，cache-control。如果cache-control与expires同时存在的话，cache-control的优先级高于expires。</p> <p>浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。</p> <p>每次用户正常打开这个页面，浏览器会判断缓存是否过期，没有过期就从缓存中读取数据；</p> <p>协商缓存相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match</p> <h2 id="15、在地址栏里输入一个url到这个页面呈现出来，中间会发生什么？">15、在地址栏里输入一个URL,到这个页面呈现出来，中间会发生什么？</h2> <p>输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：</p> <p>浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，</p> <p>如果没有则查询DNS服务器，</p> <p>得到服务器的ip地址后，浏览器根据这个ip以及相应的端口号，构造一个http请求，</p> <p>这个请求报文会包括这次请求的信息，主要是请求方法，请求说明和请求附带的数据，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器</p> <p>，服务器解析这个请求来作出响应，返回相应的html给浏览器，</p> <p>因为html是一个树形结构，浏览器根据这个html来构建DOM树，</p> <p>在dom树的构建过程中如果遇到JS脚本和外部JS连接，则会停止构建DOM树来执行和下载相应的代码，这会造成阻塞，这就是为什么推荐JS代码应该放在html代码的后面，</p> <p>之后根据外部样式，内部样式，内联样式构建一个CSS对象模型树CSSOM树，构建完成后和DOM树合并为渲染树，这里主要做的是排除非视觉节点，比如script，meta标签和排除display为none的节点，之后进行布局，布局主要是确定各个元素的位置和尺寸，之后是渲染页面，因为html文件中会含有图片，视频，音频等资源，在解析DOM的过程中，遇到这些都会进行并行下载，浏览器对每个域的并行下载数量有一定的限制，一般是4-6个，当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过Cache-Control、Last-Modify、Expires等首部字段控制。 Cache-Control和Expires的区别在于Cache-Control使用相对时间，Expires使用的是基于服务器 端的绝对时间，因为存在时差问题，一般采用Cache-Control，在请求这些有设置了缓存的数据时，会先 查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，如果上一次 响应设置了ETag值会在这次请求的时候作为If-None-Match的值交给服务器校验，如果一致，继续校验 Last-Modified，没有设置ETag则直接验证Last-Modified，再决定是否返回304</p> <h2 id="http20-的特性">HTTP2.0 的特性</h2> <h3 id="参考回答：-1">参考回答：</h3> <p>http2.0的特性如下：</p> <p>1、内容安全，应为http2.0是基于https的，天然具有安全特性，通过http2.0的特性可以避免单纯使用https的性能下降</p> <p>2、二进制格式，http1.X的解析是基于文本的，http2.0将所有的传输信息分割为更小的消息和帧，并对他们采用二进制格式编码，基于二进制可以让协议有更多的扩展性，比如引入了帧来传输数据和指令</p> <p>3、多路复用，这个功能相当于是长连接的增强，每个request请求可以随机的混杂在一起，接收方可以根据request的id将request再归属到各自不同的服务端请求里面，另外多路复用中也支持了流的优先级，允许客户端告诉服务器那些内容是更优先级的资源，可以优先传输，</p> <h2 id="浏览器在生成页面的时候，会生成那两颗树？">浏览器在生成页面的时候，会生成那两颗树？</h2> <h3 id="参考回答：-2">参考回答：</h3> <p>构造两棵树，DOM树和CSSOM规则树</p> <p>当浏览器接收到服务器相应来的HTML文档后，会遍历文档节点，生成DOM树，</p> <p>CSSOM规则树由浏览器解析CSS文件生成，</p> <h2 id="18、w3c标准包括">18、W3C标准包括</h2> <p>结构化标准语言html，xml</p> <p>表现标准语言css</p> <p>行为标准语言DOM，ES</p> <h2 id="19、网页结构">19、网页结构</h2> <p>header、footer，section，article，aside，nav</p> <h2 id="20、etag">20、ETag</h2> <p>ETag：它是文档版本的标识符。通常是内容的 MD5 值，不过它也可以包含其他内容，代表的是文档的版本/日期，如： 1.0 或者 2017-10-30。这里注意一点是，它必须用双引号括起来，如：ETag: “d3b0756geyg42sd3edec49eaa6238ad5ff00”。</p> <p>etag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.c20abbde.js，加个唯一hash，也是为了解决缓存问题。</p> <p>etag和 last-modified，在下次请求时在 request header 就把这两个带上，服务端把你带过来的标识进行对比，然后判断资源是否更改了</p> <h2 id="21、cnd">21、CND</h2> <p><img src="http://shp.qpic.cn/txdiscuz_pic/0/_bbs_qcloud_com_forum_201501_26_193741fjrd8g08gvhrrygr.png/0" alt="q333.png"></p> <h2 id="22、tcp">22、TCP</h2> <p><img src="https://t10.baidu.com/it/u=2590032753,2466318043&fm=173&app=49&f=JPEG?w=640&h=716&s=E7F239D247AFCCEA106594580300D072" alt="img"></p> <h2 id="23、废弃标签及替代方法">23、废弃标签及替代方法</h2> <p>u，underline的首字母，但是单单看一个字母u，没有语义，所以被废弃了。</p> <p>等等。</p> <p>大部分是语义问题。</p> <p>替代方法。通过css改变样式</p> <p><strong>=<b> :定义重要性强调的文字 adfaf <strong>bbb</strong> <strong>strong</strong> <em>em</em> <em>iii</em></b></strong></p> <p><em>=<i> ：定义强调的文字</i></em></p> <p><ins>=<u>：定义插入的文字</u></ins></p> <p><del>=<s>：定义删除的文字</s></del></p> <h2 id="24、历史">24、历史</h2> <p>1995年javascript，</p> <p>2006年jquery。</p> <p>2009年angularjs</p> <p>2013年react开源，vue框架诞生</p> <h2 id="25、js-阻塞-dom-解析（dom解析，浏览器加载）">25、<code>JS</code> 阻塞 <code>DOM</code> 解析（DOM解析，浏览器加载）</h2> <p>DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。 </p> <ul> <li><code>CSS</code> 不会阻塞 <code>DOM</code> 的解析，但会阻塞 <code>DOM</code> 渲染。</li> <li><code>JS</code> 阻塞 <code>DOM</code> 解析，但浏览器会&quot;偷看&quot;<code>DOM</code>，预先下载相关资源。</li> <li>浏览器遇到 <code>&lt;script&gt;</code>且没有<code>defer</code>或<code>async</code>属性的 标签时，<strong>会触发页面渲染</strong>，因而如果前面<code>CSS</code>资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。css阻塞js的执行</li> </ul> <p><strong>script的内容被解析完后，会先把script前面的内容渲染出来，再去解析script后面的内容</strong>，css树解析完了，DOM树也经历了重绘重排（遇到script触发页面渲染）</p> <p>没有 <code>defer</code> 或 <code>async</code>，<strong>浏览器会立即加载并执行指定的脚本</strong>，“立即”指的是在渲染该 <code>script</code> 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p> <p>有 <code>async</code>，加载和渲染后续文档元素的过程将和 <code>script.js</code> 的加载与执行并行进行（异步）。</p> <p>有 <code>defer</code>，加载后续文档元素的过程将和 <code>script.js</code> 的加载并行进行（异步），但是 <strong><code>script.js</code> 的执行要在所有元素解析完成之后</strong>，<code>DOMContentLoaded</code> 事件触发之前完成。</p> <p><img src="C:%5CUsers%5C%E5%88%98%E5%9B%BD%E6%9E%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210323102609958.png" alt="image-20210323102609958"></p> <h2 id="26、const定义的对象的属性可以改变">26、const定义的对象的属性可以改变</h2> <pre><code class="language-javascript">const P = {a: &quot;12&quot;,b: &quot;122&quot;}\nP.a = &quot;asdd&quot;\n//可以改变。\nconst保持p的指针不发生改变，但是指向的内容可以改变。\n</code></pre> <h2 id="var是函数级作用域，let是块级作用域">var是函数级作用域，let是块级作用域</h2> <h2 id="27、http强缓存和协商缓存">27、http强缓存和协商缓存</h2> <p>expires强缓存，设置一个到期时间，未到期之前都不用重新获取。</p> <p>强缓存相关字段有expires，cache-control。如果cache-control与expires同时存在的话，cache-control的优先级高于expires。</p> <p>last-modified，协商缓存，304，请求服务器是否修改。</p> <p>在使用本地缓存前，先与服务器协商，核对缓存文件是否为最新。请求头携带If-None-Match或If-Modified-Since，也可都携带。</p> <h2 id="为什么有了last-modified还要用etag？">为什么有了Last-Modified还要用etag？</h2> <p>\\1. 防止Last-Modified变了，但文件内容没变的情况下，浏览器需要重新请求服务器</p> <p>\\2. 防止文件在1s内发生变化，而Last-Modified不变</p> <p><strong>cache-control &gt; expires &gt; etag &gt; last-Modified</strong></p> <h2 id="es6新特性">ES6新特性</h2> <p><img src="https://pic4.zhimg.com/v2-b7be6584d9abff093cb5b177d675832f_r.jpg" alt="preview"></p> <h2 id="29、promise">29、Promise</h2> <p>promise是ES6才出来的，主要是放在函数里面使用吧。主要是利用它的回调函数。then。</p> <p>promise的构造函数有两个参数，一个是resolve，一个是reject。异步回调用then。</p> <h2 id="30、快速排序算法">30、快速排序算法</h2> <ul> <li>选第一个为中间数temp。</li> <li>左边i，向右遍历。右遍j，先左遍历。（第一个i就是选中的temp）</li> <li>arr[j]与temp比较。比temp小，就放入arr[i]里面。比temp大就不动。</li> <li></li> </ul> <pre><code class="language-c++">// Quick_Sort.cpp : Defines the entry point for the application.\n// 快速排序算法\n\n#include &quot;stdafx.h&quot;\n#include&lt;iostream&gt;\nusing namespace std;\n\n//快速排序算法(从小到大)\n//arr:需要排序的数组，begin:需要排序的区间左边界，end:需要排序的区间的右边界\nvoid quickSort(int *arr,int begin,int end)\n{\n    //如果区间不只一个数\n    if(begin &lt; end)\n    {\n        int temp = arr[begin]; //将区间的第一个数作为基准数\n        int i = begin; //从左到右进行查找时的“指针”，指示当前左位置\n        int j = end; //从右到左进行查找时的“指针”，指示当前右位置\n        //不重复遍历\n        while(i &lt; j)\n        {\n            //当右边的数大于基准数时，略过，继续向左查找\n            //不满足条件时跳出循环，此时的j对应的元素是小于基准元素的\n            while(i&lt;j &amp;&amp; arr[j] &gt; temp)\n                j--;\n            //将右边小于等于基准元素的数填入右边相应位置\n            arr[i] = arr[j];\n            //当左边的数小于等于基准数时，略过，继续向右查找\n            //(重复的基准元素集合到左区间)\n            //不满足条件时跳出循环，此时的i对应的元素是大于等于基准元素的\n            while(i&lt;j &amp;&amp; arr[i] &lt;= temp)\n                i++;\n            //将左边大于基准元素的数填入左边相应位置\n            arr[j] = arr[i];\n        }\n        //将基准元素填入相应位置\n        arr[i] = temp;\n        //此时的i即为基准元素的位置\n        //对基准元素的左边子区间进行相似的快速排序\n        quickSort(arr,begin,i-1);\n        //对基准元素的右边子区间进行相似的快速排序\n        quickSort(arr,i+1,end);\n    }\n    //如果区间只有一个数，则返回\n    else\n        return;\n}\nint main()\n{\n    int num[12] = {23,45,17,11,13,89,72,26,3,17,11,13};\n    int n = 12;\n    quickSort(num,0,n-1);\n    cout &lt;&lt; &quot;排序后的数组为：&quot; &lt;&lt; endl;\n    for(int i=0;i&lt;n;i++)\n        cout &lt;&lt; num[i] &lt;&lt; &#39; &#39;;\n    cout &lt;&lt; endl;\n    system(&quot;pause&quot;);\n    return 0;\n}\n\n</code></pre> <h2 id="31、节流和抖动">31、节流和抖动</h2> <p>流指的都是某个函数在一定时间间隔内只执行<strong>第一次</strong>回调。举个常见的节流案例：我们把某个表单的提交按钮——button 设成每三秒内最多执行一次 click 响应；当你首次点击后，函数会无视之后三秒的所有响应；三秒结束后，button 又恢复正常 click 响应功能，以此类推。</p> <p>防抖动就是利用类似于节流的手段——无视短时间内重复回调，避免浏览器发生抖动现象的技术。限流和防抖动在设计思想上一脉相承，只是限流是在某段时间内只执行<strong>首次</strong>回调，而防抖动通常是只执行<strong>末次</strong>回调。</p> <pre><code class="language-text">防抖——触发高频事件后 n 秒后函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间；\nfunction debounce(fn) {\n     let timeout = null; // 创建一个标记用来存放定时器的返回值\n     return function () {\n       clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n       timeout = setTimeout(() =&gt; { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n         fn.apply(this, arguments);\n       }, 500);\n     };\n   }\n   function sayHi() {\n     console.log(&#39;防抖成功&#39;);\n   }\n   var inp = document.getElementById(&#39;inp&#39;);\n   inp.addEventListener(&#39;input&#39;, debounce(sayHi)); // 防抖\n\n节流——高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率。\nfunction throttle(fn) {\n     let canRun = true; // 通过闭包保存一个标记\n     return function () {\n       if (!canRun) return; // 在函数开头判断标记是否为 true，不为 true 则 return\n       canRun = false; // 立即设置为 false\n       setTimeout(() =&gt; { // 将外部传入的函数的执行放在 setTimeout 中\n         fn.apply(this, arguments);\n         // 最后在 setTimeout 执行完毕后再把标记设置为 true(关键) 表示可以执行下一次循环了。当定时器没有执行的时候标记永远是 false，在开头被 return 掉\n         canRun = true;\n       }, 500);\n     };\n   }\n   function sayHi(e) {\n     console.log(e.target.innerWidth, e.target.innerHeight);\n   }\n   window.addEventListener(&#39;resize&#39;, throttle(sayHi));\n</code></pre> <h2 id="32、深克隆和浅克隆">32、深克隆和浅克隆</h2> <p>对于基本数据类型而言，把a的值赋值给b后，a的修改，不会影响到b。</p> <p>对于引用数据类型而言，把arr1赋值给arr2后，arr1的修改，会影响到arr2对应的值</p> <p>基本数据类型是直接存储在<strong>栈内存</strong>中的，而引用数据类型，则仅仅是把地址存储在<strong>栈内存</strong>中,真正的数据是存储在<strong>堆内存</strong>中的，赋值操作时，仅仅把地址进行了赋值。</p> <p>浅克隆直接赋值。</p> <p>深克隆方法：</p> <p>1、递归、循环，把原对象的每一个属性赋值给新对象</p> <p>2、原对象转JSON字符串，字符串解析赋值给新对象。</p> <h2 id="33、js垃圾回收机制">33、js垃圾回收机制</h2> <p><strong>javascript垃圾回收机制原理：</strong></p> <p>解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。</p> <p>现在各大浏览器通常采用的垃圾回收机制有两种方法：<strong>标记清除，引用计数。</strong></p> <ul> <li>标记清除</li> </ul> <p>除了闭包和环境内的变量不被标记，其他变量被标记。带标记的被视为准备删除的目标，下一周期就回收它。</p> <pre><code class="language-javascript">function test(){\n    var a = 10;    //被标记&quot;进入环境&quot;,,声明的时候。调用函数的时候，函数运行的时候\n    var b = &quot;hello&quot;;    //被标记&quot;进入环境&quot;\n}\ntest();    //执行完毕后之后，a和b又被标记&quot;离开环境&quot;，被回收\n</code></pre> <ul> <li>引用计数</li> </ul> <p>如果一个值的引用次数为0，则被回收。</p> <pre><code class="language-javascript">let a = [1,2]//[1,2]被a引用\na = null//a 不引用了，【1，2】被回收\n</code></pre> <h2 id="数据库并发操作产生冲突怎么办">数据库并发操作产生冲突怎么办</h2> <p>悲观锁和乐观锁，</p> <p>悲观锁，本次操作中，不允许其他操作进行，影响性能</p> <p>乐观锁，每次操作版本号加一，版本号对比</p> <h2 id="34、堆和栈">34、堆和栈</h2> <p>栈存局部变量，堆存对象。</p> <p>全局变量在静态存储区。</p> <p>地址在栈中，数据在堆中。</p> <p><strong>静态存储区：</strong> 一定会存在的而且会永恒存在、不会消失，这样的数据包括常量、常变量（const 变量）、静态变量、全局变量等。 静态 、常量、全局变量就是存放在静态存储区，他们在程序编译完成后就已经分配好了，生命周期持续至程序结束。</p> <p>栈:在Windows下,栈是向低地址扩展的数据结构,是一块连续的内存区域.即栈顶的地址和栈的最大容量是系统预先规好的。栈的大小是1M,如果申请空间超过栈的剩余空间时,将提示overflow.因此,能从栈获得的空间较小。</p> <p>​ 堆:堆是向高地址扩展的数据结构,是不连续的内存区域.这是因为系统是用链表来存储空闲内存地址的,自然是不连续的,而链表的遍历方向是由低地址向高地址.堆得大小受限于计算机系统中有效地虚拟内存.由此可见,堆获得的空间比较灵活,也比较大。</p> <h2 id="35、搜索算法">35、搜索算法</h2> <h3 id="1、dfsbfs">1、DFS/BFS</h3> <p>dfs：深度搜索</p> <p>用递归，设置一个访问标志。</p> <p>不断的深入，往一个方向递归。直到底部。找兄弟，对兄弟进行深度递归。</p> <p>bfs：</p> <p>设置一个访问标志，一个队列。</p> <p>顶点入队列。</p> <p>取出队列的点。找他的儿子。并入队列。</p> <p>再从队列取点。找儿子。</p> <h3 id="2、剪枝搜索">2、剪枝搜索</h3> <p>加一个if判断，遇到明显不符合的直接break；或者return。</p> <h3 id="3、记忆化搜索">3、记忆化搜索</h3> <p>把已经搜索过的结果保存起来。</p> <p>计算新的结果的时候，先在数组里面找有没有。</p> <p>如果有，就是已经计算过，不必再次计算，直接取就行。</p> <p>递归时候用。</p> <h2 id="死锁是什么">死锁是什么</h2> <p>多个并发进程因争夺系统资源而产生相互等待的现象。</p> <p>1、互斥条件：一个资源每次只能被一个进程使用；</p> <p>2、请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放；</p> <p>　　3、不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺；</p> <p>　　4、循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系；</p> <h2 id="36、前端性能优化">36、前端性能优化</h2> <p><strong>嵌套标签越多，解析越慢。</strong>。少用嵌套。</p> <h4 id="js操作真实dom的代价！vdom打包更新操作，一次性更新到真实dom中。在dom发生变化的时候县对虚拟dom进行操作，通过dom-diff算法将虚拟dom和原虚拟dom的结构做对比，最终批量的去修该真实的dom结构，尽可能的避免了频繁修改dom而导致的频繁的重排和重绘。">JS操作真实DOM的代价！vDOM打包更新操作，一次性更新到真实DOM中。在dom发生变化的时候县对虚拟dom进行操作，通过dom diff算法将虚拟dom和原虚拟dom的结构做对比，最终批量的去修该真实的dom结构，尽可能的避免了频繁修改dom而导致的频繁的重排和重绘。</h4> <h2 id="39、seo优化">39、seo优化</h2> <p>1、title，keyword，descrip</p> <p>2、语义化标签</p> <p>3、图片alt</p> <p>4、高质量外链</p> <p>5、网页响应速度</p> <h3 id="1浏览器页面有哪三层构成，分别是什么，作用是什么">1.浏览器页面有哪三层构成，分别是什么，作用是什么?</h3> <p>结构层，表示层和行为层。</p> <p>分别对应，html，css，js</p> <p>HTML实现页面结构、CSS完成页面的表现与风格、JavaScript实现客户端的一些功能和业务</p> <h3 id="2html5的优点与缺点？">2.HTML5的优点与缺点？</h3> <ul> <li>网络标准统一，W3C推荐出来的</li> <li>多设备，跨平台</li> <li>即时更新</li> <li>提出新的标签</li> <li>对SEO比较友好</li> <li>调用native手机原生功能</li> </ul> <p>缺点：</p> <ul> <li>webstorage，websocket安全性不够</li> <li>浏览器的兼容性不够，旧版浏览器不兼容</li> <li></li> </ul> <h3 id="3doctype作用-严格模式与混杂模式如何区分？它们有何意义">3.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3> <p>DOctype定义文件类型，告诉浏览器这个文件的类型，然后用什么规范来解析这个文档。</p> <p>Doctype必须声明在HTML文档的第一行</p> <p><strong>严格模式：</strong>浏览器按照W3C标准解析代码</p> <p><strong>混杂模式：</strong>浏览器用自己的方式解析代码</p> <p>区分：有没有Doctype。有就是严格模式</p> <h3 id="4html5有哪些新特性、移除了哪些元素？">4.HTML5有哪些新特性、移除了哪些元素？</h3> <p>拖放，语义化标签：如header，section，article这些。</p> <p>还可以导入音频，视频。</p> <p>画布，canvas，可以用js来画图。</p> <p>还有localstorage，sessionstorage等存储技术。</p> <p>webworker，websocket这些新技术。</p> <p>移除元素：big，basefont，tt，u，还有frame这些。</p> <h3 id="5你做的网页在哪些浏览器测试过这些浏览器的内核分别是什么">5.你做的网页在哪些浏览器测试过,这些浏览器的内核分别是什么?</h3> <p>IE内核：trident</p> <p>还有苹果那个浏览器：webkit</p> <p>chrome浏览器：Blink内核</p> <p>还有火狐浏览器的gecko内核。</p> <p>内核：渲染引擎，对网页语法的解释</p> <h3 id="7说说你对html5认识（是什么为什么）">7.说说你对HTML5认识?（是什么,为什么）</h3> <p>html5是新一代的html标准，支持很多新的特性，也移除了一些不好用，不常用的特性。</p> <p>我觉得h5最强大的特性就是跨平台性吧，h5是为了适应移动互联网而产生的。以前的h4网页标准不统一，影响发展。h5比h4更简单，易于编程。</p> <p>语义化</p> <h3 id="8对web标准以及w3c的理解与认识">8.对WEB标准以及W3C的理解与认识?</h3> <p><strong>web标准一般是将该三部分独立分开，使其更具有模块化</strong></p> <p>web标准一般是将该三部分独立分开，使其更具有模块化。但一般产生行为时，就会有结构或者表现的变化，也使这三者的界限并不那么清晰。</p> <p><strong>W3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范</strong>：包含如下几点</p> <p>1.对于结构要求：（标签规范可以提高搜索引擎对页面的抓取效率，对SEO很有帮助）</p> <p><strong>1）。标签字母要小写</strong></p> <p><strong>2）。标签要闭合</strong></p> <p><strong>3）。标签不允许随意嵌套</strong> <strong>尽量使用外链css样式表和js脚本</strong></p> <p><strong>样式尽量少用行间样式表。</strong></p> <h3 id="9html5行内元素有哪些块级元素有哪些-空元素有哪些">9.HTML5行内元素有哪些,块级元素有哪些, 空元素有哪些?</h3> <p>块级元素：独占一行，display:block</p> <pre><code class="language-javascript">h1-h6\\p\\div\\列表\n</code></pre> <p>行内元素：不独占一行，inline</p> <pre><code class="language-javascript">span \\a\\img\\strong...\n</code></pre> <p>行内元素可以包含在块级元素中，反之不能。</p> <p>可以通过display来修改。</p> <h3 id="10什么是webgl它有什么优点">10.什么是WebGL,它有什么优点?</h3> <p>WebGL（全写 WebGraphics Library ）是一种 3D 绘图标准 。</p> <p>是js和openGL的结合。</p> <p>WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，</p> <h3 id="11请你描述一下-cookies，sessionstorage-和-localstorage-的区别">11.请你描述一下 cookies，sessionStorage 和 localStorage 的区别?</h3> <h3 id="12说说你对html语义化的理解">12.说说你对HTML语义化的理解?</h3> <p><strong>用正确的标签做正确的事情。</strong>html语义化让页面的内容结构化，结构更清晰，<strong>便于对浏览器，搜索引擎解析</strong>；即使在没有css样式的情况下，也以一种文档格式显示，并且是容易阅读的；搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重<strong>，利于SEO</strong>；使阅读源代码的人对网站更容易将网站分块，<strong>便于阅读维护理解。</strong></p> <h3 id="13link和import的区别">13.link和@import的区别?</h3> <p>link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。</p> <p>@import是CSS2.1提出的，所以老的浏览器不支持，@import只有在IE5以上的才能识别，而link标签无此问题。</p> <p>当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的.</p> <h3 id="14说说你对svg理解">14.说说你对SVG理解?</h3> <p>SVG<strong>可缩放矢量图形（</strong> Scalable Vector Graphics ）是基于可扩展标记语言（ XML ），用于描述二维矢量图形的一种图形格式</p> <p>SVG文件比那些 GIF 和 JPEG 格式的<strong>文件要小很多</strong></p> <h3 id="15html全局属性global-attribute有哪些">15.HTML全局属性(global attribute)有哪些?</h3> <p>accesskey:设置快捷键，提供快速访问元素如aaa在windows下的firefox中按alt + shift + a可激活元素</p> <p><strong>class</strong>:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素</p> <p>contenteditable: 指定元素内容是否可编辑</p> <p>contextmenu: 自定义鼠标右键弹出菜单内容</p> <p><strong>data-</strong>*: 为元素增加自定义属性</p> <p>dir: 设置元素文本方向</p> <p>draggable: 设置元素是否可拖拽</p> <p>dropzone: 设置元素拖放类型： copy, move, link</p> <p>hidden: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果</p> <p><strong>id: 元素id</strong>，文档内唯一</p> <p>lang: 元素内容的语言</p> <p>spellcheck: 是否启动拼写和语法检查</p> <p><strong>style: 行内</strong>css样式</p> <p>tabindex: 设置元素可以获得焦点，通过tab可以导航</p> <p><strong>title:</strong> 元素相关的建议信息</p> <p>translate: 元素和子孙节点内容是否需要本地化</p> <h3 id="16说说超链接target属性的取值和作用？">16.说说超链接target属性的取值和作用？</h3> <p>17.data-属性的作用是什么？ 18.介绍一下你对浏览器内核的理解？ 19.常见的浏览器内核有哪些？ 20.iframe有那些缺点？ 21.Label的作用是什么，是怎么用的？ 22.如何实现浏览器内多个标签页之间的通信? 23.如何在页面上实现一个圆形的可点击区域？ 24.title与h3的区别、b与strong的区别、i与em的区别？ 25.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？ 26.HTML5标签的作用?(用途) 27.简述一下src与href的区别？ 28.谈谈你对canvas的理解？ 29.WebSocket与消息推送？ 30.mg的title和alt有什么区别？ 31.表单的基本组成部分有哪些，表单的主要用途是什么？ 32.表单提交中Get和Post方式的区别？ 33.HTML5 有哪些新增的表单元素？ 34.HTML5 废弃了哪些 HTML4 标签？ 35.HTML5 标准提供了哪些新的 API？ 36.HTML5 存储类型有什么区别？ 37.HTML5 应用程序缓存和浏览器缓存有什么区别？ 38.HTML5 Canvas 元素有什么用？ 39.除了 audio 和 video，HTML5 还有哪些媒体标签？ 40.HTML5 中如何嵌入视频？ 41.HTML5 中如何嵌入音频？ 42.新的 HTML5 文档类型和字符集是？</p> <h3 id="43、html和xhtml的区别">43、html和xhtml的区别</h3> <p>1.所有的标记都必须要有一个相应的结束标记</p> <p>2.所有标签的元素和属性的名字都必须使用小写</p> <p>3.所有的XML标记都必须合理嵌套</p> <p>4.所有的属性必须用引号&quot;&quot;括起来</p> <p>5.把所有&lt;和&amp;特殊符号用编码表示</p> <p>6.给所有属性赋一个值</p> <p>7.不要在注释内容中使“--”</p> <p>8.图片必须有说明文字（BY三人行慕课）</p> <h2 id="44、css-table">44、css-table</h2> <p>但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。</p> <h1 id="前端知识专攻">前端知识专攻</h1> <h2 id="1、前端性能优化的方法">1、前端性能优化的方法</h2> <ul> <li>减少请求的数量，避免过多的请求</li> <li>对图片资源进行处理，转成base64编码，或者把多个图片弄成雪碧图。</li> <li>减少重定向，重定向会延迟html文档的传输，影响用户体验。如果要使用重定向就使用301永久重定向，少用302临时重定向。</li> <li>使用缓存，对一些经常要用的数据进行缓存，避免重复请求。</li> <li>对于css的导入尽量用link标签导入，不用@import</li> <li>对资源进行压缩处理，css，html，js，图片等资源都可以进行压缩。</li> </ul> <p><strong>优化网络连接</strong></p> <ul> <li>使用CDN，实时地根据网络状态，将用户的请求重新导向离用户最近的服务节点上</li> <li>使用DNS预解析，提前解析之后可能会用到的域名，使解析结果缓存到<code>系统缓存</code>中，缩短DNS解析时间，来提高网站的访问速度。</li> </ul> <pre><code class="language-html">&lt;link rel=&quot;dns-prefecth&quot; href=&quot;https://www.google.com&quot;&gt;\n&lt;link rel=&quot;dns-prefecth&quot; href=&quot;https://www.google-analytics.com&quot;&gt;\n</code></pre> <p><strong>优化资源加载</strong></p> <p>- </p> <p>减少算法时间复杂度</p> <p>减小作用域，因为作用域链，要遍历</p> <p><strong>减少重绘与回流</strong></p> <p><strong>DOM优化</strong></p> <p>1、缓存DOM</p> <p>　　2、减少DOM深度及DOM数量</p> <p>标签元素越多，标签的层级越深，浏览器解析DOM并绘制到浏览器中所花的时间就越长</p> <p>3、批量操作DOM</p> <p>　4、批量操作CSS样式</p> <p>　9、防抖和节流</p> <p><strong>兼容性和适配性优化</strong></p> <p><strong>安全性优化</strong></p> <p><strong>SEO搜索引擎优化</strong></p> <p>加入Meta标签，主要有title、description、keywords三个地方，其余的meta标签不加也没事。就重要性而言，title在页面优化中绝对占据很重要的位置。</p> <h2 id="2、箭头函数注意点">2、箭头函数注意点</h2> <p>（1）<strong>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象</strong>。</p> <p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p> <p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p> <p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p> <ol> <li>当形参有且只有一个的时候,可以省略小括号</li> </ol> <p>2)当代码体只有一条语句的时候可以省略花括号</p> <h2 id="3、px、em、rem、vh、vw单位">3、px、em、rem、vh、vw单位</h2> <p> viewpoint height，视窗高度，1vh=视窗高度的1%</p> <p>viewpoint width，视窗宽度，1vw=视窗宽度的1%</p> <p>vmin，vw和vh中较小的那个。</p> <p>vmax，vw和vh中较大的那个。</p> <p>em，它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位。一般浏览器字体大小默认为16px，则2em == 32px；</p> <p>rem是根元素是尺寸。</p> <p>% 是相对于父元素的大小设定的比率 vw (viewport width) vh (viewport height) 是视窗的大小，100vw = 100%视窗宽度 100vh = 100%视窗高度，用vw，vh设定的大小只和视窗大小有关，所以用来开发多种屏幕设备的应用用这个单位还是挺合适的。</p> <h2 id="4、flexiblejs移动端适配">4、flexible.js移动端适配</h2> <p>阿里开源。</p> <p>源代码：</p> <pre><code class="language-javascript">;(function(win, lib) {\n var doc = win.document\n var docEl = doc.documentElement\n var metaEl = doc.querySelector(&#39;meta[name=&quot;viewport&quot;]&#39;)\n var flexibleEl = doc.querySelector(&#39;meta[name=&quot;flexible&quot;]&#39;)\n var dpr = 0\n var scale = 0\n var tid\n var flexible = lib.flexible || (lib.flexible = {})\n \n if (metaEl) {\n  console.warn(&#39;将根据已有的meta标签来设置缩放比例&#39;)\n  var match = metaEl.getAttribute(&#39;content&#39;).match(/initial\\-scale=([\\d\\.]+)/)\n  if (match) {\n   scale = parseFloat(match[1])\n   dpr = parseInt(1 / scale)\n  }\n } else if (flexibleEl) {\n  var content = flexibleEl.getAttribute(&#39;content&#39;)\n  if (content) {\n   var initialDpr = content.match(/initial\\-dpr=([\\d\\.]+)/)\n   var maximumDpr = content.match(/maximum\\-dpr=([\\d\\.]+)/)\n   if (initialDpr) {\n    dpr = parseFloat(initialDpr[1])\n    scale = parseFloat((1 / dpr).toFixed(2))\n   }\n   if (maximumDpr) {\n    dpr = parseFloat(maximumDpr[1])\n    scale = parseFloat((1 / dpr).toFixed(2))\n   }\n  }\n }\n \n if (!dpr &amp;&amp; !scale) {\n  var isAndroid = win.navigator.appVersion.match(/android/gi)\n  var isIPhone = win.navigator.appVersion.match(/iphone/gi)\n  var devicePixelRatio = win.devicePixelRatio\n  if (isIPhone) {\n   // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案\n   if (devicePixelRatio &gt;= 3 &amp;&amp; (!dpr || dpr &gt;= 3)) {\n    dpr = 3\n   } else if (devicePixelRatio &gt;= 2 &amp;&amp; (!dpr || dpr &gt;= 2)) {\n    dpr = 2\n   } else {\n    dpr = 1\n   }\n  } else {\n   // 其他设备下，仍旧使用1倍的方案\n   dpr = 1\n  }\n  scale = 1 / dpr\n }\n \n docEl.setAttribute(&#39;data-dpr&#39;, dpr)\n if (!metaEl) {\n  metaEl = doc.createElement(&#39;meta&#39;)\n  metaEl.setAttribute(&#39;name&#39;, &#39;viewport&#39;)\n  metaEl.setAttribute(\n   &#39;content&#39;,\n   &#39;initial-scale=&#39; +\n    scale +\n    &#39;, maximum-scale=&#39; +\n    scale +\n    &#39;, minimum-scale=&#39; +\n    scale +\n    &#39;, user-scalable=no&#39;\n  )\n  if (docEl.firstElementChild) {\n   docEl.firstElementChild.appendChild(metaEl)\n  } else {\n   var wrap = doc.createElement(&#39;div&#39;)\n   wrap.appendChild(metaEl)\n   doc.write(wrap.innerHTML)\n  }\n }\n \n function refreshRem() {\n  var width = docEl.getBoundingClientRect().width\n  if (width / dpr &gt; 540) {\n   width = 540 * dpr\n  }\n  var rem = width / 10\n  docEl.style.fontSize = rem + &#39;px&#39;\n  flexible.rem = win.rem = rem\n }\n \n win.addEventListener(\n  &#39;resize&#39;,\n  function() {\n   clearTimeout(tid)\n   tid = setTimeout(refreshRem, 300)\n  },\n  false\n )\n win.addEventListener(\n  &#39;pageshow&#39;,\n  function(e) {\n   if (e.persisted) {\n    clearTimeout(tid)\n    tid = setTimeout(refreshRem, 300)\n   }\n  },\n  false\n )\n \n if (doc.readyState === &#39;complete&#39;) {\n  doc.body.style.fontSize = 12 * dpr + &#39;px&#39;\n } else {\n  doc.addEventListener(\n   &#39;DOMContentLoaded&#39;,\n   function(e) {\n    doc.body.style.fontSize = 12 * dpr + &#39;px&#39;\n   },\n   false\n  )\n }\n \n refreshRem()\n \n flexible.dpr = win.dpr = dpr\n flexible.refreshRem = refreshRem\n flexible.rem2px = function(d) {\n  var val = parseFloat(d) * this.rem\n  if (typeof d === &#39;string&#39; &amp;&amp; d.match(/rem$/)) {\n   val += &#39;px&#39;\n  }\n  return val\n }\n flexible.px2rem = function(d) {\n  var val = parseFloat(d) / this.rem\n  if (typeof d === &#39;string&#39; &amp;&amp; d.match(/px$/)) {\n   val += &#39;rem&#39;\n  }\n  return val\n }\n})(window, window[&#39;lib&#39;] || (window[&#39;lib&#39;] = {}))\n</code></pre> <ol> <li>获取文档对象</li> <li>获取viewport视口</li> <li>查看meta标签中是否设置了scale，初始化缩放。</li> <li>如果有就过去缩放倍数，设置dpr为scale分之一。</li> <li>查看meta中是否有flexible，有就设置dpr和scale</li> <li>如果没有设置meta，获取设备的dpr，</li> <li>设置data-dpr，dpr</li> <li>创建meta标签，name是viewport视口，设置宽度和缩放倍数。</li> <li>创建refleshRem函数（改变根元素的字体号）宽度的1/10</li> <li>添加两个监听器来触发relfeshRem函数，更新rem的值</li> <li>html加载解析完成后设置body的字体大小</li> <li>调用releshRem函数</li> </ol> <p>DPR：用多少个物理像素来渲染一个css像素</p> <p>flexible就是根据dpr来设置缩放，然后通过窗口大小来改变根元素的字体大小，从而改变rem单位的大小。</p> <p>在开发移动端的过程中，如何频繁的去计算rem和px之间的转换时一件非常麻烦的过程，接下来提供一个vue框架可以自动转换</p> <p>一、安装lib-flexible依赖</p> <pre><code class="language-javascript">npm install lib-flexible --save\n</code></pre> <p>二、引入lib-flexible依赖 main.js中添加以下代码</p> <pre><code class="language-javascript">import &#39;lib-flexible/flexible&#39;\n三、配置meta 标签内容\n</code></pre> <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"> 1 四、安装px2rem-loader依赖 npm install px2rem-loader --save-dev 1 五、配置相关px2rem-loader 在build下的 utils.js文件下，添加以下代码 <p><img src="https://img-blog.csdnimg.cn/20190902114137580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEyMjEyMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <pre><code class="language-javascript"> const px2remLoader = {\n    loader: &#39;px2rem-loader&#39;,\n    options: {\n      remUnit: 75\n    }\n  }\n</code></pre> <p><img src="https://img-blog.csdnimg.cn/20190902114201907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTEyMjEyMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <h2 id="5、vue的生命周期">5、VUE的生命周期</h2> <p><strong>创建、数据初始化、挂载、更新、销毁</strong></p> <p>先是通过构造函数创建Vue，然后init初始化，初始化之后是create创建，create之前还有一个beforecreate。然后是挂载vue，挂载之后是构建和渲染DOM树，然后创建虚拟DOM，然后完成挂载。最后是destroy销毁。</p> <p>在init初始化的时候：<strong>props =&gt; methods =&gt;data =&gt; computed =&gt; watch</strong>; 完成这些的初始化，</p> <p>具体方法：</p> <p>init（props，methods）</p> <p> beforeCreate</p> <p> created</p> <p>（解析渲染DOM）</p> <p> beforeMount</p> <p> mounted（完成虚拟DOM的创建）</p> <p> (</p> <p>​ beforeUpdate</p> <p>​ updated</p> <p> )</p> <p> beforeDestroy</p> <p> destroyed</p> <p>运行顺序（methods、computed、data、watch）</p> <p><img src="https://upload-images.jianshu.io/upload_images/13119812-5890a846b6efa045.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p> <h2 id="6、项目介绍">6、项目介绍</h2> <p>面试官你好，我是合肥工业大学软件工程专业22届本科生，我叫刘国林。</p> <p>我想面试的是贵公司的ui开发岗位，在校期间做过基于vue框架和ssm框架的一些项目，</p> <p>熟练掌握html，css，和js，对移动端h5也有一定的了解。</p> <p>我觉得我有能力胜任这个岗位的工作，非常希望有机会能加入到腾讯之中。</p> <p>我的实习周期在七个月以上。也非常希望通过这次实习，然后通过转正留下来。</p> <p>老家是广西玉林的，父母也在深圳工作。所以我也是希望能在深圳发展的。</p> <p>最关心的问题就是如果顺利的话，offer什么时候能下来了</p> <p>1、小说阅读器</p> <p>这个项目是基于vue开发的一个h5+app，主要功能是本地小说的导入阅读，和网络小说的爬取。</p> <p>问：这个项目的难点是什么？</p> <p>我觉得难不难主要看对于谁而言吧，对于当时的我来说都挺难的，很多知识点都不懂，每一步都要去学习。其实做这个项目也就是一个自我学习的过程。</p> <p>但是当你做完之后，回头一看，发现它也不是很难。做过之后学到了更多的知识之后，就不难了。</p> <p>对我来说，我觉得这个项目主要有两个难点。一个是本地小说的导入阅读。一个是js做网络爬虫。</p> <p>本地小说的导入阅读主要是一个储存问题，用户选择导入的文件之后，怎么把这个文件缓存起来。刚开始我用的是localstorage，后来我发现，localstorage最多只有5M作用的存储大小，这肯定是不够的。所以要去寻找新的解决方案。</p> <p>后来才发现，可以用indexedDB数据库来储存。有了储存方案之后，就是分章节的问题。分章节用的是正则表达式进行划分，然后分章节储存起来。</p> <p>然后是网络小说的爬取。我当时的想法是直接用js在前端做一个爬虫，去爬取其他小说网站的数据，到自己的页面中来。可是由于这个浏览器同源策略的影响，直接调用不同域名，端口，或者协议的数据会存在跨域。我当时在网上研究了很多方法，都没能实现。什么CORS，jsonp，不是只在开发环境中可行就是需要两个页面进行配合。我可以画图介绍一下我的方法吗？</p> <p>这是我的网页，这是目标网页。一般来说跨域传输数据是需要两个页面相互配合的是可以实现的，但现在只有这个网页是我的，目标网页是别人的。我先到目标网页中去，在目标网页中嵌入并执行一段js代码，把需要的数据保存到系统中。然后直接从系统中获取数据。我是通过这样实现的。</p> <p>2、vue+ssm的考务管理系统。</p> <p>这个系统主要是根据这个考试，分配监考老师去具体的考场监考。这个项目还是挺简单的。前后端我都有做，后端主要是数据库的增删查改。前端就是提交数据和显示信息。核心业务算法只有一个，就是根据一定的规则对老师进行分配，这个是其他组员做的。</p> <p>其实对于这个项目，学校的目的主要是让我们熟悉git团队协作的流程。</p> <p>功能开发工作流。</p> <h2 id="7、跨域方法与同源策略">7、跨域方法与同源策略</h2> <h3 id="1、jsonp跨域（手写jsonp）">1、JSONP跨域（手写jsonp）</h3> <p>利用**<code>&lt;script&gt;</code>标签没有跨域限制**，通过<code>&lt;script&gt;</code>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</p> <pre><code class="language-javascript">  script.src = &#39;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#39;;\n    document.head.appendChild(script);\n\n    // 回调执行函数\n    function handleCallback(res) {\n        alert(JSON.stringify(res));\n    }\n</code></pre> <p>jquery的ajax还有axios封装好了，把请求方式写成jsonp，然后指定回调函数就行。</p> <h3 id="2、cors跨域资源共享">2、CORS跨域资源共享</h3> <p>SSM框架中，新建一个配置文件，使用注解配置。</p> <p>指定允许跨域的域名或者ip地址。</p> <p>ACCESS-CONTROL-ALLOW-ORIGIN</p> <h3 id="3、nginx代理配置">3、nginx代理配置</h3> <p>恩举克斯</p> <p>代理跨域</p> <pre><code class="language-js">module.exports = {\n    devServer: {\n    port: 8888, // 端口号，如果端口号被占用，会自动提升1 \t\thost: &quot;localhost&quot;, //主机名， 127.0.0.1， 真机 0.0.0.0\n    https: false, //协议 open: true, //启动服务时自动打开浏览器访问\n    proxy: { // 匹配 /dev-api 开头的请求， \n        &#39;/dev-api&#39;: { // 目标服务器, 代理访问到 https://localhost:8001 \n            target: &#39;http://localhost:8001&#39;, \n            // 开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据， \n            // 并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题\n            changOrigin: true, //开启代理\n            pathRewrite: { \n            // 会将 /dev-api 替换为 &#39;&#39;,也就是 /dev-api 会移除， \n            // 如 /dev-api/db.json 代理到 https://localhost:8080/db.json \n            &#39;^/dev-api&#39;: &#39;&#39;, \n            }\n        }\n    }\n}, \n//就算没有corss返回的头部Access-Control-Allow-Origin: 的允许，一样可以，因为进行替换请求url，浏览器认为它是同源的。\n</code></pre> <h3 id="5、documentdomainiframe">5、document.domain+iframe</h3> <p>适合主域名相同，子域名不同的。</p> <h3 id="6、windowname">6、window.name</h3> <p>需要两个页面配合</p> <h3 id="7、websocket">7、websocket</h3> <p>建立全双工连接。</p> <h3 id="8、postmessage">8、postMessage</h3> <p>两个页面发送数据。</p> <p>添加message监听器，接收数据。</p> <h2 id="9、nodejs">9、node.js</h2> <p>node.js就是运行在服务端的JavaScript。</p> <p>可以用js做服务端语言。不用在浏览器，就可以直接运行js程序。</p> <h2 id="13、dom树的构建方法">13、DOM树的构建方法</h2> <p>收到字节流，转换成字符流，输入解析。解析token节点，通过栈进行dom树的构建。</p> <p>1）HTMLInputStream负责HTML数据的输入；</p> <p>2）HTMLTokenlizer根据输入的数据流把HTML进行tokenlize；</p> <p>3）HTMLTreeBuilder根据输入的token进行建树、完成树的构建；</p> <p>DOM树是通过栈来构建的。</p> <p>解析html标签，通过进栈出栈来完成树的构建。</p> <p><img src="https://www.freesion.com/images/485/99c25b7dde77aa2c12e199837528da05.png" alt="在这里插入图片描述"></p> <h2 id="14、移动端适配方案">14、移动端适配方案</h2> <p>在屏幕宽度过大时不再缩放，也会用到媒体查询，并且<strong>响应式设计更多地可能是针对不同设备间的自适应</strong>。对于移动端web页面的自适应方案来说，<strong>现在用的比较多的是<code>rem</code><strong>，</strong>逐渐向<code>vw/vh</code>发展</strong>，而<code>rem+vw/vh</code>则是作为<code>vw/vh</code>向后兼容的一种过渡</p> <blockquote> <p>获取dpr</p> </blockquote> <p>js中通过**<code>window.devicePixelRatio</code>**获取，css中通过<code>-webkit-device-pixel-ratio</code>,<code>-webkit-min-device-pixel-ratio</code>,<code>-webkit-max-device-pixel-ratio</code>进行媒体查询。</p> <p>1、百分比</p> <p>2、rem，flexible</p> <p>3、vh/vm</p> <p>4、基于媒体查询的响应式设计</p> <h3 id="1像素问题">1像素问题</h3> <p>1px在屏幕上显示2px。dpr不同。</p> <p>1、响应式处理（transform）</p> <p>@media only screen and (-webkit-min-device-pixel-ratio: 2) { .div:before { -webkit-transform: scaleY(0.5); transform: scaleY(0.5); } }</p> <p>2、先将页面缩小，在调整根元素字体号</p> <p>将真个页面缩小dpr倍，再将页面的根字体放大dpr倍</p> <h3 id="横屏问题">横屏问题</h3> <p>设置页面宽度等于设备高度，一致认为横屏时让 <code>width=height</code> 体验比较好。</p> <p>js检测横屏时候，设置另一套方法。</p> <h2 id="15、图片适配问题">15、图片适配问题</h2> <p>如果想要针对不同屏幕，使用不同分辨率版本和尺寸的图片，使用属性<code>srcse</code> 和 <code>sizes</code> 。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FLearn%2FHTML%2FMultimedia_and_embedding%2FResponsive_images">srcset</a> 定义了允许浏览器选择的图像集，以及每个图像的大小（使用w单位）。<code>sizes</code>定义了一组媒体条件（例如屏幕宽度），指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择。</p> <pre><code class="language-html">&lt;img srcset=&quot;foo-320w.jpg,\n             foo-480w.jpg 1.5x,\n             foo-640w.jpg 2x&quot;\n     src=&quot;foo-640w.jpg&quot;&gt;\n     &lt;!--srcset属性给出了三个图像URL，适应三种不同的像素密度， 后面的像素密度描述符，格式是像素密度倍数 + 字母x。1x表示单倍像素密度，可以省略。--&gt;\n</code></pre> <pre><code class="language-html">&lt;img srcset = &quot;elva-fairy-320w.jpg 320w,\n               elva-fairy-480w.jpg 480w,\n               elva-fairy-800w.jpg 800w&quot;\n     sizes = &quot;(max-width: 320px) 280px,\n              (max-width: 480px) 440px,\n              800px&quot;\n     src = &quot;elva-fairy-800w.jpg&quot; alt=&quot;Elva dressed as a fairy&quot;&gt;\n</code></pre> <blockquote> <p>浏览器的查询过程：</p> </blockquote> <ul> <li>查看设备宽度；</li> <li>检查<code>sizes</code>列表中哪个媒体条件是第一个为真；</li> <li>查看给予该媒体查询的槽大小；</li> <li>加载<code>srcset</code>列表中引用的最接近所选的槽大小的图像</li> </ul> <h4 id="img异步加载">img异步加载</h4> <blockquote> <p><strong>&lt; img&gt; 引入的图片，使用js自带的异步加载图片。</strong>根据不同的<code>dpr</code>，加载不同分辨率的图片。</p> </blockquote> <pre><code class="language-html">&lt;img id=&quot;img&quot; data-src1x=&quot;xxx@1x.jpg&quot; data-src2x=&quot;xxx@2x.jpg&quot; data-src3x=&quot;xxx@3x.jpg&quot;/&gt;\n</code></pre> <pre><code class="language-javascript">var dpr = window.devicePixelRatio;\nif(dpr &gt; 3){\n    dpr = 3;\n};\n\nvar imgSrc = $(&#39;#img&#39;).data(&#39;src&#39;+dpr+&#39;x&#39;);\nvar img = new Image();\nimg.src = imgSrc;\nimg.onload = function(imgObj){\n    $(&#39;#img&#39;).remove().prepend(imgObj);//替换img对象\n};\n</code></pre> <blockquote> <p>pictrue标签</p> </blockquote> <pre><code class="language-html">&lt;picture&gt;\n  &lt;source media=&quot;(min-width: 30px)&quot; srcset=&quot;cat-vertical.jpg&quot;&gt;\n  &lt;source media=&quot;(min-width: 60px)&quot; srcset=&quot;cat-horizontal.jpg&quot;&gt;\n  &lt;img src=&quot;cat.jpg&quot; alt=&quot;cat&quot;&gt;\n&lt;/picture&gt;\n</code></pre> <h4 id="image-set">Image-set</h4> <blockquote> <p><strong>对于背景图片，使用<code>image-set</code>根据用户设备的分辨率匹配合适的图像</strong>， 同时要考虑兼容性问题。</p> </blockquote> <pre><code class="language-html">&lt;style&gt;\n.css {\n    background-image: url(1x.png); /*不支持image-set的情况下显示*/\n    background: -image-set(\n            url(1x.png) 1x,/* 支持image-set的浏览器的[普通屏幕]下 */\n            url(2x.png) 2x,/* 支持image-set的浏览器的[2倍Retina屏幕] */\n            url(3x.png) 3x/* 支持image-set的浏览器的[3倍Retina屏幕] */\n    );\n}\n&lt;/style&gt;\n</code></pre> <h4 id="media-query">media query</h4> <blockquote> <p><strong>对于背景图片，使用媒体查询自动切换不同分辨率的版本</strong></p> </blockquote> <pre><code class="language-html">&lt;style&gt;\n/* 普通显示屏(设备像素比例小于等于1)使用1倍的图 */\n.css{\n    background-image: url(img_1x.png);\n}\n\n/* 高清显示屏(设备像素比例大于等于2)使用2倍图  */\n@media only screen and (min-device-pixel-ratio:2){\n    .css{\n        background-image: url(img_2x.png);\n    }\n}\n\n/* 高清显示屏(设备像素比例大于等于3)使用3倍图  */\n@media only screen and (min-device-pixel-ratio:3){\n    .css{\n        background-image: url(img_3x.png);\n    }\n}\n&lt;/style&gt;\n</code></pre> <h2 id="16、常用布局">16、常用布局</h2> <h3 id="4、左边固定右边自适应（两栏布局）">4、左边固定右边自适应（两栏布局）</h3> <p>左边设置浮动，右边设置外边距</p> <pre><code class="language-csharp">HTML\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n\nCSS\n.left{\n    float:left;\n    width: 200px;\n    height:400px;\n    background-color: blue;\n}\n\n.right{\n    height:400px;\n    background-color: red;\n        margin-left:210px;\n}\n</code></pre> <h3 id="4、右边固定左边自适应">4、右边固定左边自适应</h3> <p>一种是margin负值，一种是flex；</p> <p>左边设置flex：1;就可以；右边固定，父盒子是flex</p> <h2 id="flex自适应">flex自适应</h2> <p>自适应的父盒子要给一个确定的高度</p> <pre><code class="language-js">&lt;div class=&quot;parent&quot;&gt;\n  &lt;div class=&quot;header&quot;&gt;\n \n  &lt;/div&gt;\n  &lt;div class=&quot;content&quot;&gt;\n \n  &lt;/div&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n     \n  &lt;/div&gt;\n&lt;/div&gt;\n　　\n.parent{\n  display: flex;\n  height: 100vh;\n}\n.header{\n  height: 100px;\n}\n.content{\n  flex: 1;\n}\n.footer{\n  height: 100px;\n}\n</code></pre> <h2 id="计算属性自适应">计算属性自适应</h2> <p>height: calc(100vh - 50px);</p> <p>需要多次flex自适应的时候，flex：1;并不能实现第二层的高度确定，所以滚动会出问题，所以第一层的flex改成计算属性自适应。</p> <p>浮动写在前面。</p> <p>自适应的div，默认一行，设置一个margin就行。</p> <pre><code class="language-csharp">HTML\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n\nCSS\n.left{\n    height:400px;\n    background-color: red;\n        margin-right:210px;\n}\n\n.right{\n    float:right;\n    width: 200px;\n    height:400px;\n    background-color: blue;\n}\n</code></pre> <h3 id="5、两边固定中间自适应（三栏布局）">5、两边固定中间自适应（三栏布局）</h3> <p>左右都浮动，中间设置边距。</p> <pre><code class="language-csharp">HTML:\n&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;\nCSS:\n.left{\n    float:left;\n    width: 200px;\n    height:400px;\n    background-color: red;\n}\n\n.right{\n    float:right;\n    width:200px;\n    height:400px;\n    background-color: blue;\n}\n.middle{\n    height: 400px;\n    background-color: yellow;\n    margin:0 210px 0 210px;\n}\n</code></pre> <h3 id="51、圣杯布局（三栏布局）">5.1、圣杯布局（三栏布局）</h3> <p>margin负值，向该方向偏移。可以会覆盖，不会挤下去。</p> <p>左栏就是margin-left： 100%，向左偏移100%。再relactive偏移自身宽度。因为容器设置了padding。</p> <pre><code class="language-csharp">HTML:\n&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\nCSS:\n.container{\n    overflow:hidden;\n    padding:0 200px;\n}\n.middle{\n    width:100%;\n    height:400px;\n    float:left;\n    background-color: yellow;\n}\n.left{\n    width:200px;\n    height:400px;\n    float:left;\n    background-color: blue;\n    margin-left:-100%;（挤上去）\n    position:relative;\n    left:-200px;\n}\n.right{\n    width:200px;\n    height:400px;\n    float:left;\n    background-color: darkseagreen;\n    margin-left:-200px;（挤上去）\n    position:relative;\n    right:-200px;\n}\n/*\n解决遮挡的代码是：\n.container中 padding:0 200px;\n.left中 position:relative;left:-200px;\n.right中 position:relative;right:-200px;\n*/\n</code></pre> <h3 id="52、双飞翼布局（三栏布局）">5.2、双飞翼布局（三栏布局）</h3> <p>主要内容模块可以优先加载，当页面中内容较多时不会影响用户体验。</p> <pre><code class="language-csharp">HTML:\n&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;middle&quot;&gt;\n                 &lt;div id=&quot;inside&quot;&gt;middle&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\nCSS:\n.container{\n    overflow:hidden;\n}\n.middle{\n    width:100%;\n    height:400px;\n    float:left;\n    background-color: yellow;\n}\n.left{\n    width:200px;\n    height:400px;\n    float:left;\n    background-color: blue;\n    margin-left:-100%;（挤上去）\n}\n.right{\n    width:200px;\n    height:400px;\n    float:left;\n    background-color: darkseagreen;\n    margin-left:-200px;（挤上去）\n}\n/*解决遮挡*/\n#inside{\n    margin:0 210px;\n    height:400px;\n    background-color:red;\n}\n</code></pre> <h3 id="53、flex布局">5.3、flex布局</h3> <p>调整order</p> <pre><code class="language-html">.container{\n    display:flex;\n    width:100%;\n    height:100px;\n}\n.left{\n    flex:0 0 100px;\n    order: 0 /*默认为0*/\n}\n.right{\n    flex:0 0 100px;\n    order:2\n}\n.center{\n    flex:1 1 auto;\n    order:1\n}\n\n&lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;center&quot; style=&quot;background-color:rgb(9, 134, 236)&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;left&quot; style=&quot;background-color:red&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot; style=&quot;background-color:rgb(6, 235, 44)&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <h3 id="54、table布局">5.4、table布局</h3> <pre><code class="language-html">.container{\n    display:table;\n    width:100%;\n}\n.left,.center,.right{\n    display:table-cell;\n}\n.left{\n    width:100px;\n    height:100px;\n}\n.right{\n    width: 100px;\n    height:100px;\n}\n\n&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;left&quot; style=&quot;background-color:red&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;center&quot; style=&quot;background-color:rgb(9, 134, 236)&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;right&quot; style=&quot;background-color:rgb(6, 235, 44)&quot;&gt;&lt;/div&gt;\n&lt;/div&gt; \n</code></pre> <h3 id="55绝对定位布局">5.5绝对定位布局</h3> <p>父容器position是relactive，子元素随意absolute。</p> <h3 id="6、网格布局">6、网格布局</h3> <h2 id="18、进程">18、进程</h2> <h3 id="通信">通信</h3> <ol> <li>共享存储，共享内存，共享数据结构</li> <li>消息传递，信号量，FIFO，消息队列</li> <li>管道通信，管道</li> </ol> <h3 id="僵尸进程与孤儿进程">僵尸进程与孤儿进程</h3> <p>每个进程都有一个对应的PCB，在进程结束时，<strong>会发送一个信号量给父进程，通知父进程该进程已经结束</strong>，并由父进程回收子进程的PCB如果父进程没有接收到这一信号量，子进程的PCB就会一直保存在内存中，变为僵尸进程。 僵尸进程会占用内存，是我们要避免的。 如果<strong>在子进程结束之前父进程已经结束，那么子进程就会变为孤儿进程</strong>。孤儿进程会统一被进程id为1的init进程收留，所以不会产生内存问题。</p> <h2 id="19、promise">19、Promise</h2> <p><code>promise.all</code>的用法： <strong>传递一个<code>promise</code>的数组，当所有的<code>promise</code>都完成（<code>resolved</code>）,回调所有成功的结果， 或者有一个失败， 回调第一个失败的结果</strong></p> <pre><code class="language-js">async function test() {\n  const v1 = await console.log(1);\n  await new Promise((resolve,reject)=&gt;{\n    console.log(&#39;5&#39;)\n    resolve(7)\n    console.log(6)\n  }).then(res=&gt;{\n    console.log(res)\n  })\n  console.log(2)\n}\n\ntest();\nconsole.log(3)\n//1,3,5,6,7,2\n</code></pre> <h2 id="await">await</h2> <pre><code class="language-js">\nasync function test() {\n  // const v1 = await console.log(1);\n  new Promise((resolve,reject)=&gt;{\n    console.log(&#39;55&#39;)\n    resolve(77)\n    console.log(66)\n  }).then(res=&gt;{\n    console.log(res)\n  })\n  await new Promise((resolve,reject)=&gt;{\n    console.log(&#39;5&#39;)\n    resolve(7)\n    console.log(6)\n  }).then(res=&gt;{\n    console.log(res)\n  })\n  console.log(2)\n}\n\ntest();\nconsole.log(3)\n\n//55,66,5,6,3,77,7,2\n遇到await，先执行跟着的promise，回调放入微任务队列。再跳出函数，执行后面的语句，再\n执行回调微任务，再执行await后面的语句\n</code></pre> <h1 id="web安全">web安全</h1> <h2 id="cookie如何防范xss攻击">cookie如何防范xss攻击</h2> <p>在http头部设置cookie为httponly，secure</p> <p><strong>httponly参数是用来限制非HTTP协议程序接口对客户端COOKIE进行访问的，所以客户端脚本，如JS是无法取得这种COOKIE的，同时，JQuery中的“$.cookie(&#39;xxx&#39;)”方法也无法正常工作，所以想要在客户端取到httponly的COOKIE的唯一方法就是使用AJAX，将取COOKIE的操作放到服务端，接收客户端发送的ajax请求后将取值结果通过HTTP返回客户端。</strong></p> <h2 id="xss攻击">XSS攻击</h2> <p>跨站脚本攻击，注入一段脚本到你的服务器里面，或者放在url链接里面</p> <p>盗取cookie信息</p> <p>预防：过滤用户输入，不要相信用户的任何输入</p> <h2 id="sql注入">SQL注入</h2> <p>同样是过滤输入，</p> <p>对进入数据库的特殊字符进行转移处理</p> <p>在mapper层进行预编译处理，JDBC，比如mabatis的#和￥</p> <h2 id="ddos攻击">DDOS攻击</h2> <p>著名的DDOS攻击，发送大量的请求导致服务器瘫痪。</p> <p>1、备份网站，启动应急，告诉用户受到了攻击，暂时无法访问</p> <p>2、封IP，大量的请求从一个ip发出，就封掉它（硬件、防火墙、web服务器都可以过滤）</p> <p>3、带宽扩容，能接受更多的请求</p> <p>4、cdn分发、用户只允许访问 CDN，如果内容不在 CDN 上，CDN 再向源服务器发出请求。</p> <p>5、攻击溯源，打回去，报警、线下干掉它</p> <p>6、检测技术和清洗技术，清除异常流量</p> <p>7、使用验证码</p> <h2 id="syn攻击ddos攻击的一种">SYN攻击(ddoS攻击的一种)</h2> <p><code>SYN</code>攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送<code>SYN</code>包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的<code>SYN</code>包将长时间占用未连接队列，正常的<code>SYN</code>请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞</p> <h2 id="csrf">CSRF</h2> <p>跨站请求伪造</p> <p>攻击者盗用了你的身份，以你的名义发送恶意请求。</p> <p>在没有关闭目标网站的情况下，访问了恶意网站。</p> <p>目标网站已经和用户建立了信任关系</p> <p>预防：使用token认证，敏感请求使用验证码，密码等</p> <h2 id="文件上传漏洞">文件上传漏洞</h2> <p>上传文件到服务器</p> <h2 id="不安全的通信">不安全的通信</h2> <p>使用https</p> <h2 id="20、正则表达式">20、正则表达式</h2> <h3 id="1、前面的字符至少出现一次">1、前面的字符至少出现一次+</h3> <p>+号，</p> <pre><code class="language-js">runoo+b，可以匹配 runoob、runooob、runoooooob 等\n</code></pre> <h3 id="2、前面的字符可以出现任意次，也可以不出现">2、前面的字符可以出现任意次，也可以不出现*</h3> <p>*号</p> <pre><code class="language-js">runoo*b，可以匹配 runob、runoob、runoooooob 等\n</code></pre> <h3 id="3、前面的字符只能出现0次或1次">3、前面的字符只能出现0次或1次,?</h3> <p>?号</p> <pre><code class="language-js">colou?r 可以匹配 color 或者 colour\n</code></pre> <h3 id="4、abc123显示指定字符">4、[abc123]显示指定字符</h3> <p>显示指定【】内出现的字符，，</p> <pre><code class="language-js">[aeiou] 匹配字符串 &quot;google runoob taobao&quot; 中所有的 e o u a 字母\n</code></pre> <h3 id="5、除了这些字符不匹配">5、除了这些字符不匹配</h3> <p><strong>[^aeiou]</strong> 匹配字符串 &quot;google runoob taobao&quot; 中除了 e o u a 字母的所有字母。</p> <p>匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\s】。</p> <h3 id="6、匹配一个连续区间">6、匹配一个连续区间</h3> <p>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</p> <h3 id="7、匹配所有（空白符和非空白）ss">7、匹配所有（空白符和非空白）\\s\\S</h3> <p>匹配所有。<strong>\\s 是匹配所有空白符</strong>，包括换行，\\S 非空白符，不包括换行。</p> <h3 id="8、匹配字母数字下划线----w">8、匹配字母数字下划线 \\w</h3> <p>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</p> <h3 id="9、转义字符特殊字符都需要转义">9、转义字符(特殊字符都需要转义)</h3> <pre><code class="language-js">runo\\*ob 匹配字符串 runo*ob。\n</code></pre> <h3 id="10、特别字符">10、特别字符</h3> <table> <thead> <tr> <th align="left">特别字符</th> <th align="left">描述</th> </tr> </thead> <tbody><tr> <td align="left">$</td> <td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#39;\\n&#39; 或 &#39;\\r&#39;。要匹配 $ 字符本身，请使用 $。</td> </tr> <tr> <td align="left">( )</td> <td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td> </tr> <tr> <td align="left">*</td> <td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td> </tr> <tr> <td align="left">+</td> <td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td> </tr> <tr> <td align="left">.</td> <td align="left">匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。</td> </tr> <tr> <td align="left">[</td> <td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td> </tr> <tr> <td align="left">?</td> <td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td> </tr> <tr> <td align="left">\\</td> <td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， &#39;n&#39; 匹配字符 &#39;n&#39;。&#39;\\n&#39; 匹配换行符。序列 &#39;\\&#39; 匹配 &quot;&quot;，而 &#39;(&#39; 则匹配 &quot;(&quot;。</td> </tr> <tr> <td align="left">^</td> <td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td> </tr> <tr> <td align="left">{</td> <td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td> </tr> <tr> <td align="left">|</td> <td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td> </tr> </tbody></table> <h3 id="11、匹配次数">11、匹配次数</h3> <table> <thead> <tr> <th align="left">字符</th> <th align="left">描述</th> </tr> </thead> <tbody><tr> <td align="left">*</td> <td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td> </tr> <tr> <td align="left">+</td> <td align="left">匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td> </tr> <tr> <td align="left">?</td> <td align="left">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;doxy&quot; 中的 &quot;do&quot; 。? 等价于 {0,1}。</td> </tr> <tr> <td align="left">{n}</td> <td align="left">n 是一个非负整数。匹配确定的 n 次。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</td> </tr> <tr> <td align="left">{n,}</td> <td align="left">n 是一个非负整数。至少匹配n 次。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</td> </tr> <tr> <td align="left">{n,m}</td> <td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o{0,1}&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</td> </tr> </tbody></table> <p>以下正则表达式匹配一个正整数，**[1-9]<strong>设置第一个数字不是 0，</strong>[0-9]*** 表示任意多个数字：</p> <h2 id="贪婪模式和非贪婪模式">贪婪模式和非贪婪模式</h2> <pre><code class="language-js">let text = &#39;12345678&#39;\nlet reg = /\\d{3,6}?/g\ntext.replace(reg, &#39;X&#39;)\n&quot;XX78&quot;\nlet text = &#39;12345678&#39;\nlet reg = /\\d{3,6}/g\ntext.replace(reg, &#39;X&#39;)\n&quot;X78&quot;\n\n独占模式，尽可能长，不回溯\n</code></pre> <h2 id="多条件或匹配">多条件”或“匹配</h2> <pre><code class="language-js">(abc)|(fff)\n|前后不能有空格\n</code></pre> <h1 id="git的使用">git的使用</h1> <h2 id="git提交冲突">git提交冲突</h2> <p>head 到 =======里面的balabala的是自己的commit的内容</p> <p>=========到 &gt;&gt;&gt;&gt;&gt;&gt;里面的balabala一堆的内容是下拉的内容</p> <p>修改冲突后，重新commit</p> <h2 id="1、git-merge-和git-rebase的区别">1、git merge 和git rebase的区别</h2> <p>merge和rebase都是用来合并分支的。</p> <p><strong>merge命令不会保留merge的分支的commit</strong>：</p> <p>使用<code>merge</code>命令合并分支，解决完冲突，执行<code>git add .</code>和<code>git commit -m&#39;fix conflict&#39;</code>。这个时候会产生一个commit。</p> <p>使用<code>rebase</code>命令合并分支，解决完冲突，执行<code>git add .</code>和<code>git rebase --continue</code>，不会产生额外的commit。这样的好处是，‘干净’，分支上不会有无意义的解决分支的commit；坏处，如果合并的分支中存在多个<code>commit</code>，需要重复处理多次冲突。</p> <ol> <li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是‘获取’和合并。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li> </ol> <p>rebase可以给你提供一套清晰的代码历史。</p> <p>相反的, merge会给你一套乱七八糟的代码历史。当你看到这样的代码历史的时候，我相信你绝对没有心情去研究每一个历史对应的代码。</p> <h2 id="2、git-fetch-和git-pull的区别">2、git fetch 和git pull的区别</h2> <p>git pull = git fetch + git merge</p> <ul> <li><strong>相当于fetch的时候本地的master没有变化，但是与远程仓关联的那个版本号被更新了，我们接下来就是在本地合并这两个版本号的代码。</strong></li> </ul> <h2 id="37、git工作流">37、git工作流</h2> <ul> <li>集中式工作流</li> <li>功能开发工作流</li> <li>Gitflow工作流</li> <li>Forking工作流</li> </ul> <h2 id="切换分支">切换分支</h2> <p>git checkout -b xxx remotes/xxx</p> <p>3、显示项目的代码行数总和（已经删除文件显示为空）：</p> <pre><code class="language-git">git ls-files | xargs cat | wc -l\n</code></pre> <h2 id="查看修改了哪些内容">查看修改了哪些内容</h2> <p>git show hashcommit</p> <h2 id="块级元素和行内元素">块级元素和行内元素</h2> <p>可替换元素的性质同设置了display:inline-block的元素一致</p> <h2 id="settimeout不准的解决方案">Settimeout不准的解决方案</h2> <p>原因：时间循环机制，单线程</p> <h3 id="1、webworker">1、webworker</h3> <h3 id="2、获取当前时间进行修正">2、获取当前时间进行修正</h3> <h2 id="判断动画结束">判断动画结束</h2> <p>1、监听器webkitAnimationEnd</p> <p>2、同步记录相同时间</p> <p>3、vue中的transition的生命周期</p> <h2 id="微信小程序底层">微信小程序底层</h2> <p><strong>View视图层、App Service逻辑层，</strong>View层用来渲染页面结构，AppService层用来逻辑处理、数据请求、接口调用，它们在两个进程（两个Webview）里运行。 视图层和逻辑层通过<strong>系统层的JSBridage进行通信，</strong>逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p> <p>小程序的UI视图和逻辑处理是用多个webview实现的，逻辑处理的JS代码全部加载到一个Webview里面，称之为AppService</p> <p><img src="https://img2020.cnblogs.com/blog/1805573/202003/1805573-20200321110221708-1129307493.png" alt="img"></p> <p><strong>它封装了postMessage方法，实现webview之间的通信</strong></p> <p>wa的运行环境有3个平台，IOS的webkit（苹果开源的浏览器内核），Android的X5(QQ浏览器内核)，开发时用的nw.js（C++实现的web转桌面应用）</p> <p>wa的表现是半native app，半web app</p> <p><img src="https://img2020.cnblogs.com/blog/1805573/202003/1805573-20200321105908552-71997322.png" alt="img"></p> <p>wxml转化为html用的是 <a href="https://github.com/facebook/react%EF%BC%8C%E8%80%8Cwxss%E4%B8%8Ecss%E5%9F%BA%E6%9C%AC%E4%B8%8A%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E4%B8%8D%E5%90%8C">https://github.com/facebook/react，而wxss与css基本上没有任何不同</a></p> <p>依赖WeixinJSBridge.js这个脚本了</p> <p>然你就访问不了bom对象啦，当然其他很多对象也不能访问啦。这些对象如果访问，就是undefined。</p> <p>​ 为什么要这样做呢？还不是为了管理和监控嘛。如果这些对象你能访问，那么你就可以像操作通常的网页一样操作wa，这是绝对不被允许的，所以，你懂的。 </p> <p>JSBridge的作用就是让native可以调用web的js代码，让web可以调用原生的代码，实现数据通信，</p> <p>将Native端的接口封装成js接口 将Web端js接口封装成原生接口</p> <h2 id="浏览器渲染原理">浏览器渲染原理</h2> <p><em>display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</em></p> <p>DOM Tree：浏览器将HTML解析成树形的数据结构。</p> <p>　　CSS Rule Tree：浏览器将CSS解析成树形的数据结构。</p> <p>　　Render Tree: DOM和CSSOM合并后生成Render Tree。</p> <p>　　layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置。</p> <p>　　painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。</p> <h2 id="http请求头的内容">http请求头的内容</h2> <h2 id="http2是在https上实现的">HTTP2是在HTTPS上实现的</h2> <h2 id="for。。in能用break吗">for。。in能用break吗</h2> <h2 id="浏览器进程">浏览器进程</h2> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211110170818050.png" alt="image-20211110170818050"></p> <h1 id="算法基础">算法基础</h1> <h2 id="1、string字符串函数">1、String字符串函数</h2> <h3 id="11、数字转字符串">11、数字转字符串</h3> <pre><code class="language-c++">#include &lt;sstream&gt;\nstringstream ss;\nint n = 10;\nstring str;\nss&lt;&lt;n;\nss&gt;&gt;str;\n\n//2\n&lt;string&gt;\nto_string(n);\n</code></pre> <h3 id="12、字符串转数字">12、字符串转数字</h3> <pre><code class="language-c++">stringstream ss;\nss&lt;&lt;str;\nss&gt;&gt;n;\n</code></pre> <h2 id="3、dfsbfs">3、DFS/BFS</h2> <p>dfs：深度搜索</p> <p>用递归，设置一个访问标志。</p> <p>不断的深入，往一个方向递归。直到底部。找兄弟，对兄弟进行深度递归。</p> <p>bfs：</p> <p>设置一个访问标志，一个队列。</p> <p>顶点入队列。</p> <p>取出队列的点。找他的儿子。并入队列。</p> <p>再从队列取点。找儿子。</p> <h2 id="4、剪枝搜索">4、剪枝搜索</h2> <p>加一个if判断，遇到明显不符合的直接break；或者return。</p> <h2 id="5、记忆化搜索">5、记忆化搜索</h2> <p>把已经搜索过的结果保存起来。</p> <p>计算新的结果的时候，先在数组里面找有没有。</p> <p>如果有，就是已经计算过，不必再次计算，直接取就行。</p> <p>递归时候用。</p> <h2 id="滑动窗口算法">滑动窗口算法</h2> <p>左右双指针，相加，大于，右就移动，小于左就移动，直到符合条件</p> <p>移动一个区间，去遍历数组。</p> <h2 id="堆排序算法">堆排序算法</h2> <p>寻找无序数组中，第k大的值</p> <p>大根堆，大的往上，小的往下，进行呼唤，得到最大的，然后将这个最大的放到最后面。重复。类似冒泡排序。一次得到一个最大的。</p> <p><img src="https://img2018.cnblogs.com/blog/1250927/201910/1250927-20191007030336562-1007398686.gif" alt="img"></p> <h2 id="js算法专攻">js算法专攻</h2> <p>数组的创建</p> <pre><code class="language-js">let arr = [];\n\nvar arr = new Array(3);\n</code></pre> <p>将a.b.c.d.e转换成a:{b:{c:{d:}}} 2021.8.3字节面试</p> <pre><code class="language-js">var str = &#39;a.b.c&#39;;\nstr = str.split(&#39;.&#39;);//分割字符串\nvar obj = {};//创建对象\nvar idx = str.length -1;\nwhile(idx&gt;-1){  //循环\n  var temp = {};\n  temp[str[idx]] = obj;   //赋值\n  obj = temp;\n  idx--;\n}\n</code></pre> <p>数组的长度，</p> <pre><code class="language-js">arr.length\n</code></pre> <p>循环数组</p> <pre><code class="language-js">for(let i=0;i&lt;arr.length;i++){\n    \n}\n</code></pre> <p>数组添加值</p> <pre><code class="language-js">arr.push(); //一个参数或者多个参数\n</code></pre> <p>连接数组</p> <pre><code class="language-js">newarr = [...oldarr,...olabrr]\n</code></pre> <p>字符串分割</p> <pre><code>var str = &#39;adfaf&#39;;\nstr.split(&#39;&#39;);\n\n</code></pre> <h3 id="set">set</h3> <pre><code class="language-js">var s = new Set([a,b,c]);\ns.delect()\ns.add()\ns.has()\n\nfor (let item of s){}\n</code></pre> <p>Map</p> <pre><code class="language-js">var map = new Map([&#39;a&#39;,100],[&#39;b&#39;,19]);\nmap.get()\nmap.set()\nmap.delect()\n\nfor(var item of map){}\n</code></pre> <p>set去重数组</p> <pre><code class="language-js">const nums = [1,2,3,4,3,2,1]\n\nuniq1 = [...new Set(nums)]  //方法1\n\nuniq2 = Array.from(new Set(nums)) //方法2\n</code></pre> <h3 id="数组转字符串">数组转字符串</h3> <ol> <li></li> </ol> <pre><code class="language-js">arr.toString();\n//含有逗号，，，\n1，2，3\n</code></pre> <p>2、</p> <pre><code class="language-js">arr.join(&#39;&#39;);\n123\n//不含逗号\n\n//含逗号\narr.join();\n1,2,3\n\n//其他字符\narr.join(&#39;--&#39;);\n1--2--3\n</code></pre> <p>3、循环遍历数组，用+=拼接</p> <h3 id="字符串转数组">字符串转数组</h3> <p>1、str.split(&#39;&#39;)</p> <h3 id="字符串转数字">字符串转数字</h3> <p>str.parseInt()</p> <p>str.parseFloat()</p> <h3 id="数字转字符串">数字转字符串</h3> <p>toString</p> <p>次方</p> <p>Math.pow(2,31);</p> <p>开平方</p> <p>Math.sqr(2);</p> <h3 id="正则判断">正则判断</h3> <p>reg.test(&quot;adfafd&quot;)</p> <p>判断字符串是否符合正则表达式</p> <h3 id="正则断言">正则断言</h3> <pre><code class="language-js">有如下字符串：\n\n我爱你 我爱 爱 爱你\n\n如果要取出爱字，要求这个爱字后面有你，这个时候就要这么写，这就是 先行断言：\n\n&#39;我爱你 我爱 爱 爱你&#39;.match(/爱(?=你)/g) // [&quot;爱&quot;, &quot;爱&quot;]\n\n如果要求爱字后面没有你，那自然也有先行否定断言：\n\n&#39;我爱你 我爱 爱 爱你&#39;.match(/爱(?!你)/g) // [&quot;爱&quot;, &quot;爱&quot;] ，因为匹配相同...\n\n这个时候，如果要求爱字后面有你，前面还要有我，那就要用到后行断言了，如下：\n\n&#39;我爱你 我爱 爱 爱你&#39;.match(/(?&lt;=我)爱(?=你)/g) // [&quot;爱&quot;]\n\n最后，如果要求爱字前面没有我，后面也没有我，那就要用到先行否定断言和后行否定断言，如下：\n\n&#39;我爱你 我爱 爱 爱你&#39;.match(/(?&lt;!我)爱(?!你)/g) // [&quot;爱&quot;]\n</code></pre> <h2 id="动态规划详解">动态规划详解</h2> <p>递归暴力-&gt;带备忘录的递归-&gt;非递归的动态规划</p> <p>有base case，基础数据</p> <p>通过基础数据一步一步往后推导，通过状态转移方程来推导。</p> <h1 id="js字符串函数">js字符串函数</h1> <pre><code class="language-js">//字符串分割成数组\n//把参数对应的字符处分割，原字符消失\nstr.split(&quot;&quot;)\nstr= &quot;abbaba&quot;\nstr.split(&quot;a&quot;)\n//[&quot;&quot;,&quot;bb&quot;,&quot;b&quot;,&quot;&quot;]\n//a变成逗号，逗号前后都有空字符\n\n\n\n//字符串替换，可以是正则\nstr.replace(&quot;&quot;,&quot;&quot;);\n//字符串长度\nstr.length\n\n//查询子串，返回下标\nindex = str.indexOf(&quot;hell&quot;,0)\n第二个参数是开始的位置，0————length-1\n\n\n//查询子串，返回下表\nstr.search(正则)\n//查询子串，最后一个，返回下标\nstr.lasteIndexOf(&quot;xxx&quot;)\n//字符串匹配,可以是正则\nstr.match(&quot;xxx&quot;)\n\n\nvar mystr=&quot;hi,mynameisguoxiansheng6,33iswho?&quot;;\nvar matchStr=mystr.match(&quot;guo&quot;);    //guo\nvar matchStr1=mystr.match(&quot;Guo&quot;);    //null\nvar regexp1=/\\d+/g;\nvar regexp2=/guo/g;\nvar reg = /guo/gi; //不区分大小写\nvar regexp3=/guo/;\nvar matchStr2=mystr.match(regexp1);    //[&quot;6&quot;,&quot;33&quot;]\nvar matchStr3=mystr.match(regexp2);    //[&quot;guo&quot;]\nvar matchStr3=mystr.match(regexp3);    //[&quot;guo&quot;,index:11,input:&quot;hi,mynameisguoxiansheng6,33iswho?&quot;]\nmatchStr3.index    //11\nmatchStr3.input    //hi,mynameisguoxiansheng6,33iswho?\n\n/*如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。*/\n\n//字符串连接\nstr.concat(str2,str3)\n\n//字符串切割\n\nstr.slice(-3);//负数为倒数第几个\nstr.substring(3,7);//3到7\nstr.substr(3,7);//3开始，数7个\n\n/*1.slice() 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。\n　　2.substring()只能非负整数，截取起始结束位置同slice()函数一致。\n\n　　3.substr()与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。*/\n\nslice()可以用于数组！\n\n//数组转字符串\narr.join(&#39;&#39;)\n\n//对象转json\nJSON.stringify()\n\n//JSON字符串解析成对象\nJSON.parse()\n</code></pre> <h1 id="数组函数">数组函数</h1> <pre><code class="language-js">1\\\narr.toString();//含逗号\n2、\narr.join(&#39;&#39;);//不含逗号\n3、\narr.pop()\n4、\narr.push()\n5\\\narr.shift();//删除首个数组元素，索引也向左移,返回被删除的元素\n6、\narr.unshift();//在开头添加一个元素，索引向右移，返回新数组长度\n7、\narr.lenght\n8\\\ndelete arr[1];//把arr【1】的元素删除，变成undefined\n9、\n//插入元素到a处，并删除a向后的b个元素，插入的元素为x1，x2.。。\narr.splice(a,b,x1,x2,x3);\n//若没有需要插入的元素，就可以当作删除功能\narr.splice(0,1);//删除第一个元素，直接删除掉所在的位置\n\n在a的前面插入\n\n\n10、连接数组\narr1\narr2\narr3\nlet newarr = arr1.concat(arr2);\nlet newarr2 = arr1.concat(arr2,arr3);//可以多个参数\n\n11、裁剪数组\n//一个参数\narr.slice(a);//从元素a开始，切出后面的元素，返回新的数组，不影响原来的数组，包括a。\na可以是负数，表示倒数第几个。\narr（-2）；倒数第二个开始，包含本身\n\n\n//两个参数\narr.slice(a,b);//从a开始（包括a），选到b，不包括b。\n\n\n12、排序\narr.sort()\n\n</code></pre> <h2 id="对象的创建">对象的创建</h2> <pre><code class="language-js">let obj = {};\nobj[&#39;key&#39;] = &quot;123&quot;;   \n/*\n  {\n    key: 123\n  }\n*/\n</code></pre> <h3 id="dom节点的父节点">dom节点的父节点</h3> <pre><code class="language-js">node.parentNode\n</code></pre> <p>a.b.c.d转对象{a:b:c:d}</p> <pre><code class="language-js">function namespace(oNamespace, sPackage) {\n      const arr = sPackage.split(&#39;.&#39;);\n      let o = oNamespace;\n      for(let i = 0;i&lt;arr.length ;i++) {\n        // 如果不是对象，则使它成为对象\n        if(typeof o[arr[i]] != &#39;object&#39;) {\n          o[arr[i]] = {};\n        }\n         o = o[arr[i]];//关键点\n      }\n      return oNamespace;\n}\n</code></pre> <h3 id="unicode编码">Unicode编码</h3> <pre><code class="language-js">str.charCodeAt(index);\n返回unicode编码数字\n</code></pre> <h3 id="进制">进制</h3> <pre><code class="language-js">parseInt(&quot;ff&quot;,16);//16指的是第一个参数的进制，输出都是十进制。\n=&gt;255\n\ntoString(16);//输出16进制\n</code></pre> <h2 id="防抖函数">防抖函数</h2> <pre><code class="language-js">function debounce(fn,delay) {\n    let timer = null;\n    return function(){\n        let content = this;\n        let args = arguments;\n        clearTimeout(timer)\n        timer = setTimeOut(function(){\n            fn.apply(content,args)\n        },delay)\n    }\n}\n\nfunction a(){\n    let timer = null;\n    if(timer == null){\n        let fangdou = function(){\n        clearTimeOut(timer)\n        timer = setTimeOut(function(){\n            \n          //...函数内容\n        }, 500)\n    }\n    }\n    \n    \n    \n}\n</code></pre> <h2 id="节流函数">节流函数</h2> <pre><code class="language-js">function throttle(fn,delay) {\n    let timer = null;\n    return function() {\n        let content = this;\n        let args = arguments;\n        while(!time) {\n            timer = setTimeOut(function(){\n                fn.appy(content,args);\n                timer = null\n            },delay)\n        }\n    }\n}\n</code></pre> <h2 id="找字符串中出现最多的字符">找字符串中出现最多的字符</h2> <pre><code class="language-js">function fn(str) {\n    let map = new Map();\n    for(let i =0;i&lt;str.length;i++) { \n        if(map.has(str[i])) {\n            let count = map.get(str[i]) + 1;\n            map.set(str[i],count)\n        }else{\n            map.set(str[i],1)\n        }\n    }\n    let arr = Array.from(map);\n    arr.sort(function(a,b){b[1]-a[1]})\n    return arr[0][0];\n}\nfn(&quot;1231231&quot;)\n</code></pre> <h2 id="函数柯里化">函数柯里化</h2> <pre><code class="language-js">// 普通的add函数\nfunction add(x, y) {\n    return x + y\n}\n\n// Currying后\nfunction curryingAdd(x) {\n    return function (y) {\n        return x + y\n    }\n}\n\nadd(1, 2)           // 3\ncurryingAdd(1)(2)   // 3\n\n\n//确定参数的函数柯里化实现\n \nfunction sum(a,b,c,d){\n    return a+b+c+d\n}\nfunction curry(fn){\n    return function sum(...args){\n        if(args.length&lt;fn.length){ // 判断接受的参数是否小于函数的参数长度\n           return function(){  // 参数不够长度，再次接受传递参数\n                return sum(...args,...arguments)  \n           }\n        }\n        return fn(...args)// 不要求改变this,\n    }\n}\nlet curried = curry(sum)\nconsole.log(curried(1)(2)(3)(4))//10\nconsole.log(curried(1,2)(2,4))//9\n\n\n\n// 实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) = 6;\nadd(1, 2, 3)(4) = 10;\nadd(1)(2)(3)(4)(5) = 15;\n\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = Array.prototype.slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var _adder = function() {\n        if(...arguments.length != 0){\n            // ...运算符进行脱壳\n            _args.push(...arguments);\n            return _adder;\n        }else {\n            let res =  _args.reduce(function (a, b) {\n              return a + b;\n            });\n            return res;\n        }\n        \n    };\n    return _adder;\n}\n\nadd(1)(2)(3)                // 6\nadd(1, 2, 3)(4)             // 10\nadd(1)(2)(3)(4)(5)          // 15\nadd(2, 6)(1)   \n</code></pre> <h2 id="箭头函数">箭头函数</h2> <p>一个参数可以省略括号</p> <p>两个参数以上需要括号</p> <p>（）=&gt; {}</p> <p>a =&gt; {}</p> <p>(a,b) = {}</p> <p>this的作用域由上下文确定</p> <p>简洁代码</p> <h2 id="finally和异常处理">finally和异常处理</h2> <p>finally必然执行</p> <h2 id="in和hasownproperty的区别"><strong>in和hasOwnProperty的区别</strong></h2> <ul> <li>in判断的是对象的所有属性，包括对象实例及其原型的属性；</li> <li>hasOwnProperty是判断对象实例的是否具有某个属性,不包含原型对象的属性</li> </ul> <h2 id="数组的map函数">数组的.map函数</h2> <pre><code class="language-js">let arr = [1,2,3,4]\nnewarr = arr.map(item=&gt; {return item*2})\n//2,3,4,8\n\nmap函数对每个元素进行处理，返回一个新的数组。\n\n\nmap(value,index,arr)\nvalue是元素的值，index是元素的下标，arr是元素的数组\n</code></pre> <h2 id="数组增加一个对象">数组增加一个对象</h2> <pre><code class="language-js">arr.push({\n    key: _key\n    value: _value\n})\n\n//取对象的值,用.点来获取\nkey = arr[i].key\n\n</code></pre> <h2 id="类的定义，结构体的使用">类的定义，结构体的使用</h2> <pre><code class="language-js">\nclass node {\n    constructor(_key,_value) {\n        this.key = _key,\n        this.value = _value\n    }\n    \n}\ntree = []\ntree.push(new node(&quot;1&quot;,&quot;23&quot;))\n\n</code></pre> <h2 id="babel转换流程">babel转换流程</h2> <p>es6生成ast抽象语法树，再转换成es5</p> <h2 id="虚拟dom是什么？">虚拟DOM是什么？</h2> <p>因为操作真实dom的开销是很大的，所以就有了这个虚拟dom。</p> <p>真实dom是树形结构，虚拟dom是对象结构。</p> <p>vue把模板抽象成ast，再生成render函数，生成虚拟dom。</p> <p>我们先根据真实DOM生成一颗<code>virtual DOM</code>，当<code>virtual DOM</code>某个节点的数据改变后会生成一个新的<code>Vnode</code>，然后<code>Vnode</code>和<code>oldVnode</code>作对比，发现有不一样的地方就直接修改在真实的DOM上，然后使<code>oldVnode</code>的值为<code>Vnode</code>。</p> <p><code>VNode</code>和<code>oldVNode</code>都是对象</p> <h2 id="diff算法是什么？">diff算法是什么？</h2> <p>计算出虚拟dom真正变化的部分，并只针对该部分进行真实dom的操作，而不是渲染整个页面。</p> <p>时间复杂度为O（n）</p> <p>一个真实dom，一个old虚拟dom，一个new虚拟dom</p> <p>old虚拟dom和new虚拟dom进行对比</p> <p>1.调用patch函数比较Vnode和OldVnode,如果不一样直接return Vnode即将Vnode真实化后替换掉DOM中的节点</p> <p>2.如果OldVnode和Vnode值得进一步比较则调用patchVnode方法进行进一步比较，分为以下几种情况：</p> <p>Vnode有子节点，但是OldVnode没有，则将Vnode的子节点真实化后添加到真实DOM上</p> <p>Vnode没有子节点，但是OldVnode上有，则将真实DOM上相应位置的节点删除掉</p> <p>Vnode和OldVnode都有文本节点但是内容不一样，则将真实DOM上的文本节点替换为Vnode上的文本节点</p> <p>Vnode和OldVnode上都有子节点，<strong>需要调用updateChildren函数进一步比较</strong></p> <h2 id="数据劫持怎么实现？">数据劫持怎么实现？</h2> <p>Object.defineProperty()来实现数据劫持的。</p> <pre><code class="language-js">var Book = {}\nvar name = &#39;&#39;;\nObject.defineProperty(Book, &#39;name&#39;, {\n  set: function (value) {\n    name = value;\n    console.log(&#39;你取了一个书名叫做&#39; + value);\n  },\n  get: function () {\n    return &#39;《&#39; + name + &#39;》&#39;\n  }\n})\n \nBook.name = &#39;vue权威指南&#39;;  // 你取了一个书名叫做vue权威指南\nconsole.log(Book.name);  // 《vue权威指南》\n\n//set在设置值的时候触发通知view改变，get在读取值的时候触发通知model改变\n</code></pre> <p>设置一个监听器，Observer</p> <p>订阅者Watcher</p> <p>管理器Dep</p> <p>解析器Compile</p> <h2 id="观察者模式（">观察者模式（</h2> <p>当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新</p> <p>。</p> <h2 id="发布订阅模式）">发布订阅模式）</h2> <p>发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p> <h2 id="数字精度问题">数字精度问题</h2> <p>在 JavaScript 中不论小数还是整数只有一种数据类型表示，这就是 Number 类型，其遵循 IEEE 754 标准，使用双精度浮点数（double）64 位（8 字节）来存储一个浮点数（所以在 <strong>JS 中 1 === 1.0</strong>）</p> <p>0.1 + 0.2 ！= 0.3</p> <p>解决： 截取小数位，或乘以10再除以十</p> <pre><code class="language-js">let a = 0.1 + 0.2;\na.toFixed(3);  //0.300三位小数\n</code></pre> <h2 id="js原型链">js原型链</h2> <p>proto，prototype</p> <p>1.对象有属性__proto__,指向该对象的构造函数的<strong>原型对象。</strong> 2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。</p> <p>构造函数也有prototype</p> <p>每个函数都有一个prototype，指向一个对象，原型对象</p> <pre><code class="language-js">Function.__proto__ === Function.prototype; // true\nObject.__proto__ === Function.prototype; // true，，Object是通过function来创建的\nFunction.prototype.__proto__ === Object.prototype; // true\nObject.prototype.__proto__ === null;   \n\nObject原型是最底层的，Object原型的__proto__指向空\n</code></pre> <p>对象的隐式原型的值为其对应构造函数的显式原型的值 fn.<strong>proto</strong> === Function.prototype 函数的prototype属性是定义时自动添加的。默认为{} 对象的__proto__属性是创建对象时自动添加的，默认值为其构造函数的prototype Object.prototype.<strong>proto</strong> === null</p> <p>函数的proto原型对象都是，Function类。</p> <p>对象的proto就是该对象的类。</p> <p>函数还有prototype，是该函数原型对象（类）。</p> <p>类也是一个对象。</p> <p><img src="https://img-blog.csdnimg.cn/2019022822050917.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzIyMDk3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p> <p>一个是显性原型prototype，一个是隐形原型__proto__ ，proto指向其构造函数的prototype属性。函数和对象的构造函数都创建于Function，指向Function.prototype。</p> <p>函数也是一个对象</p> <p>Person.prototype，，Object。prototype其实就是一个类，就是原型对象，就是class。</p> <p>他的构造函数指向Person()，，Person()的prototype指向Person.prototype原型对象。</p> <p>对象实例person的__proto__继承于类Person，也就是Person。prototype原型对象，所以指向它。</p> <pre><code class="language-js">Function.prototype.a = ()=&gt;{\n    console.log(1)\n}\nObject.prototype.b = ()={\n    console.log(2)\n}\nfunction A(){};\nvar a = new A();\n\na.a();//error\na.b();2\n\n//因为A.__proto__ === Function.prototype\n//a.__proto__ === A.prototype !== A.__proto__\n</code></pre> <h2 id="斐波那契数列">斐波那契数列</h2> <h3 id="1递归法n2的复杂度">1\\递归法(n2的复杂度)</h3> <pre><code class="language-js">function fibonacci(n) {\n    if(n&lt;2) {\n        return n;\n    }\n    return fibonacci(n-1) + fibonacci(n-2);\n}\n</code></pre> <p>2、循环法O（n）</p> <pre><code class="language-js">//从前面往后面算\nfor(let i =2;i&lt;=n;i++){\n    fibN = fibone + fibtwo;  //第三个等于前两个相加\n    fibtwo = fibone            //往后退一布，从fibN倒数第二个等于原来的倒数第一fibnoe\n    fibone = fibN              //往后退一步，倒数第一个等于新的fibN\n}\n//循环n-2次，到达n位\n</code></pre> <h2 id="class的声明不会提升">class的声明不会提升</h2> <h1 id="牛客面经合集">牛客面经合集</h1> <h2 id="1、自我介绍">1、自我介绍</h2> <h2 id="6、介绍一下项目，项目优化和难点">6、介绍一下项目，项目优化和难点</h2> <h2 id="7、js基础类型">7、js基础类型</h2> <pre><code class="language-js">\n//8种\nobject (function\\array)\n\n\nnull\nNumber\nString\nboolean\nundefined\nbigint\nsymbol\n\ntypeof function(){}\n&quot;function&quot;\ntypeof null\n&quot;object&quot;\ntypeof undefined\n&quot;undefined&quot;\ntypeof BigInt\n&quot;function&quot;\ntypeof [1,2]\n&quot;object&quot;\n</code></pre> <h2 id="1、反问">1、反问</h2> <h2 id="1、tcp三次握手四次挥手">1、tcp三次握手\\四次挥手</h2> <p>客户端发送syn连接请求，服务端回应ack确认和syn请求，客户端回应ack确认。</p> <p>为什么四次挥手？服务端回应的ack和fin断开请求要分开发送因为服务端可能还有数据需要发送，还不能断开。</p> <p>为什么要等2msl？因为客户端不知道服务端是否收到的自己的ack确认。要等2msl，两个报文存在的最大周期。如果没有收到服务端的重传，就再次发送。</p> <h2 id="1、栈和堆">1、栈和堆</h2> <p>基本数据类型在栈中，引用类型在堆中</p> <h2 id="in和hasownproperty的区别-1">in和hasOwnProperty的区别</h2> <p>in包含原型链上的</p> <p>hasOwnProperty只算自己的</p> <h2 id="objectkeys和object。getownpropertynames的区别">Object.keys()和Object。getOwnPropertyNames的区别</h2> <p>keys返回自身的可枚举的属性</p> <p>getOwnPropertyNames返回自身的所有属性。</p> <h2 id="instranceof和typeof的区别">instranceof和typeof的区别</h2> <p>instranceof 返回true或false。找原型链上的，是否是它的对象。</p> <p>typeof返回它的原型</p> <h2 id="为什么基本类型在栈中，引用类型在堆中">为什么基本类型在栈中，引用类型在堆中</h2> <p>基本类型是确定的不可变的，大小的确定的</p> <p>引用类型是大小不确定的，而且引用类型比较大</p> <p>引用类型的数据的<strong>地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据。</strong></p> <h2 id="for循环优化">for循环优化</h2> <p><strong>2.优化版for循环</strong></p> <p>使用变量，将长度缓存起来，<strong>避免重复获取长度</strong>，数组很大时优化效果明显</p> <pre><code>for(var j = 0,len = arr.length; j &lt; len; j++){\n    console.log(arr[j]);\n}\n</code></pre> <h2 id="for--in和for--of--foreach的区别">for--in和for--of--foreach的区别</h2> <p>for。。。in可以遍历数组，也可以遍历对象</p> <p>for。。of不能遍历对象。</p> <p>for。。in从0开始遍历</p> <p>for...in 循环不仅遍历数字键名，还会遍历手动添加的其它键，甚至包括原型链上的键。for...of 则不会这样</p> <pre><code class="language-js">//for...in遍历的是下标\nfor (var index in myArray) {\n  console.log(myArray[index]);\n}\n\nvar myObject={\n　　a:1,\n　　b:2,\n　　c:3\n}\nfor (var key in myObject) {\n  console.log(key);//a,b,c\n}\n\n\n//for...of遍历的是元素本身\nvar myArray=[1,2,4,5,6,7]\nmyArray.name=&quot;数组&quot;;\nfor (var value of myArray) {\n  console.log(value);\n}\n</code></pre> <p>forEach（）是是数组的方法，后面跟一个函数</p> <h2 id="怎么判断是pc端还是移动端，横屏还是竖屏">怎么判断是pc端还是移动端，横屏还是竖屏</h2> <p>navigator.userAgent标识</p> <p>clientwidth宽度判断</p> <h2 id="z-index的理解">z-index的理解</h2> <p>1、如果不设定position，z-index不生效。文档流后面的节点会覆盖在前面的节点之上。</p> <p>2、如果position为static（html元素的默认值就是static），依旧是文档流后面的覆盖前面的</p> <p>，z-index不生效</p> <p>3、如果将 position 设为 relative (相对定位)，absolute (绝对定位) 或者 fixed (固定定位)，这样的节点会覆盖没有设置 position 属性或者属性值为 static 的节 点，说明前者比后者的默认层级高。</p> <p>4、b覆盖a，，a-1覆盖b</p> <pre><code class="language-html"> &lt;div id=&quot;a&quot;&gt;\n     &lt;div id=&quot;a-1&quot; style=&quot;position:relative;&quot;&gt;A-1&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=&quot;b&quot;&gt;B&lt;/div&gt;\n</code></pre> <p>5、 z-index 属性仅在节点的 position 属性为 relative, absolute 或者 fixed 时生效.</p> <p>6、从父原则。z-index与同级元素进行比较，子节点多大都没用</p> <p><img src="https://images2015.cnblogs.com/blog/1015026/201608/1015026-20160826174206944-994632417.jpg" alt="img"></p> <h3 id="bg负数z-indexblockfloatinline-blockz-index：auto、0正数z-index">bg&lt;负数z-index&lt;block&lt;float&lt;inline-block&lt;z-index：auto、0&lt;正数z-index</h3> <h2 id="position的理解">position的理解</h2> <p>position：relative；偏移后，盒子还是留在文档流原来的位置的。</p> <p>position: sticky; 解决ios键盘拉出导致页面向上滚动的问题。在可视区域时表现成relative，滚动超出可视区时，表现成fixed；</p> <p>position：fixed；相对浏览器窗口定义，与html无关；</p> <p>position：absolute；父元素已定位就相对父元素，否则相对html标签定位，不是浏览器窗口。</p> <h2 id="margin负值和position：relative偏移、和tranform的区别；">margin负值和position：relative偏移、和tranform的区别；</h2> <p>margin负值偏移，文档流的位置也会偏移，影响后面紧跟着的元素。</p> <p>position偏移，文档流盒子的位置不变，还留在原地。</p> <p>transform偏移：文档流盒子的位置不变，还留在原地占位，实际表现偏移而已。</p> <h2 id="bind、call、同一行多次调用时，返回第一次调用的this">bind、call、同一行多次调用时，返回第一次调用的this</h2> <h2 id="不知道高度居中方法">不知道高度居中方法</h2> <p>position偏移50%，再用transform偏移-50%。</p> <p>flex布局、grid布局</p> <h2 id="diff算法的时间复杂度，n3">diff算法的时间复杂度，n3</h2> <p>删除，插入，替换都遍历一遍。</p> <h2 id="scoped底层">scoped底层</h2> <p>加一个唯一前缀样式选择器，加一个唯一属性，用属性选择器</p> <ul> <li>给HTML的DOM节点加一个不重复<code>data</code>属性(形如：<code>data-v-a2a7b732</code>)来表示他的唯一性</li> <li>在每句css选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如<code>[data-v-a2a7b732]</code>）来私有化样式</li> </ul> <h2 id="html解析、js、css阻塞（浏览器加载）">html解析、js、css阻塞（浏览器加载）</h2> <p>当浏览器获得一个html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。 <strong>加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。</strong> 遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。<strong>这是异步请求，并不会影响html文档进行加载。</strong> 但是当文档加载过程中遇到js文件，<strong>html文档会挂起渲染</strong>（加载解析渲染同步）的线程，不仅要<strong>等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。</strong></p> <ul> <li>JS 会阻塞后续 DOM 解析以及其它资源(如 CSS，JS 或图片资源)的加载。</li> </ul> <p>css会阻塞 后续JS 文件的执行（原因之一是，js执行代码可能会依赖到css样式。css<strong>只阻塞执行而不阻塞js的加载）。</strong></p> <h2 id="浏览器的事件机制">浏览器的事件机制</h2> <p>事件传播的三个阶段：捕获、目标对象、冒泡</p> <p><img src="https://upload-images.jianshu.io/upload_images/3748553-8a2a00abefbffd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/707/format/webp" alt="img"></p> <p>事件对象从window逐层派发到目标对象，冒泡就是派发的逆过程。</p> <h3 id="事件委托">事件委托</h3> <p>我们把事件处理程序添加到其父元素（在例子中就是ul）上，然后按照事件冒泡的规则，点击到子元素（li）上的时间就会一级一级冒到父元素上。如下：</p> <p><strong>我们将事件处理器绑定到一个父级元素上</strong>，<strong>避免了频繁的绑定多个子级元素,<strong>依靠</strong>事件冒泡</strong>机制与<strong>事件捕获</strong>机制，子级元素的事件将委托给父级元素。</p> <p>如果父div有click事件, div里的span也有click事件, 默认你点span的时候父div的click事件也会被激发, 如果你不想激发父div的click事件, 就在span的click事件中stopPropagation(), 就是这样</p> <h3 id="阻止事件冒泡">阻止事件冒泡</h3> <p>调用 <code>stopPropagation</code> 严格来说不是阻止冒泡，是阻止事件传播，捕获阶段也可以直接阻止</p> <ul> <li><p>事件接口还有一个 <code>cancelBubble</code> 因历史原因的 stopPropagation 的别名，给其赋值 true 可以达到调用 stopPropagation 同样的效果。</p> </li> <li><p>调用 <code>preventDefault</code> 则是阻止默认事件。</p> </li> <li><pre><code class="language-js">e=e||window.event;\n        if(e.stopPropagation){\n            e.stopPropagation();//其它浏览器\n        }else{\n            e.cancelBubble=true;//IE浏览器\n        }\n</code></pre> </li> </ul> <h2 id="函数没有返回值时，返回undefined">函数没有返回值时，返回undefined</h2> <h2 id="依赖注入">依赖注入</h2> <p>Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。</p> <p>缺点：增加了耦合，</p> <p>provide和inject</p> <p>provide选项允许我们指定我们想要提供给后代组件的数据/方法。</p> <pre><code class="language-js">...\ndata() {\n return {\n  msg: ‘I am origin component data’\n }\n},\nprovide: function() {\n return {\n  getData() {\n   console.log(‘hi，I come from origin component’)\n  }\n },\n msg: this.msg\n},\n...\n</code></pre> <p>inject可以在任何后代组件使用来接受我们在祖先指定的数据/方法 后代组件：</p> <p>...</p> <pre><code class="language-js">inject: [‘getData’, ‘msg’],\ncreated() {\n this.init()\n},\nmethods: {\n init() {\n  console.log(this.msg),\n  this.getData()\n }\n}\n...\n</code></pre> <h2 id="兄弟组件通讯busjs">兄弟组件通讯bus.js</h2> <h2 id="弹窗禁止滚动">弹窗禁止滚动</h2> <pre><code class="language-js">//1\\设置overflow\nhtml.style.overflow=&quot;hidden&quot;;\nhtml.style.height=&quot;100%&quot;;\nbody.style.overflow=&quot;hidden&quot;;\nbody.style.height=&quot;100%&quot;;\n\n//2\n1、重叠的两个页面元素，z-index值更高的会优先触发事件监听，从而可以在此控制是否让事件流继续；2、移动端滚动的touch事件，基于事件流。\n//在黑幕层阻挡touch事件\n                shield.addEventListener(&quot;touchstart&quot;,function(e){\n                    e.stopPropagation();\n                    e.preventDefault();\n                },false);\n</code></pre> <h2 id="nexttick">nexttick</h2> <p>执行时机：当前宏任务结束后，<code>nextTick</code>总是要比<code>setTimeout</code>先要执行。</p> <p>等当前调用栈清空，再执行</p> <p><strong>看浏览器的支持情况：</strong></p> <p>Vue 在内部尝试对异步队列使用原生的<code>Promise.then</code>和 <code>MessageChannel</code>，如果执行环境不支持，会采用<code>setTimeout(fn, 0)</code>代替。</p> <p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p> <p>Vue 实现响应式并<strong>不是数据发生变化之后 DOM 立即变化</strong>，</p> <p>Vue 在修改数据后，视图不会立刻更新，而是等<strong>同一事件循环</strong>中的所有数据变化完成之后，再统一进行视图更新。</p> <pre><code class="language-js">//改变数据\nvm.message = &#39;changed&#39;\n\n//想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新\nconsole.log(vm.$el.textContent) // 并不会得到&#39;changed&#39;\n\n//这样可以，nextTick里面的代码会在DOM更新后执行\nVue.nextTick(function(){\n    console.log(vm.$el.textContent) //可以得到&#39;changed&#39;\n})\n\n\nvar vm = new Vue({\n    el: &#39;#example&#39;,\n    data: {\n        msg: &#39;123&#39;\n    }\n})\nvm.msg = &#39;new message&#39;\nconsole.log(1)\nconsole.log(vm.$el.innerText)\nconsole.log(2)\nVue.nextTick(()=&gt;{\n    console.log(vm.$el.innerText)\n})\nconsole.log(3)\n&lt;/script&gt;\n1\n123\n2\n3\nnew message\n</code></pre> <pre><code class="language-js">new Promise((resolve) =&gt; {\n    console.log(1);\n    \n    process.nextTick(() =&gt; {\n        console.log(2);\n    });\n    \n    resolve();\n    \n    process.nextTick(() =&gt; {\n        console.log(3);\n    });\n    \n    console.log(4);\n}).then(() =&gt; {\n    console.log(5);\n});\n \nsetTimeout(() =&gt; {\n    console.log(6);\n}, 0);\n \nconsole.log(7);\n复制代码\n1,4,7,2,3,5,6\n</code></pre> <pre><code class="language-js">\n//重点\nclick(){\n         let btn = this.$refs.btn;\n\n         Promise.resolve().then(() =&gt; {\n            console.log(1, btn.$el.innerText);\n         });\n         this.$nextTick(() =&gt; {\n            console.log(2, btn.$el.innerText);\n         });\n\n         console.log(3);\n         this.name = &#39;after&#39;;\n         console.log(4);\n\n         Promise.resolve().then(() =&gt; {\n            console.log(5, btn.$el.innerText);\n         });\n         this.$nextTick(() =&gt; {\n            console.log(6, btn.$el.innerText);\n         });\n\n        //你以为是这样：3， 4，视图更新，1，2，5，6   \n        // 或者是这样 ：3， 4，视图更新，1，2，6，5\n \n    、、第一次有数据改变，调用栈清空后，立即执行tick回调，所有tick回调都放在一个回调里执行\n        // 其实是这样 ：3， 4，2，视图更新，6，1，5//这行结果又无法重现了\n    、、第二次没有数据改变，先打印1，轮到tick回调，打印2，6，最后才是5\n        // 其实是这样 ：3， 4，1，2，视图更新，6，5\n       }\n</code></pre> <h1 id="es6新增的数组方法">ES6新增的数组方法</h1> <h2 id="1foreach方法">1.forEach()方法</h2> <p>forEach()方法是循环遍历数组中的每一项，把符合条件的筛选出来成为一个新的数组。</p> <p>let arr = [1,33,44,22,6,9] let ary = [] arr.forEach(function(v, i){ if (v &gt; 10) { ary.push(arr[i]) }<br>}) console.log(ary) 1</p> <h2 id="2some方法">2.some()方法</h2> <p>some()方法找到符合条件的就返回true,如果没有找到符合条件的就返回false。</p> <pre><code class="language-js">let arr = [1,33,44,22,6,9]\nlet ary = arr.some(function(v){\n  return v &gt; 10\n})\nconsole.log(ary)\n</code></pre> <h2 id="3filter方法">3.filter()方法</h2> <p>filter()方法是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组。</p> <pre><code class="language-js">let arr = [1,33,44,22,6,9]\nlet ary = arr.filter( v =&gt; v &gt; 10)\nconsole.long(ary)\n</code></pre> <h2 id="4find方法">4.find()方法</h2> <p>find()方法是查找数组中符合条件的第一个元素，直接将这个元素返回出来</p> <pre><code class="language-js">let arr = [1,33,44,22,6,9]\nlet ary = arr.find(v =&gt; v &gt; 10)\nconsole.log(ary)\n</code></pre> <h2 id="5findindex方法">5.findIndex()方法</h2> <p>findIndex()方法是查找数组中符合条件的第一个元素的索引，索引从0开始</p> <p>let arr = [1,33,44,22,6,9] let ary = arr.findIndex(v =&gt; v &gt; 10） console.log(ary)</p> <h2 id="6includes方法">6.includes()方法</h2> <p>includes()方法是查看数组中是否存在这个元素，如果存在就返回true,如果不存在就返回false</p> <p>let arr = [1,33,44,22,6,9] let ary = arr.includes(22) console.log(ary)</p> <h2 id="7、reduce">7、reduce()</h2> <pre><code class="language-js">array.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n</code></pre> <pre><code class="language-js">// 1.数组求和\nvar arr = [1,5,8,6,15,78,65,25,48,55]\nvar sum = arr.reduce(function(total,currentValue){\n  return total+currentValue;\n});\nconsole.log(sum);//306\nvar eachSum = 0;\narr.forEach(function(currentValue){\n  eachSum += currentValue;\n})\nconsole.log(eachSum);//306\n</code></pre> <h1 id="es新增字符串方法">es新增字符串方法</h1> <h2 id="1、includes">1、includes</h2> <p>返回bool，判断是否包含字串</p> <pre><code class="language-js">let s = &#39;Hello world!&#39;;\n\ns.startsWith(&#39;Hello&#39;) // true\ns.endsWith(&#39;!&#39;) // true\ns.includes(&#39;o&#39;) // true\nlet s = &#39;Hello world!&#39;;\n\ns.startsWith(&#39;world&#39;, 6) // true\ns.endsWith(&#39;Hello&#39;, 5) // true\ns.includes(&#39;Hello&#39;, 6) // false\n注意：使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。\n</code></pre> <h2 id="2、startswith、endswith">2、startsWith()、endsWith()</h2> <p>判断是否以改字符串开头，结尾</p> <h2 id="3、repeat">3、repeat()</h2> <p>重复，</p> <pre><code class="language-js">&#39;x&#39;.repeat(3) // &quot;xxx&quot;\n&#39;hello&#39;.repeat(2) // &quot;hellohello&quot;\n&#39;na&#39;.repeat(0) // &quot;&quot;\n</code></pre> <h2 id="4、补全padstart">4、补全padStart()</h2> <pre><code class="language-js">&#39;x&#39;.padStart(5, &#39;ab&#39;) // &#39;ababx&#39;\n&#39;x&#39;.padStart(4, &#39;ab&#39;) // &#39;abax&#39;\n\n&#39;x&#39;.padEnd(5, &#39;ab&#39;) // &#39;xabab&#39;\n&#39;x&#39;.padEnd(4, &#39;ab&#39;) // &#39;xaba&#39;\n</code></pre> <h2 id="5、去除空格trim">5、去除空格trim</h2> <pre><code class="language-js">const s = &#39;  abc  &#39;;\n\ns.trim() // &quot;abc&quot;\ns.trimStart() // &quot;abc  &quot;\ns.trimEnd() // &quot;  abc&quot;\n</code></pre> <h2 id="commit合并">commit合并</h2> <ul> <li><p>在终端输入: <code>git rebase -i HEAD~2</code> 这里的 <code>HEAD~2</code> 表示合并最近两次的提交, 如果想合并最近三次的提交修改为: <code>git rebase -i HEAD~3</code></p> </li> <li><p>通过git rebase -i 将本地的多次提交合并为一个，以简化提交历史。<strong>本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)</strong></p> </li> </ul> <p>pick：保留该commit（缩写:p）</p> <p>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</p> <p>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</p> <p>squash：将该commit和前一个commit合并（缩写:s）</p> <p>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</p> <p>exec：执行shell命令（缩写:x）</p> <p>drop：我要丢弃该commit（缩写:d）</p> <p>作者：liqingbiubiu 链接：<a href="https://www.jianshu.com/p/4a8f4af4e803">https://www.jianshu.com/p/4a8f4af4e803</a> 来源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p> <h2 id="类型转换">~~类型转换</h2> <p>转换成数字</p> <h2 id="轮播图">轮播图</h2> <p>1、每一张单独进行移动</p> <p>2、假如是三张图A、B、C你要做的scrollview实际上应该是五张的大小顺序是C、A、B、C、A。初始偏移量设置到第二张，监听scrollview滑动事件。判断偏移量。当偏移量在第一张时将偏移量修改到第四张，当偏移量在第五张时将偏移量调整到第二章。这样在循环时比较流畅。</p> <p>1，绝对定位在同一个位置，使用opacity透明度控制， 2，使用position,margin,translate进行移动一整行，头尾复制一个，到最后的时候transition设置为0， 3，对每个图片img进行控制，移动。 4，使用css动画，animation进行控制，需要写多个动画。animation-play-state,用hover来控制</p> <h2 id="纯函数">纯函数</h2> <p>一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。这么说肯定比较抽象，</p> <pre><code class="language-js">const a = 1\nconst foo = (b) =&gt; a + b\nfoo(2) // =&gt; 3\n这个不是纯函数\n</code></pre> <h2 id="tostring方法">toString方法</h2> <p>1. </p> <p>Number、array、boolean、string、date，，重写了object的tostring方法，所以可以打印出对应的字符串。</p> <p><code>**toString()**</code> 方法返回一个表示该对象的字符串。</p> <p>。默认情况下，<code>toString()</code> 方法被每个 <code>Object</code> 对象继承。如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 &quot;[object <em>type</em>]&quot;，其中 <code>type</code> 是对象的类型。以下代码说明了这一点：</p> <pre><code class="language-js">var toString = Object.prototype.toString;\n\ntoString.call(new Date); // [object Date]\ntoString.call(new String); // [object String]\ntoString.call(Math); // [object Math]\n\n//Since JavaScript 1.8.5\ntoString.call(undefined); // [object Undefined]\ntoString.call(null); // [object Null]\nObject.prototype.toString.call(null)\n&quot;[object Null]&quot;\nObject.prototype.toString.call(1)\n&quot;[object Number]&quot;\nObject.prototype.toString.call(1n)\n&quot;[object BigInt]&quot;\ntoString([])\n&quot;[object Undefined]&quot;\ntoString(&quot;&quot;)\n&quot;[object Undefined]&quot;\nObject.prototype.toString([])\n&quot;[object Object]&quot;\nObject.prototype.toString([1,2])\n&quot;[object Object]&quot;\nObject.prototype.toString(&quot;&quot;)\n&quot;[object Object]&quot;\nObject.prototype.toString.call([])\n&quot;[object Array]&quot;\n</code></pre> <h2 id="background可以设置多个背景图片">background可以设置多个背景图片</h2> <h2 id="cookie、token、session的区别">COOKIE、token、session的区别</h2> <p>个浏览器能创建的 Cookie 数量最多为 300 个，并且每个不能超过 4KB，每个 Web 站点能设置的 Cookie 总数不能超过 20 个。</p> <p>A：首先，客户端会发送一个http请求到服务器端；</p> <p>B： 服务器端接受客户端请求后，发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部；</p> <p>C：在客户端发起的第二次请求（注意：如果服务器需要我们带上Cookie，我们就需要在B步骤上面拿到这个Cookie然后作为请求头一起发起第二次请求），提供给了服务器端可以用来唯一标识客户端身份的信息</p> <p>Cookie 中的所有数据在客户端就可以被修改，数据非常容易被伪造，那么一些重要的数据就不能存放在 Cookie 中了，而且如果 Cookie 中数据字段太多会影响传输效率。为了解决这些问题，就产生了 Session，Session 中的数据是保留在服务器端的。服务端检查 Cookie 中保存的 session_id 并通过这个 session_id 与服务器端的 Session data 关联起来，进行数据的保存和修改。</p> <h2 id="requestanimationframe">requestAnimationFrame</h2> <p>html5 还提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是<strong>请求动画帧。</strong></p> <pre><code class="language-jsx">var progress = 0;\n    //回调函数\n    function render() {\n     progress += 1; //修改图像的位置\n     if (progress &lt; 100) {\n     //在动画没有结束前，递归渲染\n     window.requestAnimationFrame(render);\n     }\n    }\n    //第一帧渲染\n    window.requestAnimationFrame(render);&lt;/pre&gt;\n</code></pre> <h2 id="session的弊端">session的弊端</h2> <p>1、服务器压力增大</p> <p>通常session是存储在内存中的，每个用户通过认证之后都会将session数据保存在服务器的内存中，而当用户量增大时，服务器的压力增大。</p> <p>2、CSRF跨站伪造请求攻击</p> <p>session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p> <p>3、扩展性不强</p> <p>如果将来搭建了多个服务器，虽然每个服务器都执行的是同样的业务逻辑，但是session数据是保存在内存中的（不是共享的），用户第一次访问的是服务器1，当用户再次请求时可能访问的是另外一台服务器2，服务器2获取不到session信息，就判定用户没有登陆过 ————————————————</p> <h2 id="token，保存再浏览器中，localstorage">token，保存再浏览器中，localstorage</h2> <p>浏览器会将接收到的token值存储在Local Storage中，（通过js代码写入Local Storage，通过js获取，并不会像cookie一样自动携带）</p> <p>服务器对浏览器传来的token值进行解密，解密完成后进行用户数据的查询，如果查询成功，则通过认证，实现状态保持，所以，即时有了多台服务器，服务器也只是做了token的解密和用户数据的查询，它不需要在服务端去保留用户的认证信息或者会话信息，这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了</p> <p>token用来做身份认证，session还可以保持其他的会话状态</p> <p>token可以放入cookie中存储。session、localstorage都行。</p> <p>在http请求header携带，authorization字段</p> <h2 id="http和https的区别">http和https的区别</h2> <p>https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。</p> <p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。</p> <p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443</p> <p>http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p> <p>TLS/SSL全称安全传输层协议Transport Layer Security, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，</p> <p>ssl属于会话层和表示层</p> <h2 id="https是怎么加密的">https是怎么加密的</h2> <p>客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。</p> <p>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p> <p><img src="https://pic4.zhimg.com/80/v2-1ea0209a526f3527a713736fe7609fcf_1440w.jpg" alt="img"></p> <h2 id="http1x和http20的区别">http1.x和http2.0的区别</h2> <p>HTTP1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启长连接keep-alive，</p> <p>HTTP1.1的请求消息和响应消息都支持host域， 在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，</p> <p>在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。 HTTP1.1支持只发送header信息（不带任何body信息）节省带宽。 </p> <p>在HTTP1.1中新增了24个错误状态响应码，</p> <p>多路复用技术：做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级：</p> <p>头部压缩：：HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p> <p>允许服务器推送</p> <h4 id="http20性能增强的核心：二进制分帧">HTTP2.0性能增强的核心：二进制分帧</h4> <p>HTTP2.0所有通信都是在一个TCP连接上完成</p> <p><strong>请求有优先级</strong></p> <h2 id="webworker的使用">webworker的使用</h2> <p>1）<strong>同源限制</strong></p> <p>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p> <p>（2）<strong>DOM 限制</strong></p> <p>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用<code>document</code>、<code>window</code>、<code>parent</code>这些对象。但是，Worker 线程可以<code>navigator</code>对象和<code>location</code>对象。</p> <p>（3）<strong>通信联系</strong></p> <p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p> <p>（4）<strong>脚本限制</strong></p> <p>Worker 线程不能执行<code>alert()</code>方法和<code>confirm()</code>方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p> <p>（5）<strong>文件限制</strong></p> <p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（<code>file://</code>），它所加载的脚本，必须来自网络。</p> <pre><code>//worker.js\nonmessage =function (evt){\n  var d = evt.data;//通过evt.data获得发送来的数据\n  postMessage( d );//将获取到的数据发送会主线程\n}\n</code></pre> <pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n &lt;script type=&quot;text/javascript&quot;&gt;\n//WEB页主线程\nvar worker =new Worker(&quot;worker.js&quot;); //创建一个Worker对象并向它传递将在新线程中执行的脚本的URL\n worker.postMessage(&quot;hello world&quot;);     //向worker发送数据\n worker.onmessage =function(evt){     //接收worker传过来的数据函数\n   console.log(evt.data);              //输出worker发送来的数据\n }\n &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>使用完毕，为了节省系统资源，必须关闭 Worker。</p> <blockquote> <pre><code class="language-javascript">// 主线程\nworker.terminate();\n\n// Worker 线程\nself.close();\n</code></pre> </blockquote> <h2 id="websocket的使用">websocket的使用</h2> <pre><code class="language-javascript">var ws = new WebSocket(&quot;wss://echo.websocket.org&quot;);\n\nws.onopen = function(evt) { \n  console.log(&quot;Connection open ...&quot;); \n  ws.send(&quot;Hello WebSockets!&quot;);\n};\n\nws.onmessage = function(evt) {\n  console.log( &quot;Received Message: &quot; + evt.data);\n  ws.close();\n};\n\nws.onclose = function(evt) {\n  console.log(&quot;Connection closed.&quot;);\n};     \n</code></pre> <h2 id="settimeout-0">settimeout 0</h2> <p>如果代码中设定了一个 setTimeout，那么浏览器便会在合适的时间，将代码插入任务队列，如果这个时间设为 0，就代表立即插入队列，但不是立即执行，仍然要等待前面代码执行完毕。所以 setTimeout 并不能保证执行的时间，是否及时执行取决于 JavaScript 线程是拥挤还是空闲。</p> <h2 id="postmessege（两个页面的跨域）">PostMessege（两个页面的跨域）</h2> <pre><code>postMessage(data,origin)方法接受两个参数\n</code></pre> <p>　　参数说明：</p> <p>　　data： html5规范支持任意基本类型或可复制的对象，<strong>但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</strong> 　　origin： 协议+主机+端口号，也可以设置为&quot;*&quot;，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为&quot;/&quot;。</p> <pre><code class="language-js">function test() {\n \n    let op = window.open(&#39;b.html&#39;, &#39;_blank&#39;); //打开新窗口，并建立窗口的引用变量op\n \n    function receiveMessage(event) {\n      console.log(&#39;event&#39;, event);\n \n    }\n \n    op.addEventListener(&quot;message&quot;, receiveMessage, false); //监听新开窗口发来的消息\n  }\n\n\n\n页面b\n&lt;script&gt;\n  function post() {\n    window.postMessage(&quot;hi there!&quot;, location.origin); //发送到所有同源的窗口，注意，当前窗口也会收到\n  }\n \n  function receiveMessage(event) {\n    console.log(&#39;event&#39;, event)\n \n  }\n  window.addEventListener(&quot;message&quot;, receiveMessage, false);\n&lt;/script&gt;\n\n</code></pre> <h2 id="cors跨域的缺点">CORS跨域的缺点</h2> <p>1、需要后端进行配置</p> <p>2、复杂请求的时候，会发送option预见请求，再发送真实请求，发送了两次，右性能损耗</p> <h2 id="jsonp默认不带cookie，但可以手动带">JSONP默认不带cookie，但可以手动带</h2> <h1 id="数据结构">数据结构</h1> <p><a href="https://blog.csdn.net/weixin_48726650/article/details/107789164">https://blog.csdn.net/weixin_48726650/article/details/107789164</a></p> <h2 id="堆和栈的区别">堆和栈的区别</h2> <p>1、堆栈空间分配区别</p> <p>栈（操作系统）：由操作系统（编译器）自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p> <p>堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。</p> <p>2、堆栈缓存方式区别</p> <p>栈使用的是一级缓存， 它们通常都是被调用时处于存储空间中，调用完毕立即释放。</p> <p>堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。</p> <p>3、堆栈数据结构区别</p> <p>堆（数据结构）：堆可以被看成是一棵树，如：堆排序。</p> <p>栈（数据结构）：一种先进后出的数据结构。</p> <h2 id="判断无向图是否有环">判断无向图是否有环</h2> <p>边数大于点数-1，则一定有环</p> <h2 id="stack">stack</h2> <p>用一个数组，</p> <pre><code class="language-js">class Stack {\n    constructor(){\n        this.count = 0;\n        this.data = [];\n    }\n    push(value){\n        this.data.push(value)\n    }\n    pop(){\n        this.data.pop()\n    }\n}\n</code></pre> <h2 id="queue">queue</h2> <pre><code class="language-js">class Queue {\n    constructor() {\n        this.data = []\n    }\n    pop(){\n        this.data.shift()\n    }\n    push(value){\n        this.data.push(value)\n    }\n}\n</code></pre> <h2 id="优先队列">优先队列</h2> <pre><code class="language-js">class node {\n    constructor(a,b){\n       this.data = a;\n        this.rank = b;\n    }\n}\nlet a = new node(1,2)\na.data;\nObject.keys(a)[0];\n\nclass PQueue(){\n    constructor(){\n      this.collection = []    \n    }\n    push(value){\n        for(let i =0;i&lt;collection.length;i++){\n            if(value[1]&lt;collection[i][1]){\n                collection.splice(i,0,value)\n                break;\n            }\n        }\n    }\n    print(){\n    }\n}\n</code></pre> <h2 id="链表">链表</h2> <p>快慢指针</p> <pre><code class="language-js">class Node{\n    constructor(element){\n       this.element = element;\n       this.next = null; \n    }\n    \n}\n\nclass List {\n    constructor(){\n        this.length = 0;\n        this.head = null;\n    }\n    size() {\n        return this.length;\n    }\n    head() {\n        return this.head;\n    }\n    //从头开始找\n    add(element) {\n        let node = new Node(element);\n        if(head == null) {\n            head = node;\n        }else {\n            let currentNode = head;\n            while (currentNode.next) {\n                currentNode = currentNode.next;\n            }\n            currentNode.next = node;\n            \n        }\n        this.length++;\n    }\n    remove(element) {\n        let currentNode = this.head;\n        let preNode;\n        if(currentNode.element == element){\n            head = currentNode.next;\n        }\n        else {\n            while(currentNode.element !== element) {\n                preNode = currentNode;\n                currentNode = currentNode.next;\n            }\n            //跳过中间那个\n            preNode.next = currentNode.next;\n        }\n        this.length--;\n    }\n    }\n</code></pre> <h2 id="set-1">set</h2> <pre><code class="language-js">class MySet() {\n    constructor() {\n        this.collection = []\n    }\n    has(value) {\n        return (collection.indexOf(value) !== -1 ) \n    }\n    add(value) {\n        if(!this.has(vlue)) {\n            collection.push(value);\n            return true;\n        }\n        return false;\n    }\n}\n</code></pre> <h2 id="哈希表">哈希表</h2> <p>这时，就把重复的添加到同一hash值的元素的后面，让 next引用指向它，这样形成一个链表。所以数组索引处可以认为存放的就是一个链表。没有发生冲突的索引处就是只有一个元素的链表。JDK8以后，当链表长度大于8时，就转化为红黑树，这样就大大提高了查找效率。 所以HashMap要想快速查找关键就是让hash值不冲突，这样就不用遍历链表，才能提高效率。</p> <pre><code class="language-js">function hash(string, max) {\n   var hash = 0;\n    for() {\n        hash += string.charCodeAt(i)\n    }\n    return hash % max;\n}\n\nclass HashTable {\n    add(key, value) {\n        data[index] = [\n            [key, value]\n        ];\n        \n    }\n}\n</code></pre> <h2 id="二叉树">二叉树</h2> <pre><code class="language-js">class Node {\n    constructor(data, left =null, right = null) {\n        this.data = data;\n        this.left = left;\n        this.right = right;\n    }\n}\nclass tree {\n    constructor() {\n        this.root = null;\n    }\n    add(data) {\n        const node = this.root;\n        if(node === null) {\n            this.root = new Node(data);\n            return true;\n        }\n        else {\n            //平衡插入\n            const searchTree = function (node) {\n                if(data&lt;node.data) {\n                    if(node.left == null) {\n                        node.left = new Node(data);\n                        return true;\n                    }else if(node.left !== null) {\n                        return searchTree(node.left)\n                    }\n                }\n                else if(data&gt;node.data) {\n                    if()\n                }\n                 else {\n                     return null;\n                 }\n            }\n                return searchTree(node)\n        }\n    }\n        findMin() {\n            let current = this.root;\n            while (current.left !== null) {\n                current = current.left;\n                \n            }\n            return current.data;\n        }\n}\n</code></pre> <h2 id="prim算法（最小生成树）">prim算法（最小生成树）</h2> <p>一直找最短的路径</p> <p>标记visit，是否被访问。</p> <p>一直选与已选点最短路径的点</p> <h2 id="kruskal算法">kruskal算法</h2> <p>将边排序，选一直选最短的，要保证不构成环路</p> <p>所有的边按照权值先从小到大排列，接着按照顺序选取每条边，如果<strong>这条边的两个端点不属于同一集合，那么就将它们合并，</strong>直到所有的点都属于同一个集合为止</p> <h2 id="拓扑序列（多道工序，依次处理）">拓扑序列（多道工序，依次处理）</h2> <p>选一个入度为0的顶点。</p> <p>将所有入度为0的顶点入队列，然后删除这些顶点对应的边，再找入度为0的点，入队列并删除对应的边，重复操作。</p> <h2 id="dijkstra迪杰斯特拉，单源最短路径">Dijkstra(迪杰斯特拉)，单源最短路径</h2> <p>不允许负值</p> <h2 id="spfa算法（最短路径）">SPFA算法（最短路径）</h2> <p>时间复杂度比较大n*e，带环可能死循环</p> <p>1、首先我们先初始化数组dis如下图所示：（除了起点赋值为0外，其他顶点的对应的dis的值都赋予无穷大，这样有利于后续的松弛）</p> <p>2、此时，我们还要把v1如队列：{v1}，现在进入循环，直到队列为空才退出循环。，</p> <p>3、把v1出队列，并把v1相连的边的点进队列，并且更新dis数组对应的距离</p> <p>4、重复，出队列，进队列，松弛dis数组</p> <p>用队列里有的点作为起始点去刷新到所有点的最短路，如果刷新成功<strong>且被刷新点不在队列中</strong>则把该点加入到队列最后。重复执行直到队列为空。</p> <h2 id="归并排序">归并排序</h2> <pre><code class="language-js">递归分成两半，然后进行比较合并，nlogn，稳定排序\nfunction mergeSort(arr) {  // 采用自上而下的递归方法\n    var len = arr.length;\n    if(len &lt; 2) {\n        return arr;\n    }\n    var middle = Math.floor(len / 2),\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right)\n{\n    var result = [];\n\n    while (left.length &amp;&amp; right.length) {\n        if (left[0] &lt;= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n}\n</code></pre> <h2 id="快速排序">快速排序</h2> <p>与递归的深度有关。看基准值取的好不好</p> <p>最坏：n2，，，每次只能找出中间值，退化成冒泡了</p> <p>平均：nlogn，，， <em><strong>*快速排序最优的情况就是每一次取到的元素都刚好平分整个数组*</strong></em>(</p> <p>最优：nlogn，，具体次数不一样，但量级一样</p> <p>空间复杂度：</p> <p>如果用方法1，还要增加</p> <p> 首先就地快速排序使用的空间是O(1)的，也就是个常数级；而真正消耗空间的就是递归调用了，因为每次递归就要保持一些数据；</p> <p> <strong>最优的情况下空间复杂度为：O(logn) ；每一次都平分数组的情况</strong></p> <p> <strong>最差的情况下空间复杂度为：O( n ) ；退化为冒泡排序的情况</strong></p> <pre><code class="language-js">// 定义左右两个数组，选一个基准值，比它小的放左边，比它大的放右边，递归左右数组，合并基准值和左右递归\n// 思路简单，但插入删除性能消耗较大，而且需要新增数组来保存结果，空间消耗大\n\nvar quickSort = function(arr) {\n \n　　if (arr.length &lt;= 1) { return arr; }\n \n　　var pivotIndex = Math.floor(arr.length / 2);\n \n　　var pivot = arr.splice(pivotIndex, 1)[0];\n \n　　var left = [];\n \n　　var right = [];\n \n　　for (var i = 0; i &lt; arr.length; i++){\n \n　　　　if (arr[i] &lt; pivot) {\n \n　　　　　　left.push(arr[i]);\n \n　　　　} else {\n \n　　　　　　right.push(arr[i]);\n \n　　　　}\n \n　　}\n \n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n\n\n\n\n// 方法二\n// 选一个基准值的下标，前后双指针比较，在左边遇到比它大的，就停止，在右边遇到比它小的就停止，然后交换，，继续循环，\n// 左右边都进行递归，前指针与基准值，后指针与基准值\n  var devide_Xin = function (array, start, end) {\n        if(start &gt;= end) return array;\n        var baseIndex = Math.floor((start + end) / 2), // 基数索引\n             i = start,\n             j = end;\n\n        while (i &lt;= j) {\n            while (array[i] &lt; array[baseIndex]) {\n                i++;\n            }\n            while (array[j] &gt; array[baseIndex])  {\n                j--;\n            }\n\n            if(i &lt;= j) {\n                var temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        return i;\n    }\n\n    var quickSort_Xin = function (array, start, end) {\n        if(array.length &lt; 1) {\n            return array;\n        }\n        var index = devide_Xin(array, start, end);\n        if(start &lt; index -1) {\n            quickSort_Xin(array, start, index - 1);\n        }\n        if(end &gt; index) {\n            quickSort_Xin(array, index, end);\n        }\n\n        return array;\n    }\n</code></pre> <h1 id="flutter开发">Flutter开发</h1> <h2 id="flutter">flutter</h2> <h2 id="1、页面跳转">1、页面跳转</h2> <pre><code class="language-js">Navigator.push(context, MaterialPageRoute(builder: (context) {\n  return SecondScreen();\n}));\n</code></pre> <p>返回上一页</p> <pre><code class="language-js">Navigator.pop(context);\n</code></pre> <p>定义路由，&quot;/&quot;是第一个页面。</p> <p>不能在MaterialApp的页面跳转路由，只在其注册</p> <p>无法传参</p> <pre><code class="language-javascript">void main() =&gt; runApp(new MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: &quot;页面一&quot;,\n      ///注册路由表\n      routes: {\n        &quot;/&quot;: (context) =&gt; LoginPage(),\n        &quot;/home&quot;: (context) =&gt; Home(),\n      },\n    );\n  }\n}\n</code></pre> <h3 id="路由传参数">路由传参数</h3> <pre><code class="language-js">Navigator.pushNamed(context, &quot;/second&quot;, arguments: Photo(title: &quot;pass title&quot;,message: &quot;pass message&quot;));\n</code></pre> <p>photo是类名，一个对象</p> <h4 id="获取传递过来的参数">获取传递过来的参数</h4> <pre><code class="language-dar"> final Photo photo=ModalRoute.of(context).settings.arguments;\n</code></pre> <h3 id="在前一个页面接收另外一个页面的数据">在前一个页面接收另外一个页面的数据</h3> <h2 id="使用图片">使用图片</h2> <p>new Images.assets()</p> <p>fix: Boxfit.cover</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210717112916032.png" alt="image-20210717112916032"></p> <p>alignment</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716163257075.png" alt="image-20210716163257075"></p> <h2 id="container里面只有一个child">Container里面只有一个child</h2> <h2 id="样式类">样式类</h2> <p>Flutter的Decoration可以设置：背景色 背景图 边框 圆角 阴影 渐变色 的等属性，有点像android里面的shape，Decoration 是基类，它的子类有下面这些</p> <p>BoxDecoration:实现边框、圆角、阴影、形状、渐变、背景图像 ShapeDecoration:实现四边分别指定颜色和宽度、底部线、矩形边色、圆形边色、体育场（竖向椭圆）、 角形（八边角）边色 FlutterLogoDecoration:Flutter图片 UnderlineTabindicator:下划线</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716171737004.png" alt="image-20210716171737004"></p> <p>其实<code>Image.asset</code>是对<code>AssetImage</code>一层更高级的封装。</p> <h2 id="margin">margin</h2> <pre><code>Container(\n  margin:  EdgeInsets.fromLTRB(10, 10, 10, 10),\n),\n</code></pre> <h2 id="color">color</h2> <pre><code>Color.fromARGB(255,255,255,255),\n</code></pre> <p>255是透明度，255不透明</p> <p>Color.fromRGBO()</p> <p>Color(0xffffffff)</p> <p>八位十六进制颜色，前两位是透明度</p> <h2 id="页面创建模板">页面创建模板</h2> <p>对页面进行动态更新，双向绑定，相当于data的数据</p> <pre><code>class HomePage extends StatefulWidget {\n\n   final String props; \n\n  @override\n  _HomePageState createState() {\n    return _HomePageState();\n  }\n\n}\nclass _HomePageState extends State&lt;HomePage&gt; {\n \n String _data = &#39;&#39;;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text(&quot;data&quot;);\n  }\n}\n</code></pre> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210717113740617.png" alt="image-20210717113740617"></p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210717114141679.png" alt="image-20210717114141679"></p> <p>属性后面要跟一个相应的对象</p> <h2 id="发送请求">发送请求</h2> <p>添加dio依赖</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210717160142551.png" alt="image-20210717160142551"></p> <h3 id="get请求">get请求</h3> <pre><code class="language-dart">Dio dio new Dio();\nvar response = dio.get(&quot;/test&quot;,data:{&quot;id&quot;:12,&quot;name&quot;: &quot;adfaf&quot;})\nprint(response.data)\n</code></pre> <h3 id="post请求">Post请求</h3> <pre><code class="language-dar">\nDio dio new Dio();\nvar response = dio.post(&quot;/test&quot;,data:{&quot;id&quot;:12,&quot;name&quot;: &quot;adfaf&quot;})\nprint(response.data)\n</code></pre> <p>dio返回的数据，用[&quot;&quot;]访问</p> <h2 id="组件创建时调用">组件创建时调用</h2> <pre><code class="language-da">@override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n\n  }\n</code></pre> <p>方法写在state中</p> <h2 id="私有数据赋值">私有数据赋值</h2> <p>写在setState（）函数中</p> <h2 id="flex盒子row和column">flex盒子(row和column)</h2> <h3 id="web">web:</h3> <pre><code class="language-css">div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</code></pre> <p>组件</p> <ul> <li><p>Row</p> </li> <li><p>Column</p> </li> <li><p>Center</p> </li> <li><p>主轴：mainAxisAlighment: </p> </li> <li><p>交叉轴：crossAxisAlignment:</p> </li> </ul> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722165157983.png" alt="image-20210722165157983"><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722165234208.png" alt="image-20210722165234208"></p> <h2 id="对齐位置">对齐位置</h2> <p>alignment属性</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722170632391.png" alt="image-20210722170632391"></p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722170718252.png" alt="image-20210722170718252"></p> <p>本质是靠数值，可以通过自定义数值来调整位置，</p> <p>相当于盒子内的绝对布局absolute</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722172521097.png" alt="image-20210722172521097"></p> <p>盒子的绝对布局</p> <p>Positioned(</p> <p>)</p> <p>margin: EdgeInsets.only( top: 10)；</p> <pre><code class="language-js">this.$router.push()\n\nthis.$rouuter.go(-1)\n</code></pre> <pre><code class="language-html">&lt;div&gt;    &lt;p&gt;Lorem&lt;span&gt;ipsum&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;\n</code></pre> <h2 id="按需生成builder">按需生成builder</h2> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722172948833.png" alt="image-20210722172948833"></p> <h2 id="动画">动画</h2> <p>animationController</p> <p>比css更强大</p> <p>不仅是动画，还可以是一个函数，一个过程</p> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210722174206439.png" alt="image-20210722174206439"></p> <h2 id="1、cdn原理">1、cdn原理</h2> <p>通过cdn技术把<strong>源站的内容缓存到多个节点</strong>。用户向源站域名发起请求时，请求会被调度至最接近用户的服务节点，直接由服务节点直接快速响应，有效降低用户访问延迟，提升可用性。</p> <p>CDN网络是在用户和服务器之间增加Cache层，主要是通过接管DNS实现，将用户的请求引导到Cache上获得源服务器的数据，从而降低网络的访问的速度。</p> <h2 id="备份cdn">备份CDN</h2> <p>出于游戏稳定性的考虑，开发者可能会想将资源上传至多个CDN中，在一个服务器出问题后，可以自动由其他CDN来替补。</p> <p>想要配置多CDN，只需要：</p> <ol> <li>开发者可以在<code>Project Setting标签 &gt;&gt; 游戏设置 &gt;&gt; backupURLs</code>中配置。</li> <li>在Loader.load()调用的额外参数里，指定<code>httpRetryCount = 3</code>。</li> </ol> <p>这样的话每次下载失败之后，都会重试3次，每次重试都会自动尝试下一个CDN。</p> <h2 id=""></h2> <h2 id="2、dns原理">2、dns原理</h2> <p>寻找与域名对应的ip。</p> <p>客户机到本地DNS，递归查询</p> <p>浏览器缓存，系统缓存，路由器缓存，本地dns缓存</p> <p>本地DNS到其他DNS，迭代查询</p> <p>告诉你应该向哪个服务器去查询，不用一层一层的找</p> <h2 id="3、首屏渲染优化的方式">3、首屏渲染优化的方式</h2> <p>Script标签放到底部、DNS预解析、HTTP2.0、CDN、资源压缩、懒加载</p> <p>缓存、内联css</p> <h2 id="1、箭头函数和普通函数的区别">1、箭头函数和普通函数的区别</h2> <p>外形不同、</p> <p>箭头函数不能用于构造函数，不能使用new</p> <p>箭头函数的this指向创建它的对象</p> <p>箭头函数没有原型</p> <p>箭头函数都是匿名函数，普通函数可匿名也可以具名</p> <h2 id="3、手写div拖拽">3、手写div拖拽</h2> <pre><code class="language-js">\n//mousedown\\mousemove\\mouseup\n\nvar flag = false\nvar position = null\n\nxxx.addEventListener(&#39;mousedown&#39;,function(e){\n  flag = true\n  position = [e.clientX, e.clientY]\n})\n\ndocument.addEventListener(&#39;mousemove&#39;, function(e){\n  if(flag === false){return ;}\n  const x = e.clientX\n  const y = e.clientY\n  const deltaX = x - position[0]\n  const deltaY = y - position[1]\n\n  const left = parseInt(xxx.style.left || 0)\n  const top = parseInt(xxx.style.top || 0)\n \n  xxx.style.left = left + deltaX + &#39;px&#39;\n  xxx.style.top = top + deltaY + &#39;px&#39;\n  position = [x, y]\n})\n\ndocument.addEventListener(&#39;mouseup&#39;, function(e){\n  flag = false\n})\n</code></pre> <h2 id="4、手写防抖节流">4、手写防抖节流</h2> <pre><code class="language-js">function debonce(fn, delay) {\n    let timer = null;\n    \n    return function(){\n            clearsetTimeOut(timer);\n    timer =  setTimeOut(()=&gt;{\n        let args = arguments;\n        let context = this;\n        fn.apply(context,args);\n    },delay)\n    }\n\n}\n\nfunction jieliu() {\n    let timer = null;\n    return function(){\n          let args = arguments;\n          let context = this;\n          while(!timer){\n            timer = setTimeOut(()=&gt;{\n      \n            fn.apply(context,args);\n                timer = null;\n        },delay)\n      }\n    }\n  \n    \n    \n}\n//闭包，变量不会被0重置\n\nfunction throttle(fn, delay) {\n    let lastTime = 0;\n    return function(){\n        var nowTime = new Date().getTime();\n        console.log(nowTime)\n        if(nowTime-lastTime &gt; delay){\n            fn.call(this)\n            lastTime = nowTime\n        }\n    }\n}\nwindow.addEventListener(&#39;resize&#39;, debounce(fun,1000))\n</code></pre> <h2 id="3、前端有哪几种部署发布方式">3、前端有哪几种部署发布方式</h2> <p>1、nginx，tomcat、iis服务器部署</p> <p>2、docker容器部署</p> <p>3、cdn部署</p> <p>6、typeof和instanceof的区别</p> <h2 id="1、创建一个类">1、创建一个类</h2> <pre><code class="language-js">class map {\n    constructor(){\n        this.x = 0;\n        this.y = 0;\n    }\n    getX(){\n        return this.x;\n    }\n}\nlet a = new map();\na.x;\n</code></pre> <h2 id="7、call、apply、bind的区别">7、call、apply、bind的区别</h2> <p>都是改变this的指向、找function.prototype的call方法。把参数传进入。</p> <p>call一个一个参数传，apply传一个参数数组，bind不执行，返回一个函数。</p> <p>8、https是怎么加密的</p> <h2 id="1、对称加密和非对称加密">1、对称加密和非对称加密</h2> <p>对称加密使用同样的密钥。</p> <p>对称加密的密钥进行非对称加密，然后传送给需要它的人。</p> <p>（1） Alice需要在银行的网站做一笔交易，她的浏览器首先生成了一个随机数作为对称密钥。</p> <p>（2） Alice的浏览器向银行的网站请求公钥。</p> <p>（3） 银行将公钥发送给Alice。</p> <p>（4） Alice的浏览器使用银行的公钥将自己的对称密钥加密。</p> <p>（5） Alice的浏览器将加密后的对称密钥发送给银行。</p> <p>（6） 银行使用私钥解密得到Alice浏览器的对称密钥。</p> <p>（7） Alice与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</p> <p> 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p> <p>非对称：</p> <p>公钥进行加密，私钥进行解密。公钥公开，私钥自己保管，只有有私钥的才能进行解密。</p> <p>甲方再用自己私钥对加密后的信息进行解密。甲方想要回复乙方时正好相反，使用乙方的公钥对数据进行加密，同理，乙方使用自己的私钥来进行解密。</p> <h2 id="变量引用">变量引用</h2> <p>var count = 10 undefined function a(){return count+10;} undefined function b(){var count = 20;return a();} undefined b() 20</p> <pre><code class="language-js">var count = 10\nundefined\nfunction a(){return count+10;}\nundefined\nfunction b(){var count = 20;return a();}\nundefined\nb()\n20\nfunction c(){var count = 12;return function(){return count+1;}}\nundefined\nc()\nƒ (){return count+1;}\nc()()\n13\nfunction d(){var count = 16;return count + 2;}\nundefined\nd()\n18\n</code></pre> <h2 id="1、手写深拷贝">1、手写深拷贝</h2> <pre><code class="language-js">function copyObj(obj) {\n    let res = JSON.parse(JSON.stringify(obj));\n    res.__proto__ = obj.__proto__\n    return res;\n}\n\nDate（）会变成具体时间\nRegExp、Error对象会变成空对象\nfunction，undefined会丢失\nNaN会变成null\n</code></pre> <pre><code class="language-js">//常规方法\n function deepClone(obj) {\n     let newObj;\n     if(obj &amp;&amp; typeof obj != &quot;object&quot;) {\n         newObj = obj;\n}\n     else if(obj &amp;&amp; typeof obj === &#39;object&#39;) {\n         newObj = Array.isArray(obj) ? [] : {};\n         \n         for(let key in obj){\n             if(obj.hasOwnProperty(key)){\n                 if(obj[key]&amp;&amp; typeof obj[key] === &#39;object&#39;){\n                     newObj[key] = deepClone(obj[key])\n                 }\n                 else {\n                     newObj[key] = obj[key]\n                 }\n             }\n         }\n     }\n }\n</code></pre> <h2 id="1、学习前端的方式">1、学习前端的方式</h2> <p>菜鸟教程、技术博客、官方文档，书籍，搜索引擎，同行交流</p> <h2 id="bigint的使用">bigint的使用</h2> <pre><code class="language-js">得到的结果是正确的，感兴趣的话可以用字符串模拟乘法运算法则检验一下。\n可以看到BigInt与Number的区别在于后缀n，那么在刷题过程中，可以通过toString()的方法，把n去掉。\n加一个n\nvar x = 123456789n;\nvar y = 987654321n;\nconsole.log(x*y);//121932631112635269n\nconsole.log((x*y).toString());//121932631112635269\n</code></pre> <h2 id="1、选择器的优先级">1、选择器的优先级</h2> <p>\\1. 第一等：代表内联样式，如: style=””，权值为1000。</p> <p>\\2. 第二等：代表ID选择器，如：#content，权值为0100。</p> <p>\\3. 第三等：代表类，伪类和属性选择器，如.content，权值为0010。</p> <p>\\4. 第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。</p> <p>\\5. 通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。</p> <p>\\6. 继承的样式没有权值</p> <p>优先级：!important &gt; 内联样式 &gt; id选择器 &gt; 类、伪类、属性选择器 &gt; 标签、伪元素选择器</p> <p>权 重： !important：10000</p> <p>内联： 1000</p> <p>id选择器：100</p> <p>类、伪类、属性选择器：10</p> <p>标签、伪元素选择器：1</p> <p>通用选择器（*）、子选择器（&gt;）、相邻兄弟选择器（+）、通用兄弟选择器（~）权重值为0</p> <p>p{color:red;} /<em>权值为1</em>/ p span{color:green;} /<em>权值为1+1=2</em>/ .warning{color:white;} /<em>权值为10</em>/ p span.warning{color:purple;} /<em>权值为1+1+10=12</em>/</p> <p><strong>权重可以叠加</strong></p> <p>当<code>11个class选择器</code>和<code>1个id选择器</code>在一块时，优先解析的是<code>id选择器</code>，并不会出现所谓的<code>11个class选择器</code>大于<code>id选择器</code>的问题</p> <p>id和class相差2位的十六进制，所以是16²=256。超过这个数目就有效。</p> <p>Chrome和Opera：即便class超过256个，权重也无法超过id。</p> <h2 id="promise的三种状态">promise的三种状态</h2> <p><strong>Pending、fulfilled、Rejected。</strong></p> <p>　　<strong>只有异步才可以改变状态。</strong></p> <p>　　<strong>resolved：走then</strong></p> <p>　　<strong>rejected：走catch</strong></p> <p>　　<strong>then走完，状态变为resolved</strong></p> <p>　　<strong>catch走完，状态变为resolved</strong></p> <p>resolve或者程序正常走完 作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去； reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），或者抛出一个错误时候，throw new Erro（“”），会变成reject状态，，，<strong>catch之后，又变成fulfilled状态。</strong></p> <p><strong>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</strong></p> <h2 id="1、xss攻击、xsrf攻击、sql注入、举例、怎么防范">1、xss攻击、xsrf攻击、sql注入、举例、怎么防范</h2> <p>xss攻击，是跨站脚本攻击，分为反射型，储存型和DOM型。反射型通常在一串url中包含恶意脚本，点击恶意链接就中招了。储存型是注入到服务器中，用户请求就会返回执行。</p> <p>攻击者提交恶意代码，浏览器执行恶意代码。</p> <p>防止cookie劫持，加上httpOnly</p> <p>过滤用户的输入。</p> <p>2、csrf，跨站请求伪造。</p> <p>第三方网站用你的cookie去请求目标网站。。</p> <p>同源检测，双重cookie，验证码防范。</p> <p>3、sql注入</p> <p>用户输入sql信息。</p> <p>防范：过滤信息，mybatis，负责数据库层mapper层</p> <p>使用#{}号，会有一个预编译，占位，而且变成字符串，可以防止sql注入。Java JDBC中的<code>PreparedStatement</code>预编译预防SQL注入</p> <p>4、DDOS攻击</p> <p>不断的发送请求，导致服务器瘫痪</p> <p>检测技术就是检测网站是否正在遭受 DDoS 攻击，而清洗技术就是清洗掉异常流量。这个需要根据具体的业务进行判断。</p> <p>5、文件上传漏洞</p> <p>上传用户图片，选择一个恶意病毒</p> <h2 id="1、css画曲线、画三角形">1、css画曲线、画三角形</h2> <p>1、画三角形</p> <p>使用border，令其他边的颜色为transparent。</p> <p>可以通过transfrom进行旋转，缩放，拉伸。</p> <p>宽高为0，是三角形。有宽高就是箭头</p> <p>2、画圆</p> <pre><code class="language-css">background: radial-gradient( circle, transparent 50px, black 51px, transparent 52px );\n</code></pre> <p>3、曲线运动，贝塞尔曲线运动</p> <p>cubic-bezier()</p> <h2 id="vue的生命周期钩子函数">vue的生命周期钩子函数</h2> <pre><code class="language-js">  beforeCreate(){\n                    console.log(&#39;vue实例创建前:&#39;+this.msg+&#39;,&#39;+this.$el);\n                    //    数据data和dom都还没有初始化\n                },\n                created(){\n                    console.log(&#39;vue实例创建后:&#39;+this.msg+&#39;,&#39;+this.$el);\n                    //数据dom初始化完成，dom还没有初始化完成\n                },\n                beforeMount(){\n                    console.log(&#39;元素挂载前:&#39;);\n                    console.log(this.$el);\n                },\n                mounted(){\n                    console.log(&#39;元素挂载后:&#39;);\n                    console.log(this.$el);\n                },\n                beforeUpdate(){\n                    console.log(&#39;实例更新前&#39;);\n                    console.log(this.msg);\n                    console.log(this.$el);\n                },\n                updated(){\n                    console.log(&#39;实例更新后&#39;);\n                    console.log(this.msg);\n                    console.log(this.$el);\n                },\n                beforeDestroy(){\n                    console.log(&#39;实例销毁前&#39;);\n                    console.log(this.msg);\n                },\n                destroyed(){\n                    console.log(&#39;实例销毁后&#39;);\n                    console.log(this.msg);\n                }\n</code></pre> <h2 id="vue2-diff算法">vue2 diff算法</h2> <p><img src="https://images2018.cnblogs.com/blog/998023/201805/998023-20180519212357826-1474719173.png" alt="img"></p> <p><img src="https://images2018.cnblogs.com/blog/998023/201805/998023-20180519213155724-1596106357.png" alt="img"></p> <pre><code class="language-js">//key值是否相等，标签名是否相等,是否是注释节点，他的数据是否相等，类型是否相等，去比较两个节点是否相似\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &amp;&amp;  // key值\n    a.tag === b.tag &amp;&amp;  // 标签名\n    a.isComment === b.isComment &amp;&amp;  // 是否为注释节点\n    // 是否都定义了data，data包含一些具体信息，例如onclick , style\n    isDef(a.data) === isDef(b.data) &amp;&amp;  \n    sameInputType(a, b) // 当标签是&lt;input&gt;的时候，type必须相同\n  )\n}\n\n不相同直接进行节点替换\n\n\n//如果节点相似，进一步比较patch\n找到对应的真实dom，称为el\n判断Vnode和oldVnode是否指向同一个对象，如果是，那么直接return\n如果他们都有文本节点并且不相等，那么将el的文本节点设置为Vnode的文本节点。\n如果oldVnode有子节点而Vnode没有，则删除el的子节点\n如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el\n如果两者都有子节点，则执行updateChildren函数比较子节点，这一步很重要\n\n//如果都有子节点，进一步比较，updateChildren\n将Vnode的子节点Vch和oldVnode的子节点oldCh提取出来\noldCh和vCh各有两个头尾的变量StartIdx和EndIdx，它们的2个变量相互比较，一共有4种比较方式。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx&gt;EndIdx表明oldCh和vCh至少有一个已经遍历完了，就会结束比较。\n\n如果是oldS和E匹配上了，那么真实dom中的第一个节点会移到最后\n如果是oldE和S匹配上了，那么真实dom中的最后一个节点会移到最前，匹配上的两个指针向中间移动\n如果四种匹配没有一对是成功的，那么遍历oldChild，S挨个和他们匹配，匹配成功就在真实dom中将成功的节点移到最前面，如果依旧没有成功的，那么将S对应的节点插入到dom中对应的oldS位置，oldS和S指针向中间移动。\n\n/*头尾两个指针向中间移动*/\n\n第一步\noldS = a, oldE = d；\nS = a, E = b;\noldS和S匹配，则将dom中的a节点放到第一个，已经是第一个了就不管了，此时dom的位置为：a b d\n\n第二步\noldS = b, oldE = d；\nS = c, E = b;\noldS和E匹配，就将原本的b节点移动到最后，因为E是最后一个节点，他们位置要一致，这就是上面说的：当其中两个能匹配上那么真实dom中的相应节点会移到Vnode相应的位置，此时dom的位置为：a d b\n\n第三步\noldS = d, oldE = d；\nS = c, E = d;\noldE和E匹配，位置不变此时dom的位置为：a d b\n\n第四步\noldS++;\noldE--;\noldS &gt; oldE;\n遍历结束，说明oldCh先遍历完。就将剩余的vCh节点根据自己的的index插入到真实dom中去，此时dom位置为：a c d b\n\n一次模拟完成。\n\n这个匹配过程的结束有两个条件：\n\noldS &gt; oldE表示oldCh先遍历完，那么就将多余的vCh根据index添加到dom中去（如上图）\nS &gt; E表示vCh先遍历完，那么就在真实dom中将区间为[oldS, oldE]的多余节点删掉\n\n\n\n\n//标识key的作用\ndiff算法只会比较同层的节点，不会跨层级比较。\n标识key可以提高diff算法的效率。记录一个索引表\nabcd\n更新成abfcd\n默认diff：将c替换成f，将d替换成c，最后插入d\n标识key后：直接插入f。\n</code></pre> <h2 id="vue3了解吗，与vue2的区别">vue3了解吗，与vue2的区别</h2> <p>速度更快，体积减小，重写了虚拟Dom的实现</p> <p>一些API的优化</p> <p>加强了对ts的支持</p> <p>vue3.0底层，会自动识别某个节点是否是动态的，如果是动态的会自动生成标识（不同的动态会有不同的标识对应，如内容文本的动态，或者id的动态），从而在每次更新dom时，直接跳过哪些静态的节点，直接定位到动态的节点，大大节省效率。</p> <ul> <li>Custom Renderer API：自定义渲染器</li> <li>在vue3中，新增了一个<code>setup</code>生命周期函数，</li> <li>我们在setup中挂载生命周期钩子，当执行到对应的生命周期时，就调用对应的钩子函数：</li> </ul> <p>在vue2.x中，在一个元素上同时使用v-for和v-if，<code>v-for</code>有更高的优先级，因此在vue2.x中做性能优化，有一个重要的点就是v-for和v-if不能放在同一个元素上。</p> <p><strong>而在vue3中，<code>v-if</code>比<code>v-for</code>有更高的优先级</strong>，所以会报错</p> <h3 id="4-diff算法优化">4. diff算法优化</h3> <p>深度递归遍历vnode树，节点的标签和key相同认为是同一个节点则更新，不同则删除，然后处理子节点。</p> <p><strong>子节点分这几种情况处理</strong>：纯文本、vnode 数组和空</p> <ol> <li>空往往意味着添加或删除；</li> <li>纯文本相同直接更新innerText，不同则删除；</li> <li>新旧子节点都是vnode数组则diff算法来处理；</li> </ol> <p><strong>vue3.0 diff算法思想</strong></p> <ol> <li>编译模版时进行<code>静态分析</code>，<code>标记动态节点</code>，diff对比差异时仅对比动态节点（性能提升明显）；</li> <li>diff算法先<code>去头去尾</code>，借此缩短遍历对比数组长度（对数组插入和删除操作性能优化明显）；</li> <li>通过对更新前后子节点数组<code>建立映射表</code>的方式，将O(n^2)复杂度的遍历降低到O(n)；</li> <li>通过<code>最长递增子序列</code>方法了来diff前后的子节点数组，减少移动操作的次数；</li> </ol> <ul> <li>vue3.0 diff算法的实现见<a href="https://link.zhihu.com/?target=http%3A//alanyf.gitee.io/personal-website/pages/virtualDom-diff-3.0.html">demo演示</a></li> <li>最长递增子序列算法实现：</li> </ul> <pre><code class="language-text">/*\n * 寻找最长递增子序列\n * 使用动态规划思想，a -&gt; c = a -&gt; b + b -&gt; c\n * 其中p数组存储的是从p[p[i]] 到 p[i] 的最长递增子序列索引，也就是前一个b的索引；\n * r数组存储最后一个元素也就是c的索引\n */\n function getSequenceOfLIS(arr) {\n    const p = [0];\n    const result = [0];\n    for (let i = 0; i &lt; arr.length; i ++) {\n        const val = arr[i];\n        const top = result[result.length - 1];\n        if (arr[top] &lt; val) {\n            p[i] = top;\n            result.push(i);\n            continue;\n        }\n        // 二分法搜索\n        let l = 0, r = result.length - 1;\n        while(l &lt; r) {\n            const c = (l + r) &gt;&gt; 1;\n            if (arr[result[c]] &lt; val) {\n                l = c + 1;\n            } else {\n                r = c;\n            }\n        }\n        if (val &lt; arr[result[l]]) {\n            if (l &gt; 0) {\n                p[i] = result[l - 1]\n            }\n            result[l] = i;\n        }\n    }\n    // 回朔p数组，找出最长递增子序列\n    let preIndex = result[result.length - 1];\n    for (let i = result.length - 1; i &gt; 0; i --) {\n        result[i] = preIndex;\n        preIndex = p[preIndex]\n    }\n    return result;\n}\n</code></pre> <h3 id="1、监听机制改变">1、监听机制改变</h3> <p>Proxy代替Object。defineProperty</p> <p>Object.defineProperty 只能监听到属性的读写，而 <code>Proxy</code> 除读写外，还可以监听属性的删除，方法的调用等</p> <p>Object.defineProperty 无法监测数组、对象的变化。而 Proxy 可以直接监视数组、对象的变化。</p> <h2 id="vue-cli3禁用eslint">vue-cli3禁用eslint</h2> <p>在根目录下的vue.config.js中添加 lintOnSave:false即可</p> <h2 id="1、map和weakmap的区别">1、map和weakmap的区别</h2> <p>map是强引用，weakmap是弱引用。</p> <p>弱引用会被垃圾回收</p> <p>map会导致内存泄漏</p> <h2 id="js垃圾回收">js垃圾回收</h2> <p>环境标记法</p> <p>引用计数法</p> <p>1、盒模型</p> <p>computed和watch的区别</p> <p>js隐式类型转换</p> <p>1、手写promise</p> <h2 id="2、刘海屏和异性屏">2、刘海屏和异性屏</h2> <p>padding</p> <p>3、scoped的原理</p> <p>4、正则表达式</p> <p>5、算法题：一个数组，分成三个和相等的数组</p> <p>1、垂直居中和水平居中</p> <p>2、浏览器渲染</p> <p>3、函数里面定义函数</p> <pre><code class="language-js">            function Foo(){\n                getName=function(){  //虽然这里没有用var，定义的是全局的，外部直接访问是无法访问的。\n                    console.log(1)\n                }      //这里定义一个函数（从数据类型角度理解），因为是定义在函数内部的函数，外部直接访问是无法访问的。\n                return this\n            }\ngetName();//报错\nFoo();\ngetName();//不会报错,1\n\n函数执行之后才定义。定义是全局的\n如果getName前面有var，则报错\n</code></pre> <p>4、用var和不用var声明对象的区别</p> <p>不用var，就是直接声明在全局对象下面，是全局对象的属性，可用delete删除。</p> <p>用var声明的，不可以用delete删除。</p> <h2 id="map转数组的方法">map转数组的方法</h2> <pre><code class="language-js">//1\nArray.from(map)\n//2\n[...map]\n//3\nfor(var key of map){\n    \n}\n</code></pre> <h2 id="iframe实现菜鸟教程的代码网页运行">iframe实现菜鸟教程的代码网页运行</h2> <pre><code class="language-js">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;123&lt;/div&gt;\n        &lt;iframe  id=&quot;f2&quot;&gt;&lt;/iframe&gt;\n    &lt;/body&gt;\n    &lt;script&gt;\n        let f2 = document.getElementById(&quot;f2&quot;)\n        let fw = f2.contentWindow.document\n        console.log(f2)\n        console.log(fw)\n        let a = document.createElement(&quot;div&quot;)\n        a.innerText = &quot;123&quot;\n        fw.body.appendChild(a)\n        console.log(fw)\n\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre> <h1 id="面试代码题">面试代码题</h1> <h2 id="1、搜索子串的下标">1、搜索子串的下标</h2> <pre><code class="language-js">/*\n * 查找一个字符串中的所有子串的位置\n */\nvar str = &quot;I think of other ages that floated upon the stream of life and love and death&quot;;\nvar positions = new Array();\nfunction searchSubStr(str,subStr){\n    var pos = str.indexOf(subStr);\n    while(pos&gt;-1){\n        positions.push(pos);\n        pos = str.indexOf(subStr,pos+1);\n    }\n}\nsearchSubStr(str,&quot;o&quot;);\nalert(positions);//8,11,29,37,51,64\n</code></pre> <h2 id="2、数组扁平化">2、数组扁平化</h2> <pre><code class="language-js">function flatten(arr) {\n    var res = arr.join().split(&#39;,&#39;)\n    res = res.map(item =&gt; +item)//字符串变数字\n    return res;\n}\n</code></pre> <h2 id="对象扁平化">对象扁平化</h2> <pre><code class="language-js">var newobj = {};\nfunction flat(cur, key2) {\n    Object.keys(cur).forEach(function(key) {\n        if (typeof cur[key] != &quot;object&quot;) {\n            if (key2) {\n                newobj[key2 + key] = cur[key]\n            } else {\n                newobj[key] = cur[key]\n            }\n        } else if (typeof cur[key] == &quot;object&quot;) {\n            if (key2) {\n                flat(cur[key], key2 + key + &quot;.&quot;)\n            } else {\n                flat(cur[key], key + &quot;.&quot;)\n            }\n        }\n    });\n    return newobj\n}\nvar target = flat(source);\n</code></pre> <h2 id="最大和连续子序列">最大和连续子序列</h2> <pre><code class="language-js">function maxSubArr(arr) {\n    let pre = 0; let max = arr[0]\n    for(let item of arr) {\n        pre = Math.max(item, pre+item)\n        max = Math.max(max, pre)\n    }\n    return max;\n}\n</code></pre> <h2 id="脱离文档流后，重排的开销比较小">脱离文档流后，重排的开销比较小</h2> <h2 id="反扁平化">反扁平化</h2> <pre><code class="language-js">function unflatten(obj) {\n    if (Object(obj) !== obj || Array.isArray(obj)) {\n        return obj;\n    }\n    var result = {};\n    var r = /\\.?([^\\.\\[\\]]+)|\\[(\\d+)\\]/g;    \n    for (var prop in obj) {\n        var matchs;\n        var cur = result;\n        var p = &quot;&quot;;\n        while(matchs = r.exec(prop)) {\n            cur = cur[p] || (cur[p] = matchs[2] ? []: {});\n            p = matchs[2] || matchs[1];\n        }\n        cur[p] = obj[prop];\n    }\n    return result[&quot;&quot;] || result;\n}\n</code></pre> <h2 id="class链式调用（lazyman）">class链式调用（lazyman）</h2> <pre><code class="language-js">\n</code></pre> <h2 id="数组随机排序">数组随机排序</h2> <p>第一种、利用数组自带的sort方法，比较函数用随机数-0.5</p> <p>第二洗牌、下标交互，Math.random()，保持随机下标对应的变量，顺序遍历i，然后交换</p> <h2 id="中文数转阿拉伯数字">中文数转阿拉伯数字</h2> <pre><code class="language-js">//中文转数字\n//一百万三千三十一\n\nfunction toNum(str){\n  let a = str.split(&#39;&#39;)\n  for(let i=a.length-1;i&gt;=0;i--){\n    if(a[i]==&#39;六&#39;){\n      a[i] = 6;\n    }\n    if(a[i]==&#39;三&#39;){\n      a[i] = 3;\n    }\n    if(a[i]==&#39;一&#39;){\n      a[i] = 1;\n    }\n    if(a[i]==&#39;千&#39;){\n      a[i] = 1000;\n    }\n    if(a[i]==&#39;百&#39;){\n      a[i] = 100;\n    }\n    if(a[i]==&#39;万&#39;){\n      a[i] = 10000;\n    }\n    if(a[i]==&#39;十&#39;){\n      a[i] = 10;\n    }\n  }\n  console.log(a)\n  let res = []\n  while(a.length){\n    let k =0;\n    let max = 0\n    for(let i =0;i&lt;a.length;i++){\n      if(a[i]&gt;max){\n         k = i;\n         max = a[i];\n      }\n    }\n    let all = 1;\n    for(let p=0;p&lt;=k;p++){\n      all *= a[p]\n    }\n    console.log(all)\n    a.splice(0,k+1)\n    res.push(all)\n  }\n  let ll=0\n  for(let i=0;i&lt;res.length;i++){\n    ll += res[i]\n  }\n  console.log(ll)\n}\ntoNum(&#39;六千一百三十一&#39;)\n</code></pre> <h2 id="domcontentload和load">DOMcontentload和load</h2> <ol> <li>解析HTML结构。</li> <li>加载外部脚本和样式表文件。</li> <li>解析并执行脚本代码。</li> <li>DOM树构建完成。//DOMContentLoaded</li> <li>加载图片等外部文件。</li> <li>页面加载完毕。//load</li> </ol> <h2 id="css背景图和img的加载顺序">CSS背景图和img的加载顺序</h2> <p>先加载html中的img，最后渲染的时候才请求css中的背景图</p> <h2 id="nodejs事件循环机制">nodeJS事件循环机制</h2> <ul> <li>Node 端，microtask 在事件循环的各个阶段之间执行</li> <li>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</li> </ul> <p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O 事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段（按照该顺序反复运行）…</p> <ul> <li><img src="https://pic3.zhimg.com/80/v2-24fd07c4074bdb1d169f63ad4de59a36_1440w.jpg" alt="img"></li> </ul> <pre><code class="language-js">setTimeout(()=&gt;{\n    console.log(&#39;timer1&#39;)\n    Promise.resolve().then(function() {\n        console.log(&#39;promise1&#39;)\n    })\n}, 0)\nsetTimeout(()=&gt;{\n    console.log(&#39;timer2&#39;)\n    Promise.resolve().then(function() {\n        console.log(&#39;promise2&#39;)\n    })\n}, 0)\n</code></pre> <p>浏览器端运行结果：<code>timer1=&gt;promise1=&gt;timer2=&gt;promise2</code></p> <p>Node 端运行结果：<code>timer1=&gt;timer2=&gt;promise1=&gt;promise2</code></p> <h2 id="懒加载防抖节流混合">懒加载(防抖节流混合)</h2> <p>images[i].src = images[i].getAttribute(&#39;data-src&#39;);</p> <pre><code class="language-js">\nfunction throttle(fn, delay, atleast) {//函数绑定在 scroll 事件上，当页面滚动时，避免函数被高频触发，\n        var timeout = null,//进行去抖处理\n        startTime = new Date();\n        return function() {\n        var curTime = new Date();\n        clearTimeout(timeout);\n        if(curTime - startTime &gt;= atleast) {\n            fn();\n            startTime = curTime;\n        }else {\n            timeout = setTimeout(fn, delay);\n        }\n        }\n    }\n    function lazyload() {\n        var images = document.getElementsByTagName(&#39;img&#39;);\n        var len    = images.length;\n        var n      = 0;      //存储图片加载到的位置，避免每次都从第一张图片开始遍历        \n        return function() {\n        var seeHeight = document.documentElement.clientHeight;\n        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n        for(var i = n; i &lt; len; i++) {\n            if(images[i].offsetTop &lt; seeHeight + scrollTop) {\n                if(images[i].getAttribute(&#39;src&#39;) === &#39;images/loading.gif&#39;) {\n                 images[i].src = images[i].getAttribute(&#39;data-src&#39;);\n                }\n            n = n + 1;\n             }\n        }\n        }\n    }\n    var loadImages = lazyload();\n    loadImages();          //初始化首页的页面图片\n    window.addEventListener(&#39;scroll&#39;, throttle(loadImages, 500, 1000), false);\n　　//函数节流（throttle）与函数去抖（debounce）处理,\n//500ms 的延迟，和 1000ms 的间隔，当超过 1000ms 未触发该函数，则立即执行该函数，不然则延迟 500ms 执行该函数\n</code></pre> <h2 id="4、找两个字符串的公共子串">4、找两个字符串的公共子串</h2> <p>substring</p> <p>indexof</p> <h2 id="睡眠函数（lazyman，死循环）">睡眠函数（lazyman，死循环）</h2> <pre><code class="language-js">//死循环法\nclass A{\n  constructor(name){\n    this.name = name;\n  }\n   sleep(time){\n    console.log(&#39;sleep&#39;)\n    let a = new Date().getTime();\n     for(;;){\n       let b = new Date().getTime();\n       if(b-a&gt;=time){\n         break;\n       }\n     }\n    return this;\n  }\n}\nlet a = new A(&#39;小明&#39;)\na.sleep(2000).sleep(1000)\n</code></pre> <h2 id="6、最小公倍数，最大公约数">6、最小公倍数，最大公约数</h2> <pre><code class="language-js">//两个数的最大公约数\nfunction gcd2(a,b){\n    var result = 1;\n    for(var i = 1; i &lt;= a &amp;&amp; i &lt;= b; i++ ){\n      if(a%i == 0 &amp;&amp; b%i == 0 ){\n        result = i;\n      }\n    }\n    return result;\n  }\n//辗转相除法\nfunction GCD(a,b){\n    var temp;\n    while(b != 0){\n      temp = a % b;\n      a = b;\n      b = temp;\n    }\n    return a;\n  }\n\n//最小公倍数的算法\nfunction scm(a,b){\n  return (a*b)/gcd(a,b);\n}\n</code></pre> <h2 id="合并两个有序数组">合并两个有序数组</h2> <pre><code class="language-js">var merge = function(nums1, nums2) {\n  for(let i=0;i&lt;nums1.length;i++){\n    for(let j=0;j&lt;nums2.length;j++){\n        \n        if(nums1[i]&lt;nums2[j]){\n            nums2.splice(j,0,nums1[i])\n            break;\n        }\n    }\n  }\n  return nums2;\n};\n//取最小的比较，放入一个新的数组\nvar merge = function(nums1, nums2) {\n  let res = []\n  let l = nums1.length+nums2.length\n  for(let i=0;i&lt;l;i++){\n     if(nums1[0]&lt;=nums2[0]){\n        res.push(nums1.shift())\n     }else {\n        res.push(nums2.shift())\n     }\n  }\n  return res;\n};\n</code></pre> <h2 id="连续子数组最大和">连续子数组最大和</h2> <pre><code class="language-js">//暴力\nvar maxSubArray = function(nums) {\n    let max = nums[0];\n  for(let i=0;i&lt;nums.length;i++){\n      for(let j=i+1;j&lt;=nums.length;j++){\n        let tmp = nums.slice(i,j);\n        let c = tmp.reduce((a,b,tmp)=&gt;{\n            return a+b;\n        })\n        if(c&gt;max){\n            max = c;\n        }\n      }\n  }\n  return max;\n};\n//动态规划\n//从第一个开始，如果加上后面的一个，比后面的那个大，那就连起来，连续，否则就重新从后面那个开始，因为它比前面的和都大。\n//比较最大值与pre\n//只有不是pre成为负数，就一直连续，比较记录最大和。知道x&gt;pre+x，重新开始\nvar maxSubArray = function(nums) {\nlet pre = 0, maxAns = nums[0];\n    nums.forEach((x) =&gt; {\n        pre = Math.max(pre + x, x);\n        maxAns = Math.max(maxAns, pre);\n    });\n    return maxAns;\n }\n</code></pre> <h2 id="最小k个数（快排改造）">最小K个数（快排改造）</h2> <pre><code class="language-js">//快排思想，快排改造优化\n每次从[start, end]范围内的数组中随机选择一个标杆元素(代码里取得是第一个元素), 然后把数组中所有小于标杆的放在数组左边，所有大于标杆的元素放在数组右边，然后判断标杆元素的位置是否等于目标位置。如果目标位置小于当前位置，则继续在左边查找，如果目标位置大于当前位置，则继续在右边查找。这样每次迭代都会缩小查找的范围。最理想的情况下时间复杂度是 O(logN)\n\n\n\n\nvar getLeastNumbers = function(arr, k){\n  quickSort(arr, 0, arr.length - 1);\n  return arr.slice(0, k);\n}\n\nvar quickSort = function(arr, l, r){\n  if(l &gt;= r) return;\n  let i = l, j = r;\n  while(i &lt; j){\n    &lt;!-- arr[l]当做标志位，以arr[l]为标准来比较 --&gt;\n    while(i &lt; j &amp;&amp; arr[j] &gt;= arr[l]) j--;\n    while(i &lt; j &amp;&amp; arr[i] &lt;= arr[l]) i++;\n    swap(arr, i, j);\n  }\n  &lt;!-- 这轮交换完后，arr[i]的左边都是比它小的，右边都是比它大的 --&gt;\n  // 把第一个标志，和中间位置交换\n  swap(arr, l, i);\n\n&lt;!-- 二分然后排序 --&gt;\n  quickSort(arr, l, i - 1);\n  quickSort(arr, i + 1, r);\n}\n\n&lt;!-- 交换数组中两个值 --&gt;\nvar swap = function(arr, i, j){\n  let tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\n\n\n\n\n\n\n//快排改造\n\n\nvar getLeastNumbers = function(arr, k) {\n    let len = arr.length\n    if (!len || !k) return []\n    let start = 0\n    let end = len - 1\n    // 寻找一次标杆元素的位置\n    let index = quikSort(arr, start, end)\n    // 如果标杆元素的位置不等于 K\n    while(index !== k - 1) {\n        if (index &gt; k-1) {\n            // 如果上一次查找，标杆元素位置大于目标位置\n            end = index-1\n            index = quikSort(arr, start, end)\n        } else {\n            // 如果上一次查找，标杆元素位置小于目标位置\n            start = index + 1\n            index = quikSort(arr, start, end)\n        }\n    }\n    return arr.slice(0, index+1)\n};\n\nfunction quikSort(arr, left, right) {\n    let pivot = arr[left]\n    while(left &lt; right) {\n        while(left &lt; right &amp;&amp; arr[right] &gt;= pivot) right--\n        arr[left] = arr[right]\n        while(left &lt; right &amp;&amp; arr[left] &lt; pivot) left++\n        arr[right] = arr[left]\n    }\n    arr[left] = pivot\n    //这里不做递归，只找标杆元素的下标就行\n    return left\n}\n\n</code></pre> <h2 id="7、搜索所有子串">7、搜索所有子串</h2> <pre><code class="language-js">for(let i=0;i&lt;arr.length;i++){\n    for(let j=0;j&lt;arr.length;j++){\n        arr.slice(i,j)\n    }\n}\n\n//搜索含有相同的子串\nfor(){//遍历第一个元素的所有字串\n    for(){//该子串与后面的元素进行匹配\n        indexOf()\n    }\n}\n</code></pre> <h2 id="38、手写ajax">38、手写ajax</h2> <pre><code class="language-javascript">//\n\n//创建ajax对象并实例化\nvar xhr = new XMLHttpRequest()\n    //设置请求方式和请求地址\n        xhr.open(&#39;GET&#39;,&#39;www.localhost:3000/?name=zs&amp;age=12&#39;)\n        //readystate是xhr对象中的属性，用来获取ajax状态码 0 1 2 3 4\n        xhr.onreadystatechange = function(){\n        //判断ajax状态码\n        //status获取http状态码。200表示ok\n            if(xhr.readyState === 4 &amp;&amp; xhr.status === 200){\n            //xhr.responseText表示请求返回的数据内容 \n                console.log(xhr.responseText)\n            }\n        };\n        //发送\n        xhr.send();\n</code></pre> <h2 id="实现some方法">实现some方法</h2> <pre><code class="language-js">// 实现some\nArray.prototype.some = function(fn, value){\n    if (typeof fn !== &quot;function&quot;) {\n        return false;\n    }\n    var arr = this;\n    for (var i = 0; i &lt; arr.length; i++) {\n        var result = fn.call(value, arr[i], i, arr);\n        if (result) return true;\n    }\n    return false;\n}\n</code></pre> <h2 id="手写filter">手写filter</h2> <pre><code class="language-js">Array.prototype.fit = function(fn, value){\n  if (typeof fn !== &quot;function&quot;) {\n      return false;\n  }\n  var arr = this;\n  let res = []\n  for (var i = 0; i &lt; arr.length; i++) {\n      var result = fn.apply(value, [arr[i]]);\n      if (result){\n        res.push(arr[i])\n      }\n  }\n  return res;\n}\nlet a = [1,2,3,4]\nlet b = a.fit((a)=&gt;{\n   return a&gt;2\n},{})\nconsole.log(b)\n</code></pre> <h2 id="手写promiseall">手写promiseALl</h2> <pre><code class="language-js">Promise.all = function (iterator) {  \n    let count = 0//用于计数，当等于len时就resolve\n    let len = iterator.length\n    let res = []//用于存放结果\n    return new Promise((resolve,reject) =&gt; {\n        for(let i in iterator){\n            Promise.resolve(iterator[i])//先转化为Promise对象\n            .then((data) =&gt; {\n                res[i] = data;\n                if(++count === len){\n                    resolve(res)\n                }\n            })\n            .catch(e =&gt; {\n                reject(e)\n            })\n        }\n    })\n}\n\nPromise.race = function (iterators) {  \n    return new Promise((resolve,reject) =&gt; {\n        for (const p of iterators) {\n            Promise.resolve(p)\n            .then((res) =&gt; {\n                resolve(res)\n            })\n            .catch(e =&gt; {\n                reject(e)\n            })\n        }\n    })\n\n}\n</code></pre> <h2 id="实现call方法">实现call方法</h2> <pre><code class="language-js">//模拟call方法\nFunction.prototype.call_ = function (obj) {\n    obj.fn = this; // 此时this就是函数fn\n    obj.fn(); // 执行fn\n    delete obj.fn; //删除fn\n};\nfn.call_(obj); // 听风是风\n</code></pre> <h2 id="手写js-bridge封装原生">手写js bridge封装原生</h2> <pre><code class="language-js">原生端：\n\npublic class NativeInjectObject {\n    public void openCamera(successCbKey, failCbKey) {\n        // 尝试打开摄像头\n        if (success) {\n            webview.evaluateJavacript(String.format(successCbKey))\n        } else {\n            webview.evaluateJavacript(String.format(failCbKey))\n        }\n    }\n\n    public void getLocation(successCbKey, failCbKey) {\n        // 尝试获取用户位置\n        if (success) {\n            webview.evaluateJavacript(String.format(successCbKey))\n        } else {\n            webview.evaluateJavacript(String.format(failCbKey))\n        }\n    }\n}\n//webview上添加接口\nwebview.addJavascriptInterface(new NativeInjectObject(), &#39;NativeBridge&#39;)\n\njs端：\n// 打开摄像头\nwindow.jsbridge\nfunction openCamera() {\n  return new Promise((resolve, reject) =&gt; {\n    const successCbKey = uuid();\n    window[successCbKey] = (res) =&gt; {\n      resolve(res);\n      delete window[successCbKey];\n    };\n\n    const failCbKey = uuid();\n    window[failCbKey] = (err) =&gt; {\n      reject(err);\n      delete window[failCbKey];\n    };\n\n    window.NativeBridge.openCamera(successCbKey, failCbKey);\n  });\n}\n</code></pre> <h1 id="浏览器api">浏览器api</h1> <pre><code class="language-js">页可见区域宽： document.body.clientWidth;\n网页可见区域高： document.body.clientHeight;\n网页可见区域宽： document.body.offsetWidth (包括边线的宽);\n网页可见区域高： document.body.offsetHeight (包括边线的宽);\n\n网页正文全文宽： document.body.scrollWidth;\n网页正文全文高： document.body.scrollHeight;\n网页被卷去的高： document.body.scrollTop;\n网页被卷去的左： document.body.scrollLeft;\n网页正文部分上： window.screenTop;\n网页正文部分左： window.screenLeft;\n屏幕分辨率的高： window.screen.height;\n屏幕分辨率的宽： window.screen.width;\n屏幕可用工作区高度： window.screen.availHeight;\n\nHTMLElement.offsetTop 为只读属性，它返回当前元素相对于其 offsetParent 元素的顶部的距离。\nwindow.innerHeight：浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。\n</code></pre> <h2 id="浏览器缓存">浏览器缓存</h2> <p>两个容易混淆，no-cache不是不缓存的意思，</p> <p>no-cache 可以在本地缓存，可以在代理服务器缓存，但是这个缓存要服务器验证才可以使用 no-store 彻底得禁用缓冲，本地和代理服务器都不缓冲，每次都从服务器获取</p> <h2 id="如何判断localstrorage剩余容量">如何判断localStrorage剩余容量</h2> <p>首先用了JSON.stringify(localStorage).length得出你当前页面的localstorage所使用的字符数量current_num。</p> <p>然后你再去<a href="http://arty.name/localstorage.html%E8%BF%99%E9%87%8C%EF%BC%8C%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E7%9A%84localstorage%E6%9C%80%E5%A4%A7%E4%BD%BF%E7%94%A8%E9%87%8Ftotal_num%E3%80%82">http://arty.name/localstorage.html这里，获取页面的localstorage最大使用量total_num。</a></p> <p>total_num - currentnum就是页面的localstorage剩余容量。</p> <h1 id="ts入门">TS入门</h1> <ul> <li>类 Classes</li> <li>接口 Interfaces</li> <li>模块 Modules </li> <li>类型注解 Type annotations</li> <li>编译时类型检查 Compile time type checking</li> </ul> <p>a ?: number;</p> <p>?:是可选属性，a可以是number或者undefined；</p> <p>let isDone: boolean = false;</p> <p>let list: Array<number> = [1, 2, 3];</number></p> <p>let list: number[] = [1, 2, 3];</p> <p>枚举</p> <p>enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat };</p> <p>function add(x: number, y: number): number { return x + y; }</p> <p>我们可以使用 <code>interface</code> 来定义复杂数据类型，用来描述形状或抽象行为。如：</p> <pre><code class="language-typescript">interface IPerson {\n  name: string;\n  age: number;\n  sayName(): void;\n}\n</code></pre> <pre><code class="language-js">class Student {\n    fullName: string;\n    constructor(public firstName, public middleInitial, public lastName) {\n        this.fullName = firstName + &quot; &quot; + middleInitial + &quot; &quot; + lastName;\n    }\n}\n\ninterface Person {\n    firstName: string;\n    lastName: string;\n}\n\nfunction greeter(person : Person) {\n    return &quot;Hello, &quot; + person.firstName + &quot; &quot; + person.lastName;\n}\n\nlet user = new Student(&quot;Jane&quot;, &quot;M.&quot;, &quot;User&quot;);\n\ndocument.body.innerHTML = greeter(user);\n</code></pre> <h2 id="manifest-的目的是将web应用程序安装到设备的主屏幕，为用户提供更快的访问和更丰富的体验。">manifest 的目的是将Web应用程序安装到设备的主屏幕，为用户提供更快的访问和更丰富的体验。</h2> <h2 id="wasmwebassembly">WASM,webassembly</h2> <p>用c++写编译成汇编/机器码格式,导入js中执行</p> <p>用在vr,cad,游戏等场景中</p> <p>可以用现成的c代码,不需要重新写</p> <p>编译器:Emscripten</p> <pre><code class="language-bash">C/C++ ⇒ LLVM ==&gt; LLVM IR ⇒ Emscripten ⇒ asm.js\n</code></pre> <p>一旦 JavaScript 引擎发现运行的是 asm.js，就知道这是经过优化的代码，可以跳过语法分析这一步，直接转成汇编语言。另外，浏览器还会调用 WebGL 通过 GPU 执行 asm.js，即 asm.js 的执行引擎与普通的 JavaScript 脚本不同。这些都是 asm.js 运行较快的原因。据称，asm.js 在浏览器里的运行速度，大约是原生代码的50%左右。</p> <p>Module.cwrap()执行</p> <h1 id="数据库基础">数据库基础</h1> <h1 id="计算机网络">计算机网络</h1> <h2 id="17、http详解">17、http详解</h2> <p><strong>支持客户/服务器模式。</strong> <strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。 <strong>灵活：</strong>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type（Content-Type是HTTP包中用来表示内容类型的标识）加以标记。 <strong>无连接</strong>：无连接的含义是限制<strong>每次连接只处理一个请求</strong>。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 <strong>无状态</strong>：无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。 <img src="C:%5CUsers%5C%E5%88%98%E5%9B%BD%E6%9E%97%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210325125011649.png" alt="image-20210325125011649"></p> <p>在HTTP/1.0版本的时候，客户端与服务器完成一个请求/响应之后，会将之前建立的TCP连接断开，下次请求的时候又要重新建立TCP连接，这也被称为短连接 在HTTP1.0发布仅半年后（1997年1月） ，HTTP/1.1版本发布并带来一个新的功能：在客户端与服务器完成一次请求/响应之后，允许不断开TCP连接，这意味着下次请求就直接使用这个TCP连接而不再需要重新握手建立新连接，这也被称为长连接 注意：长连接是指一次TCP连接允许多次HTTP会话，HTTP永远都是一次请求/响应，会话结束，HTTP本身不存在长连接之说。</p> <h2 id="6、说一下http20">6、说一下http2.0</h2> <p>http2.0提高访问速度，相比http1.0，请求资源所需的时间更少。</p> <p>允许多路复用。http1.1中对同一域名下的请求有一定数量限制。</p> <p>二进制分帧层</p> <p>在二进制分帧层上，<strong>HTTP 2.0会将所有传输的信息分割为更小的消息和帧</strong>，并对它们采用二进制格式的编码</p> <h2 id="长连接和多路复用的区别">长连接和多路复用的区别</h2> <p>长连接：同一个域名访问同一个文件的多个请求都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接） 依然存在的问题：1.多个请求只能被串行处理（数据基于文本，只能按顺序传输）；2.访问多个不同的文件依然会建立多个请求。</p> <p>多路复用：同一个域名访问多个文件的请求也可以复用一个tcp连接，且多个请求可以被并行处理。 并行实现原理：http2.0引入二进制数据帧和流的概念（数据帧对每一个数据进行标识，可以不按顺序传输，从而实现并行）</p> <h2 id="tcp的各种机制">TCP的各种机制</h2> <h3 id="1、确认应答机制">1、确认应答机制</h3> <p>每个字节的数据都进行了编号，就是序列号，可以保证你发送的和对方接收的数据的有序的。</p> <h3 id="2、超时重传机制">2、超时重传机制</h3> <p>a发送数据给b后，由于网络堵塞等原因，没有得到确认，a就会重发。</p> <p>利用序列号可以清楚的过滤掉重发的信息。</p> <p>重发的时间间隔会<strong>指数递增</strong>，累计一定次数就会关闭连接。</p> <h3 id="3、滑动窗口机制">3、滑动窗口机制</h3> <p>无需等待确认就可以进行发送。否则要等确认再发送，再等确认再发送，就会很慢。</p> <p>窗口大小：无需等待确认就可以进行发送的数据最大值</p> <h3 id="4、流量控制机制">4、流量控制机制</h3> <p>TCP根据接收端的处理能力来决定发送端的发送速度。</p> <p>接收端一旦发现自己的缓冲区快满了，就将滑动窗口的大小设置更小一点。</p> <h3 id="5、拥塞控制">5、拥塞控制</h3> <p>慢启动机制，先发送少量数据摸清当前的网络拥堵状态，再决定按照多大的速度发送。</p> <p>拥塞窗口的大小，最开始为1，然后指数增长，到达一定阈值之后，线性增长。</p> <h3 id="6、延迟应答">6、延迟应答</h3> <p>等待接收的数据到达自己的缓冲区大小后，再ack应答。若立即应答，返回的窗口比较小，传输速度下降。</p> <h3 id="7、粘包问题">7、粘包问题</h3> <p>TCP是一个一个报文传过来的，按照序号放在缓冲区。</p> <p>粘包问题就是，不知道怎么去划分数据包，不知道从哪一段到哪一段是一个完整的应用层数据包。</p> <p>UDP没有粘包问题，因为是完整的UDP报文，不存在半个。</p> <h3 id="8、tcp异常">8、TCP异常</h3> <p>禁止终止：仍然可以发送FIN，正常关闭</p> <p>断电断网：重传询问</p> <h3 id="可靠性：">可靠性：</h3> <p>1、校验和</p> <p>2、序列号</p> <p>3、确认应答</p> <p>4、超时重传</p> <p>5、流量控制</p> <p>6、拥塞控制</p> <h3 id="提高性能：">提高性能：</h3> <p>滑动窗口</p> <p>快速重传</p> <p>延迟应答</p> <p>稍带应答</p> <h2 id="udp只有校验和机制，确保不被修改，完整性">UDP只有校验和机制，确保不被修改，完整性</h2> <h1 id="设计原则">设计原则</h1> <h2 id="1、开闭原则">1、开闭原则</h2> <h2 id="2、单一责任原则">2、单一责任原则</h2> <h2 id="3、里氏替换原则">3、里氏替换原则</h2> <h2 id="4、依赖倒置原则">4、依赖倒置原则</h2> <h2 id="5、接口隔离原则">5、接口隔离原则</h2> <h2 id="6、合成复用原则">6、合成复用原则</h2> <h2 id="7、迪米特原则">7、迪米特原则</h2> <h1 id="图片加载">图片加载</h1> <h2 id="一、图片加载的原理">一、图片加载的原理</h2> <h3 id="1、加载目标与加载时机">1、加载目标与加载时机</h3> <p>解析dom是时候遇到img的src会请求资源</p> <p>构建渲染树时，浏览器根据dom节点对css进行匹配，css没有对应的节点：不发送请求，背景仅在应用的元素在页面中存在时，才会产生请求。</p> <p>执行js的时候，遇到image对象的src会请求资源</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/img-load-process.png" alt="image-20211110170255351"></p> <p>每个页面都有Renderer线程负责渲染页面， 而浏览器有io线程， 用来负责请求资源等。 为什么io线程不是放在每个页面里面而是放在浏览器框架呢？因为这样的好处是如果两个页面页面请求了相同资源的话， 如果有缓存的话就能避免重复请求了。</p> <h3 id="3、加载拦截">3、加载拦截</h3> <p>kCSP, <em>//csp内容安全策略检查</em> </p> <pre><code class="language-html">// 只信任当前域的图片请求\n&lt;meta http-equiv=&#39;Content-Security-Policy&#39; content=&#39;img-src &quot;self&quot;;&#39;&gt;\n</code></pre> <p>kMixedContent, <em>//mixed content</em> </p> <pre><code class="language-html">// 不允许在https页面中嵌入http请求，可自动升级http为https\n&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;\n</code></pre> <p>kOrigin, <em>//secure origin</em> </p> <p>kInspector, <em>//devtools的检查器</em> </p> <p>kSubresourceFilter,</p> <p> kOther, </p> <p>kNone</p> <h3 id="4、资源加载优先级">4、资源加载优先级</h3> <p> very-high、high、medium、 、low、very-low，</p> <p>其中MainRescource页面、css、字体这三个的优先级是最高的，然后是script，ajax这种， 而图片、音频的默认优先级是比较低的， 最低的事prefetch预加载的资源。</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/img-priority.png" alt="image-20211110151425522"></p> <p>在优先级在Medium以下的为delayable，即可推迟的， 而大于等于medium的为不可delayable的。从刚刚我们总结的表可以看出：css/js是不可推迟的，而图片， preload的js为可推迟加载：</p> <p>如图：css样式表优先加载，图片资源处于pending等待状态</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/img-priority-test1.png" alt="image-20211111143049717"></p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/img-priority-test2.png" alt="image-20211110161652705"></p> <h3 id="5、浏览器最大并发请求数">5、浏览器最大并发请求数</h3> <p><code>HTTP/1.1</code>中，单个TCP连接，在同一时间只能处理一个http请求，虽然存在Pipelining技术支持多个请求同时发送，但由于实践中存在很多问题无法解决，所以浏览器默认是关闭，所以可以认为是不支持同时多个请求。</p> <p><code>HTTP2</code>提供了多路传输功能，多个http请求，可以同时在同一个TCP连接中进行传输。</p> <p>Chrome浏览器最多允许对同一个域名Host建立6个TCP连接，不同的浏览器有所区别。</p> <p>如果图片都是HTTPS的连接，并且在同一域名下，浏览器会先和服务器协商使用<code>HTTP2</code>的<code>Multiplexing</code>功能进行多路传输，不过未必所有的挂在这个域名下的资源都会使用同一个TCP连接。如果用不了HTTPS或者HTTP2（HTTP2是在HTTPS上实现的），那么浏览器会就在同一个host建立多个TCP连接，每一个TCP连接进行顺序请求资源。</p> <p>同一域名一般为6个左右，最大不超过10个。</p> <p>假如一个页面有120个静态资源（css、js、img），并且所有资源都在一个域名下，使用的浏览器最大网络并行请求资源数是6，假设理想一些：所有请求时间都是一样的，每个文件加载需要500ms，则所有资源加载完成需要 120/6 * 0.5 = 10s 的时间。</p> <p><strong>优化方案：</strong></p> <p>1、控制首屏资源加载数，合并请求等</p> <p>2、将静态资源分布在不同的服务器中，使用多个域名，加大并发量</p> <h3 id="6、资源加载的过程">6、资源加载的过程</h3> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/load-timing.png" alt="image-20211112174203132"></p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/load-timing-2.png" alt="image-20211112115100514"></p> <p>第一次访问有初始化连接和SSL开销，后面没有说明用的是同一个tcp连接,只有stalled的等待时间</p> <p><strong>Queued at ：</strong>表示该请求加入到请求队列中的时刻，请求队列在打开F12后第一次发送请求的时候创建，直到关闭控制台的时候销毁。 <strong>Started at ：</strong>表示请求开始处理的时刻。 <strong>Queueing：</strong>表示请求从加入到请求队列中到请求开始处理经过的时间。 <strong>Stalled：</strong>请求在可以被发送出去之前的等待时间（阻塞时间），一般是等待可复用的TCP连接释放的时间。浏览器对于单个域名只能同时建立4~6个TCP连接（不同浏览器实现有差异）。 <strong>Proxy Negotiation：</strong>浏览器和代理服务器连接的协商时间。 <strong>DNS Lookup：</strong>域名解析花费的时间。 <strong>Initial Connection：</strong>建立TCP连接花费的的时间，包括TCP握手/重试和协商SSL。 <strong>Request sent：</strong>发送请求花费的时间。 <strong>Waiting (TTFB)：</strong>从发出请求到接收到响应第一个字节经过的时间，包括网络延迟时间。 <strong>Content Download：</strong>接收响应花费的时间。</p> <p><font color="#00ab46" size="5"> Queueing </font> </p> <p>请求文件顺序的的排序</p> <p><font color="#00ab46" size="5"> Stalled </font> </p> <p>是浏览器得到要发出这个请求的指令到请求可以发出的等待时间，一般是代理协商、以及等待可复用的TCP连接释放的时间，不包括DNS查询、建立TCP连接等时间等</p> <blockquote> <p>同域名最大TCP连接并发为6左右，可使用多种域名提高并发量</p> </blockquote> <p><font color="#00ab46" size="5"> DNS Lookup  </font> </p> <p>时间执行DNS查找。每个新域pagerequires DNS查找一个完整的往返。 DNS查询的时间，当本地DNS缓存没有的时候，这个时间可能是有一段长度的，但是比如你一旦在host中设置了DNS，或者第二次访问，由于浏览器的DNS缓存还在，这个时间就为0了。</p> <pre><code class="language-html">DNS预解析\n&lt;link rel=&quot;preconnect&quot; href=&quot;https://xxx.me&quot;&gt;\n</code></pre> <p><font color="#00ab46" size="5"> Initial connection </font> </p> <p>建立TCP连接的时间，就相当于客户端从发请求开始到TCP握手结束这一段，包括DNS查询+Proxy时间+TCP握手时间。</p> <pre><code class="language-html">预建立TCP链接：\n&lt;link rel=&quot;preconnect&quot; href=&quot;https://xxxime.com&quot;&gt;\n</code></pre> <p><font color="#00ab46" size="5"> SSL </font> </p> <p>https加密</p> <p><font color="#00ab46" size="5"> Request sent </font> </p> <p> 请求第一个字节发出前到最后一个字节发出后的时间，也就是上传时间</p> <p><font color="#00ab46" size="5"> WaitingTTFB </font> </p> <p>请求发出后，到收到响应的第一个字节所花费的时间(Time To First Byte),发送请求完毕到接收请求开始的时间;这个时间段就代表服务器处理和返回数据网络延时时间了。服务器优化的目的就是要让这个时间段尽可能短。</p> <blockquote> <p>服务器优化</p> </blockquote> <p><font color="#00ab46" size="5"> Content Download  </font> </p> <p>收到响应的第一个字节，到接受完最后一个字节的时间，就是下载时间</p> <blockquote> <p>压缩资源体积，减少下载时间</p> </blockquote> <p>参考文献：</p> <p>1、<a href="https://segmentfault.com/a/1190000016369295">https://segmentfault.com/a/1190000016369295</a> 《<a href="https://segmentfault.com/a/1190000016369295">理解浏览器允许的并发请求资源数</a>》</p> <p>2、<a href="https://blog.csdn.net/qq_34178990/article/details/82822662%E3%80%8A%E4%BB%8Echrome%E6%BA%90%E7%A0%81%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90%E3%80%8B">https://blog.csdn.net/qq_34178990/article/details/82822662《从chrome源码看浏览器如何加载资源》</a></p> <h2 id="二、懒加载">二、懒加载</h2> <h3 id="1、什么是懒加载">1、什么是懒加载</h3> <p>有时候一个网页会包含很多的图片，例如淘宝京东这些购物网站，商品图片多只之又多，页面图片多，加载的图片就多。服务器压力就会很大。不仅影响渲染速度还会浪费带宽。比如一个1M大小的图片，并发情况下，达到1000并发，即同时有1000个人访问，就会产生1个G的带宽。</p> <p>懒加载即延迟加载，需要的时候再进行图片的加载，而不是一次性加载全部图片</p> <h3 id="2、原理">2、原理</h3> <p>页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片，只有通过javascript设置了图片路径，浏览器才会发送请求。</p> <p>一张图片就是一个<code>&lt;img&gt;</code>标签，浏览器是否发起请求图片是根据<code>&lt;img&gt;</code>的src属性，所以实现懒加载的关键就是，在图片没有进入可视区域时，先不给<code>&lt;img&gt;</code>的src赋值，这样浏览器就不会发送请求了，等到图片进入可视区域再给src赋值。</p> <p><code>data-xxx</code> 中的<code>xxx</code>可以自定义，这里我们可以使用<code>data-src</code>来保存图片链接。</p> <h3 id="3、懒加载的优点">3、懒加载的优点</h3> <p>1、减轻服务器压力 2、减少无效的资源的加载并发加载的资源过多会阻塞js 的加载,影响网站的正常使用</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/lazy-load-theory.png" alt="image-20211108160239293"></p> <p>如图：不使用懒加载，需要下载5.9M资源，load耗时1.06s</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/lazy-load-test1.png" alt="image-20211112170920349"></p> <p>如图：使用懒加载，仅需下载1.2m资源，load耗时225ms</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/lazy-test2.png" alt="image-20211112171020713"></p> <h3 id="4、使用场景">4、使用场景</h3> <p>懒加载适用于图片较多，页面较长的页面场景中。</p> <p>1、超长列表滚动时</p> <p>2、图片资源多，且用户无需第一时间看到全部</p> <p>4、首屏加载完成了再进行加载，监听load事件</p> <h3 id="5、代码示例">5、代码示例</h3> <pre><code class="language-html">&lt;div class=&quot;container&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n     &lt;img src=&quot;loading.gif&quot;  data-src=&quot;pic.png&quot;&gt;\n&lt;/div&gt;\n&lt;script&gt;\nvar imgs = document.querySelectorAll(&#39;img&#39;);\nfunction lozyLoad(){\n        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        var winHeight= window.innerHeight;\n        for(var i=0;i &lt; imgs.length;i++){\n            if(imgs[i].offsetTop &lt; scrollTop + winHeight ){\n                imgs[i].src = imgs[i].getAttribute(&#39;data-src&#39;);\n            }\n        }\n    }\n  window.onscroll = lozyLoad();\n&lt;/script&gt;\n\n//vue项目中使用\n&lt;script src=&quot;https://image-1251917893.file.myqcloud.com/igame/npm/vue-lazyload@1.3.3/vue-lazyload.js&quot;&gt;&lt;/script&gt;\n</code></pre> <p>如图：首页只加载1、2、3的图片</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/lazy-test3.png" alt="image-20211111113809423"></p> <p>如图：浏览器往下滑动时，才开始加载4、5、6、7图片</p> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/lazy-test4.png" alt="image-20211111113855425"></p> <h2 id="三、预加载">三、预加载</h2> <h3 id="1、什么是预加载">1、什么是预加载</h3> <p>预加载即提前加载，当需要使用时直接从缓存中获取即可。</p> <h3 id="2、原理-1">2、原理</h3> <p>提前加载资源，减少等待时间，优化用户体验</p> <h3 id="3、预加载的优点">3、预加载的优点</h3> <p>提前加载资源，减少等待时间，优化用户体验</p> <h3 id="4、使用场景-1">4、使用场景</h3> <ul> <li><p>图片等静态资源在使用之前就提前请求，资源使用到的时候能从缓存中加载, 提升用户体验</p> <p>1、hover显示图片</p> <p>2、tab切换</p> <p>3、点击按钮显示图片等需要快速显示图片的场景</p> </li> </ul> <h3 id="5、代码示例-1">5、代码示例</h3> <h4 id="方法1：标签法">方法1：标签法</h4> <p>使用img标签</p> <pre><code class="language-js">&lt;img src=&quot;haorooms.jpg&quot; style=&quot;display: none&quot; /&gt;\n//ps：对于用display: none隐藏的元素css背景，不会产生HTTP请求\n</code></pre> <p>使用link标签：</p> <pre><code class="language-html">&lt;link rel=&quot;prefetch&quot; href=&quot;image.png&quot;&gt;\n</code></pre> <p>优点：可在不支持js或未开启js支持的浏览器使用</p> <h4 id="方法2：image对象">方法2：image对象</h4> <pre><code class="language-js">// 给img的src赋值，即可触发请求\nvar img = new Image();\nimg.src = &quot;https://xxx.png&quot;;\n\n//需要预加载的图片路径存放在数组里\n\n\nvar imgList = [\n        &quot;1.png&quot;,\n        &quot;2.png&quot;,\n        &quot;3.png&quot;\n    ];\n//遍历数组的路径，预加载\nfor (var i = 0; i &lt; imgList.length; i++) {\n    var img = new Image();\n    img.src = imgList[i];\n }\n</code></pre> <h4 id="方法3：请求、使用其他库-preloadjs">方法3：请求、使用其他库 Preload.js</h4> <p>xmlHttpRequest 异步请求. 优点: 可以监控Process 比如现在已经加载了多少.便于操控, 缺点有跨域问题. 使用其他库 比如Preload.js , 这个其实原生也是用src 或者 xmlHTTPRequest实现,默认是XMLHTTPRequest,</p> <blockquote> <p>官网：<a href="https://www.createjs.com/preloadjs">https://www.createjs.com/preloadjs</a></p> </blockquote> <pre><code class="language-js">var mainfest = [\n  { src: &quot;img/loading.gif&quot; },\n  { src: &quot;img/background.png&quot; },\n  { src: &quot;img/bg_repeat.jpg&quot; },\n// 音频\n  { src: &quot;./music/loop.mp3&quot;,id:&#39;loop&#39; },\n// 视频\n { src: &quot;./video/video_01.mp4&quot;,id:&#39;myVideo&#39; }\n  \n];\n \nvar preload = {\n  // 预加载函数\n  startPreload: function () {\n    var preload = new createjs.LoadQueue(true);\n    //为preloaded添加整个队列变化时展示的进度事件\n    preload.addEventListener(&quot;progress&quot;, this.handleFileProgress);\n    //注意加载音频文件需要调用如下代码行\n    preload.installPlugin(createjs.SOUND);\n    //为preloaded添加当队列完成全部加载后触发事件\n    preload.addEventListener(&quot;complete&quot;, this.loadComplete);\n    //设置最大并发连接数  最大值为10\n    preload.setMaxConnections(1);\n    preload.loadManifest(mainfest);\n  },\n  // 当整个队列变化时展示的进度事件的处理函数\n  handleFileProgress: function (event) {\n    $(&quot;.percent&quot;).text(&#39;loading...&#39; + Math.ceil(event.loaded * 100) + &quot;%&quot;);\n  },\n  // 处理preload添加当队列完成全部加载后触发事件\n  loadComplete: function () {\n    shuangjie.$pageLoad.addClass(&#39;hide&#39;).next().removeClass(&#39;hide&#39;)\n  }\n}\npreload.startPreload();\n</code></pre> <h4 id="方法4：css">方法4：css</h4> <pre><code class="language-css">/* 伪元素背景预加载 */\n.animate-pre-load::after {\n      content: &quot;&quot;;\n      background: url(https://image-1251917893.file.myqcloud.com/imgOptimization/d-1.png) no-repeat 0 0;\n      background-size: 100% 100%;\n    }\n\n/* 动画延迟预加载 */\n.animate-pre-load {\n      animation: animatePre 1s forwards;\n      animation-delay: 2s;\n    }\n    @keyframes animatePre {\n      0% {}\n      100% {\n        background: url(https://image-1251917893.file.myqcloud.com/imgOptimization/b-1.png) no-repeat 0 0;\n        background-size: 100% 100%;\n      }\n    }\n</code></pre> <p><img src="https://image-1251917893.file.myqcloud.com/imgOptimization/docImg/pre-load-test1.png" alt="image-20211111155156576"></p> <h2 id="总结">总结</h2> <p><strong>懒加载与预加载的区别：</strong> 这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p> <h1 id="canvas">canvas</h1> <h2 id="canvas学习">canvas学习</h2> <p>平面坐标： 左上角是0 0 </p> <pre><code class="language-js">var c=document.getElementById(&quot;myCanvas&quot;);// 获取dom节点\nvar ctx=c.getContext(&quot;2d&quot;);  //创建contenx\nctx.fillStyle=&quot;#FF0000&quot;; //颜色\nctx.fillRect(0,0,150,75);  //位置与宽高\n\nctx.moveTo(x,y) //移动画笔\nctx.lineTo(200, 100)//移动画笔到结束位置\nctx.stroke() //画线\n\n//画圆\nctx.beginPath();\nctx.arc(195,60,40,0,2*Math.PI);// x,y位置，40为直径，0为启始画点，2*Math.PI为终点，2*Math.PI画一圈，4*Math.PI画两圈\nctx.stroke();\n\n// 画字\nctx.font=&quot;30px Arial&quot;;\nctx.fillText(&quot;Hello World&quot;,10,50);\n\n// 创建渐变\nvar grd=ctx.createLinearGradient(0,0,200,0);\ngrd.addColorStop(0,&quot;red&quot;);\ngrd.addColorStop(1,&quot;white&quot;);\n// 填充渐变\nctx.fillStyle=grd;\nctx.fillRect(10,10,150,80);\n\n// 图片\nvar img=document.getElementById(&quot;scream&quot;);\nctx.drawImage(img,10,10);\n\n\n// \n平移 context.translate(x,y) 将默认的坐标系源点盐x轴y轴分别移动指定单位长度\n坐标缩放 context.scale(x,y) x,y是缩放的陪数\n坐标旋转 context.rotate(angle) 旋转一定角度，angle负时逆时针旋转\n\n// 堆栈原理保存状态\nsave():保存当前的绘图状态。（当前画笔的各个属性）\nrestore():恢复之前保存的绘图状态。\n\ncanvas\t取得画布&lt;canvas&gt;元素\nfillStyle\t填充路径的当前的颜色、模式或渐变\nglobalCompositeOperation\t指定颜色如何与画布上已有颜色组合（合成）\nlineCap\t指定线段端点的绘制方式\nlineJoin\t指定线段连接的绘制方式\nlineWidth\t绘制线段的宽度\nmiterLimit\t当lineJoin为miter时，这个属性指定斜连接长度和二分之一线宽的最大比率\nshadowBlur\t指定阴影模糊度\nshadowColor\t指定阴影颜色\nshadowOffsetX\t指定阴影水平偏移值\nshadowOffsetY\t指定阴影垂直偏移值\nstrokeStyle\t指定线段颜色\n\n// \nbeginPath() 方法开始一条路径，或重置当前的路径。\n提示：请使用这些方法来创建路径：moveTo()、lineTo()、quadricCurveTo()、bezierCurveTo()、arcTo() 以及 arc()。\n提示：请使用 stroke() 方法在画布上绘制确切的路径。\n</code></pre> <p>默认宽高：300*150</p> <p>不能通过css来控制，只能修改标签属性</p> <p>1、获取canvas对象</p> <pre><code class="language-js">var canvas = document.getElementById(&quot;cans&quot;)\n</code></pre> <p>2、创建上下文</p> <pre><code class="language-js">var ctx = canvas.getContext(&quot;2d&quot;)\n</code></pre> <p>3、坐标轴</p> <p>左上角是0，0</p> <h2 id="绘制矩形">绘制矩形</h2> <pre><code class="language-js">ctx.fillRect(x, y, width, height);//绘制一个填充的矩形\n\n// 绘制一个矩形边框\nctx.stokeRect(x, y, width, height);\n\n// 清空矩形区域（橡皮擦）\nctx.clearRect(x, y, width, height)\n</code></pre> <h2 id="绘制路径">绘制路径</h2> <pre><code class="language-js">// 开启路径\nctx.beginPath()\n\nctx.moveTo(x, y); // 移动画笔\nctx.lineTo(x, y); // 从画笔处画线至改坐标\n\n// 画圆\nctx.arc()\n\nctx.stroke();//绘线，不描边看不到上面的画线\nctx.fill();//填充路径的区域, 不描边也可以填充\n\n\n// 结束路径\nctx.closePath()\n或者可以再画线至起点\n\n\n</code></pre> <h2 id="使用样式和颜色">使用样式和颜色</h2> <pre><code class="language-js">// 这些 fillStyle 的值均为 &#39;橙色&#39;\nctx.fillStyle = &quot;orange&quot;;\nctx.fillStyle = &quot;#FFA500&quot;;\nctx.fillStyle = &quot;rgb(255,165,0)&quot;;\nctx.fillStyle = &quot;rgba(255,165,0,1)&quot;;\n// 画线的样式\nctx.strokeStyle = &quot;rgba(255,0,0,0.5)&quot;;\n\n// 透明度\n // 设置透明度值\n  ctx.globalAlpha = 0.2;\n或者用rgba（）  rgba更加灵活\n\n\n\n// 虚线\n用 setLineDash 方法和\nlineDashOffset 属性来制定虚线样式.\nsetLineDash 方法接受一个数组，来指定线段与间隙的交替；\nlineDashOffset 属性设置起始偏移量.\n\n\n// 渐变\n渐变颜色\ngradient.addColorStop(position, color)\nlineargradient.addColorStop(0,&#39;white&#39;);\nlineargradient.addColorStop(1,&#39;black&#39;);\n\n、、渐变距离\ncreateLinearGradient(x1, y1, x2, y2)\ncreateLinearGradient 方法接受 4 个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。\ncreateRadialGradient(x1, y1, r1, x2, y2, r2)\ncreateRadialGradient 方法接受 6 个参数，前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。\n</code></pre> <h2 id="3d转2d">3d转2d</h2> <pre><code class="language-js">//有一个点B，我们从A点观察B点。那么B点在xy平面上的投影即AB的延长线与平面xy的交点C。而xy平面不就是可以看一个二维的canvas画布吗。\n投影原理\n</code></pre> <h2 id="绘制图片">绘制图片</h2> <p>先获取图片的width和height</p> <p>swidth是计算图片里面的</p> <p>width是所裁剪出来的部分画在画布上的尺寸</p> <pre><code class="language-js">drawImage(img, sx, sy, swidth, sheight, x, y, width, height)\n</code></pre> <p><img src="C:%5CUsers%5Cgellenliu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211215102059758.png" alt="image-20211215102059758"></p> <pre><code class="language-js">let backgroundImage = new Image()\nbackgroundImage.src = this.backgroundSrc\nbackgroundImage.onload = ()=&gt; {\n  ctx.drawImage(backgroundImage, this.x, this.y, this.width, this.height)\n}\n</code></pre> <p>加载完才绘制，否则有可能绘制不出来</p> <h2 id="ctxdrawimage的图片，无论是网络图片还是本地图片都有一下结果">ctx.drawImage的图片，无论是网络图片还是本地图片都有一下结果</h2> <p>1、如果不做预加载，放在class里面，画不出来，放在onload等图片加载完才能画出来。 2、做了预加载之后，放在class里面，在开发者工具可以直接画出来，但是在手机上还是画不出来，要在onload才能画出来。 3、如果放在class外面，手机和开发者工具都可以直接画出来，</p> <p>解决方案：</p> <p>1、确实要等加载完才能画，代码运行速度肯定比加载快，所以画不出来，当然也可以requestAnimationFrame不断刷出来</p> <p>2、预加载后，可以直接从缓存里面取图片，但还是有一个加载的时间，有可能画不出来，与不同机器的性能、取缓存的速度有关</p> <p>3、class外面定义，小游戏最开始的加载页面就进行下载小游戏的代码包，会执行相关的js，所以class外面定义的image最开始就进行加载了，并且一直保持着这个对象在内存中，属于全局变量。</p> <p>4、只刷一次的，可放onload里面；requestAnimationFrame刷新的可以不用管（最开始会刷不出来）；静态图片可放class外面放全局变量保存（渲染最快）；</p> <p>5、做预加载，可加快onload的时间</p> <h2 id="databus全局状态管理，可做页面跳转判断">databus全局状态管理，可做页面跳转判断</h2> <p>main函数不断刷新，判断databus的页面的值选择渲染哪个页面</p> <h2 id="在一个canvas里面新建另外的canvas">在一个canvas里面新建另外的canvas</h2> <p>用drawImage绘制canvas在当面canvas上</p> <p>audio.addEventListener(&quot;canplay&quot;, function(){//监听audio是否加载完毕</p> <h2 id="cavas点击事件">cavas点击事件</h2> <p>获取触摸的坐标，如果坐标在按钮的范围之内，就触发点击函数</p> <h2 id="排行榜滚动">排行榜滚动</h2> <p>将数据绘制在离屏cavas上，再将这个canvas绘制再小游戏主canvas上，通过监听触摸滑动距离来控制drawImage的截取区域。</p> <p> touchMoveHandler(e) {</p> <p>​ e.preventDefault();</p> <p>​ const x = e.touches[0].clientX;</p> <p>​ const y = e.touches[0].clientY;</p> <h1 id="常用网站">常用网站</h1> <h2 id="uml图绘画地址">UML图绘画地址</h2> <p><a href="https://www.processon.com/diagrams">https://www.processon.com/diagrams</a></p> <h2 id="canvas提高清晰度">canvas提高清晰度</h2> <p>增加dpr倍像素，再缩放画布</p> <p>const dpr = wx.getSystemInfoSync().pixelRatio;</p> <p>canvas.width = window.innerWidth * dpr;</p> <p>canvas.height = window.innerHeight * dpr;</p> <p>ctx.scale(dpr, dpr);</p> <h2 id="canvas播放视频">canvas播放视频</h2> <p>创建video标签或者对象。该对象可以直接传入drawImage。但只绘制当前播放的帧。所以要用requestAnimationFrame来递归播放。</p> <p>也可以对cavas对象进行像素操作，比如绿幕抠图，抠视频</p> <h2 id="陨石位置算法">陨石位置算法</h2> <p>（屏幕宽度-陨石宽度） * 随机数（0到1）</p> <h2 id="碰撞算法">碰撞算法</h2> <p>判断子弹位置和陨石位置，碰撞后子弹消失，陨石生命减一。如果陨石生命为0 ，石头爆炸，返回true。</p> <p>X + WIDTH/2中心点，是否在碰撞的宽度内。飞机和陨石双重判断逻辑，飞机中心在陨石上，或者陨石中心在飞机上，都爆炸</p> ';e.exports=t}}]);
//# sourceMappingURL=chunk-2d0b631e.72c8007d.js.map